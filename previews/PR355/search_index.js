var documenterSearchIndex = {"docs":
[{"location":"APIs/Bucket/#Bucket","page":"Bucket Model","title":"Bucket","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"CurrentModule = ClimaLSM.Bucket","category":"page"},{"location":"APIs/Bucket/#Types","page":"Bucket Model","title":"Types","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"ClimaLSM.Bucket.BucketModelParameters\nClimaLSM.Bucket.BulkAlbedoStatic\nClimaLSM.Bucket.BulkAlbedoTemporal\nClimaLSM.Bucket.BulkAlbedoFunction\nClimaLSM.Bucket.BucketModel","category":"page"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.BucketModelParameters","page":"Bucket Model","title":"ClimaLSM.Bucket.BucketModelParameters","text":"struct BucketModelParameters{\n    FT <: AbstractFloat,\n    PSE,\n}\n\nContainer for holding the parameters of the bucket model.\n\nκ_soil: Conductivity of the soil (W/K/m); constant\nρc_soil: Volumetric heat capacity of the soil (J/m^3/K); constant\nalbedo: Albedo Model\nσS_c: Critical σSWE amount (m) where surface transitions from to snow-covered\nW_f: Capacity of the land bucket (m)\nz_0m: Roughness length for momentum (m)\nz_0b: Roughness length for scalars (m)\nτc: τc timescale on which snow melts\nearth_param_set: Earth Parameter set; physical constants, etc\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.BulkAlbedoStatic","page":"Bucket Model","title":"ClimaLSM.Bucket.BulkAlbedoStatic","text":"BulkAlbedoStatic{FT} <: AbstractLandAlbedoModel\n\nAn albedo model where the albedo of different surface types is specified. Snow albedo is treated as constant across snow location and across wavelength. Surface albedo is specified via a NetCDF file, which can be a function of time, but is treated as constant across wavelengths; surface is this context refers to soil and vegetation. This albedo type is static in time.\n\nNote that this option should only be used with global simulations, i.e. with a ClimaLSM.LSMSphericalShellDomain.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.BulkAlbedoTemporal","page":"Bucket Model","title":"ClimaLSM.Bucket.BulkAlbedoTemporal","text":"BulkAlbedoTemporal{FT} <: AbstractLandAlbedoModel\n\nAn albedo model where the albedo of different surface types is specified. Albedo is specified via a NetCDF file which is a function of time and covers all surface types (soil, vegetation, snow, etc). This albedo type changes over time according to the input file.\n\nNote that this option should only be used with global simulations, i.e. with a ClimaLSM.LSMSphericalShellDomain.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.BulkAlbedoFunction","page":"Bucket Model","title":"ClimaLSM.Bucket.BulkAlbedoFunction","text":"BulkAlbedoFunction{FT} <: AbstractLandAlbedoModel\n\nAn albedo model where the albedo of different surface types is specified. Snow albedo is treated as constant across snow location and across wavelength. Surface albedo (sfc) is specified as a function of latitude and longitude, but is also treated as constant across wavelength; surface is this context refers to soil and vegetation.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.BucketModel","page":"Bucket Model","title":"ClimaLSM.Bucket.BucketModel","text":"struct BucketModel{\n     FT,\n     PS <: BucketModelParameters{FT},\n     ATM <: AbstractAtmosphericDrivers{FT},\n     RAD <: AbstractRadiativeDrivers{FT},\n     D,\n } <: AbstractBucketModel{FT}\n\nConcrete type for the BucketModel, which store the model domain and parameters, as well as the necessary atmosphere and radiation fields for driving the model.\n\nparameters: Parameters required by the bucket model\natmos: The atmospheric drivers: Prescribed or Coupled\nradiation: The radiation drivers: Prescribed or Coupled\ndomain: The domain of the model\n\n\n\n\n\n","category":"type"},{"location":"APIs/Bucket/#Misc-Functions","page":"Bucket Model","title":"Misc Functions","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"ClimaLSM.Bucket.surface_albedo\nClimaLSM.Bucket.beta_factor","category":"page"},{"location":"APIs/Bucket/#ClimaLSM.surface_albedo","page":"Bucket Model","title":"ClimaLSM.surface_albedo","text":"surface_albedo(model::BucketModel, Y, p)\n\nReturns the bulk surface albedo, which gets updated in update_aux via next_albedo.\n\n\n\n\n\nsurface_albedo(model::AbstractModel, Y, p)\n\nA helper function which returns the surface albedo  for a given model, needed because different models compute and store α_sfc in different ways and places.\n\nExtending this function for your model is only necessary if you need to compute surface fluxes and radiative fluxes at the surface using the functions in this file.\n\n\n\n\n\nClimaLSM.surface_albedo(\n    model::EnergyHydrology{FT},\n    Y,\n    p,\n) where {FT}\n\nReturns the surface albedo field of the EnergyHydrology soil model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.beta_factor","page":"Bucket Model","title":"ClimaLSM.Bucket.beta_factor","text":"beta_factor(W::FT, σS::FT, W_f::FT) where {FT}\n\nComputes the beta factor which scales the evaporation from the potential rate.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#Methods-for-handling-parameters-read-in-from-NetCDF-files","page":"Bucket Model","title":"Methods for handling parameters read in from NetCDF files","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"ClimaLSM.Bucket.set_initial_parameter_field!\nClimaLSM.Bucket.update_soil_albedo","category":"page"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.set_initial_parameter_field!","page":"Bucket Model","title":"ClimaLSM.Bucket.set_initial_parameter_field!","text":"function set_initial_parameter_field!(\n    albedo::BulkAlbedoFunction{FT},\n    p,\n    surface_coords,\n) where {FT}\n\nUpdates the spatially-varying but constant in time surface  albedo stored in the auxiliary vector p in place,  according to the passed function of latitute and longitude stored in albedo.α_sfc.\n\n\n\n\n\nfunction set_initial_parameter_field!(\n    albedo::BulkAlbedoStatic{FT},\n    p,\n    surface_coords,\n) where {FT}\n\nInitializes spatially-varying surface albedo stored in the auxiliary vector p in place, according to a NetCDF file.\n\nThe NetCDF file is read in, regridded, and projected onto the surface space of the LSM using ClimaCoreTempestRemap. The result is a ClimaCore.Fields.Field of albedo values.\n\n\n\n\n\nfunction set_initial_parameter_field!(\n    albedo::BulkAlbedoTemporal{FT},\n    p,\n    surface_coords,\n) where {FT}\n\nInitializes spatially- and temporally-varying surface albedo stored in the auxiliary vector p in place, according to a NetCDF file. This data file is encapsulated in an object of type ClimaLSM.FileReader.PrescribedDataTemporal in the field albedo.albedo_info. This object contains a reference date and start time, which are used to get the start date.\n\nThe NetCDF file is read in at the dates closest to this start date, regridded, and projected onto the surface space of the LSM using ClimaCoreTempestRemap. The result is a ClimaCore.Fields.Field of albedo values.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Bucket/#Artifact-Path-Functions","page":"Bucket Model","title":"Artifact Path Functions","text":"","category":"section"},{"location":"APIs/Bucket/","page":"Bucket Model","title":"Bucket Model","text":"ClimaLSM.Bucket.cesm2_albedo_dataset_path","category":"page"},{"location":"APIs/Bucket/#ClimaLSM.Bucket.cesm2_albedo_dataset_path","page":"Bucket Model","title":"ClimaLSM.Bucket.cesm2_albedo_dataset_path","text":"cesm2_albedo_dataset_path()\n\nTriggers the download of the CESM2 land albedo dataset, if not already downloaded, using Julia Artifacts, and returns the path to this file.\n\nThis dataset contains monthly albedo data from 15/01/1850 to 15/12/2014.\n\n\n\n\n\n","category":"function"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Bucket/coupled_bucket/#Setting-up-a-Coupled-Simulation","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"","category":"section"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"For more information about the bucket model, please see the bucket model tutorial.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"This tutorial shows how to set up a simulation for a coupled simulation. More detail for coupled runs can be found in the ClimaCoupler.jl documentation. In preparation for understanding this tutorial, we recommend also reading the intro to multi-component models tutorial as well as being familiar with multiple dispatch programming in Julia.","category":"page"},{"location":"generated/Bucket/coupled_bucket/#Background","page":"Setting up a Coupled Simulation","title":"Background","text":"","category":"section"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Recall that in order to drive the system in standalone mode, the user must provide prescribed functions of time for the water volume flux in precipitation,  for the net downward shortwave and longwave radiative energy fluxes, for the atmospheric temperature T_a, wind speed u_a (m/s), specific humidity q_a, and air density ρ_a (kg/m^3) at a reference height h_a (m).","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Turbulent surface fluxes are computed by the bucket model at each step of the simulation, using the land surface properties as well as the prescribed atmospheric properties, according to Monin-Obukhov theory. These fluxes, as well as the net radiation, are stored in the auxiliary state of the bucket model: p.bucket.turbulent_energy_flux, p.bucket.evaporation, p.bucket.R_n, where they are accessible when boundary conditions are required in the ODE functions (right hand side) of the prognostic equations.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In a coupled simulation, this changes. As we will see, the coupler computes turbulent surface fluxes based on information (prognostic state, parameters) passed to it by both the atmosphere and land models. Net radiation is computed within the atmosphere model, using the prognostic land surface temperature and the land surface albedo, and passed back to the land model via the coupler. Similarily, precipitation is computed within the atmosphere model, and passed back to the land model via the coupler. These details are important, but from the point of view of the land model, we only need to know that the coupler accesses land model variables to compute fluxes, and that the coupler passes these fluxes back to the land model.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In our current setup, \"passed back to the land model via the coupler\" means that the coupler accesses the auxiliary state of the land model and modifies it, at each step in the simulation, so that it holds the current net radiation, precipitation, and turbulent surface fluxes (p.bucket.turbulent_energy_flux, p.bucket.evaporation, p.bucket.R_n, p.bucket.P_liq, p.bucket.P_snow). These quantities are then still available in the ODE functions of the prognostic equations for the bucket model, as in the standalone case.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In order for the land model to be able to run both in standalone mode, and a coupled mode, within a single interface, we make use of multiple dispatch.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"To begin, let's import some necessary abstract and concrete types, as well as methods.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"using ClimaLSM\nusing ClimaLSM: AbstractAtmosphericDrivers, AbstractRadiativeDrivers\nusing ClimaLSM.Bucket: BucketModel, BucketModelParameters\n\nimport ClimaLSM.Bucket:\n    surface_fluxes,\n    surface_air_density,\n    liquid_precipitation,\n    snow_precipitation\n\nFT = Float64;","category":"page"},{"location":"generated/Bucket/coupled_bucket/#Turbulent-Surface-Fluxes-and-Radiation","page":"Setting up a Coupled Simulation","title":"Turbulent Surface Fluxes and Radiation","text":"","category":"section"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Let's review how turbulent surface fluxes and radiation are computed by the land model. The user first creates the prescribed atmosphere and prescribed radiation drivers. In pseudo code, this might look something like:","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"prescribed_atmos = PrescribedAtmosphere{FT}(*driver functions passed in here*) prescribed_radiation = PrescribedRadiativeFluxes{FT}(*driver functions passed in here*)","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"These are stored in the BucketModel object, along with BucketParameters. In order to compute turbulent surface fluxes, we call surface_fluxes, with arguments including prescribed_atmosphere. Since this argument is of the type PrescribedAtmosphere, the method of surface_fluxes which is executed is one which computes the turbulent surface fluxes using MOST. We have a similar function for net_radiation and which computes the net radiation based on the prescribed downwelling radiative fluxes, stored in an argument prescribed_radiation, which is of type PrescribedRadiation.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In the coupled case, we want different behavior. Inside coupler source code, we define new coupled types to use instead of the \"prescribed\" types:","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"struct CoupledAtmosphere{FT} <: AbstractAtmosphericDrivers{FT} end\nstruct CoupledRadiativeFluxes{FT} <: AbstractRadiativeDrivers{FT} end","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Then, we define a new method for surface_fluxes and net_radiation which dispatch for these types:","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"function ClimaLSM.Bucket.surface_fluxes(\n    atmos::CoupledAtmosphere{FT},\n    model::BucketModel{FT},\n    p,\n    _...,\n) where {FT <: AbstractFloat}\n    return (\n        turbulent_energy_flux = p.bucket.turbulent_energy_flux,\n        evaporation = p.bucket.evaporation,\n    )\nend\n\n\nfunction ClimaLSM.Bucket.net_radiation(\n    radiation::CoupledRadiativeFluxes{FT},\n    model::BucketModel{FT},\n    p,\n    _...,\n) where {FT <: AbstractFloat}\n    return p.bucket.R_n\nend","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Essentially, these methods simply returns the values stored in the auxiliary state p. Importantly, these functions are called by the bucket model each time step after the coupler has already computed these values (or extracted them from another model) and modifed p!","category":"page"},{"location":"generated/Bucket/coupled_bucket/#Precipitation-and-surface-air-density","page":"Setting up a Coupled Simulation","title":"Precipitation and surface air density","text":"","category":"section"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Within the right hand side/ODE function calls for the bucket model, we need both the liquid/snow precipitation and the surface air density (for computing specific humidity at the surface). In standalone runs, we call the functions surface_air_density,  liquid_precipitation, and snow_precipitation. When the atmos type is PrescribedAtmosphere, these return the prescribed values for these quantities.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"In the coupled case, we need to extend these functions with a CoupledAtmosphere method:","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"function ClimaLSM.surface_air_density(\n    atmos::CoupledAtmosphere,\n    model::BucketModel,\n    Y,\n    p,\n    _...,\n)\n    return p.bucket.ρ_sfc\nend\n\nfunction ClimaLSM.Bucket.liquid_precipitation(atmos::CoupledAtmosphere, p, _)\n    return p.bucket.P_liq\nend\n\nfunction ClimaLSM.Bucket.snow_precipitation(atmos::CoupledAtmosphere, p, _)\n    return p.bucket.P_snow\nend","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Again, these functions are called in the ODE function of the bucket model after the coupler has updated the values of p with the correct values at that timestep.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"Two other notes: (1) the coupler code actually extends the auxiliary state p of the bucket model, adding in the fields P_liq, P_snow, and ρ_sfc. These fields do not exist in p if the standalone bucket model, and (2) the surface air density is computed assuming an ideal gas and hydrostatic balance and by extrapolating from the air density at the lowest level of the atmosphere, which is why it is handled by the coupler.","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"","category":"page"},{"location":"generated/Bucket/coupled_bucket/","page":"Setting up a Coupled Simulation","title":"Setting up a Coupled Simulation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/#Coupling-the-CliMA-Canopy-and-Soil-Hydraulics-Models","page":"Coupled Canopy and Soil","title":"Coupling the CliMA Canopy and Soil Hydraulics Models","text":"","category":"section"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"In the previous tutorial, we demonstrated how to run the canopy model in standalone mode using prescribed values for the inputs of soil hydraulics into the canopy hydraulics model. However, ClimaLSM has the built-in capacity to couple the canopy model with a soil physics model and timestep the two simulations together to model a canopy-soil system. This tutorial demonstrates how to setup and run a coupled simulation, again using initial conditions, atmospheric and radiative flux conditions, and canopy properties observed at the US-MOz flux tower, a flux tower located within an oak-hickory forest in Ozark, Missouri, USA. See Wang et al. 2021 for details on the site and parameters.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"In ClimaLSM, the coupling of the canopy and soil models is done by pairing the inputs and outputs which between the two models so that they match. For example, the root extraction of the canopy hydraulics model, which acts as a boundary flux for the plant system, is paired with a source term for root extraction in the soil model, so that the flux of water from the soil into the roots is equal and factored into both models. This pairing is done automatically in the constructor for a SoilCanopyModel so that a user needs only specify the necessary arguments for each of the component models, and the two models will automatically be paired into a coupled simulation.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/#Preliminary-Setup","page":"Coupled Canopy and Soil","title":"Preliminary Setup","text":"","category":"section"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Load External Packages:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"import SciMLBase\nusing Plots\nusing Statistics\nusing Dates\nusing Insolation","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Load CliMA Packages and ClimaLSM Modules:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"using ClimaCore\nimport CLIMAParameters as CP\nimport ClimaTimeSteppers as CTS\nusing ClimaLSM\nusing ClimaLSM.Domains: Column, obtain_surface_domain\nusing ClimaLSM.Soil\nusing ClimaLSM.Canopy\nusing ClimaLSM.Canopy.PlantHydraulics\nimport ClimaLSM\nimport ClimaLSM.Parameters as LSMP\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Define the floating point precision desired (64 or 32 bit), and get the parameter set holding constants used across CliMA Models:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"const FT = Float64;\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"We will be using prescribed atmospheric and radiative drivers from the US-MOz tower, which we read in here. We are using prescribed atmospheric and radiative flux conditions, but it is also possible to couple the simulation with atmospheric and radiative flux models. We also","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"read in the observed LAI and let that vary in time in a prescribed manner.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"include(\n    joinpath(\n        pkgdir(ClimaLSM),\n        \"experiments/integrated/ozark/ozark_met_drivers_FLUXNET.jl\",\n    ),\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/#Setup-the-Coupled-Canopy-and-Soil-Physics-Model","page":"Coupled Canopy and Soil","title":"Setup the Coupled Canopy and Soil Physics Model","text":"","category":"section"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"We want to simulate the canopy-soil system together, so the model type SoilCanopyModel is chosen. From the linked documentation, we see that we need to provide the soil model type and arguments as well as the canopy model component types, component arguments, and the canopy model arguments, so we first need to initialize all of these.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Setup the domain for the model:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"nelements = 10\nzmin = FT(-2)\nzmax = FT(0)\nland_domain = Column(; zlim = (zmin, zmax), nelements = nelements);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"For our soil model, we will choose the EnergyHydrology and set up all the necessary arguments. See the tutorial on the model for a more detailed explanation of the soil model.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"We will be using prescribed atmospheric and radiative drivers from the US-MOz tower. We are using prescribed atmospheric and radiative flux conditions, but it is also possible to couple the simulation with atmospheric and radiative flux models.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"include(\n    joinpath(\n        pkgdir(ClimaLSM),\n        \"experiments/integrated/ozark/ozark_met_drivers_FLUXNET.jl\",\n    ),\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Define the parameters for the soil model and provide them to the model parameters struct:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Soil parameters","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"soil_ν = FT(0.5) # m3/m3\nsoil_K_sat = FT(4e-7) # m/s\nsoil_S_s = FT(1e-3) # 1/m\nsoil_vg_n = FT(2.05) # unitless\nsoil_vg_α = FT(0.04) # inverse meters\nθ_r = FT(0.067); # m3/m3","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Soil heat transfer parameters","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"ν_ss_quartz = FT(0.1)\nν_ss_om = FT(0.1)\nν_ss_gravel = FT(0.0);\nκ_quartz = FT(7.7) # W/m/K\nκ_minerals = FT(2.5) # W/m/K\nκ_om = FT(0.25) # W/m/K\nκ_liq = FT(0.57) # W/m/K\nκ_ice = FT(2.29) # W/m/K\nκ_air = FT(0.025); #W/m/K\nρp = FT(2700); # kg/m^3\nκ_solid = Soil.κ_solid(ν_ss_om, ν_ss_quartz, κ_om, κ_quartz, κ_minerals)\nκ_dry = Soil.κ_dry(ρp, soil_ν, κ_solid, κ_air)\nκ_sat_frozen = Soil.κ_sat_frozen(κ_solid, soil_ν, κ_ice)\nκ_sat_unfrozen = Soil.κ_sat_unfrozen(κ_solid, soil_ν, κ_liq);\nρc_ds = FT((1 - soil_ν) * 4e6); # J/m^3/K\nz_0m_soil = FT(0.1)\nz_0b_soil = FT(0.1)\nsoil_ϵ = FT(0.98)\nsoil_α_PAR = FT(0.2)\nsoil_α_NIR = FT(0.4)\n\nsoil_domain = land_domain\nsoil_ps = Soil.EnergyHydrologyParameters{FT}(;\n    κ_dry = κ_dry,\n    κ_sat_frozen = κ_sat_frozen,\n    κ_sat_unfrozen = κ_sat_unfrozen,\n    ρc_ds = ρc_ds,\n    ν = soil_ν,\n    ν_ss_om = ν_ss_om,\n    ν_ss_quartz = ν_ss_quartz,\n    ν_ss_gravel = ν_ss_gravel,\n    hydrology_cm = vanGenuchten(; α = soil_vg_α, n = soil_vg_n),\n    K_sat = soil_K_sat,\n    S_s = soil_S_s,\n    θ_r = θ_r,\n    earth_param_set = earth_param_set,\n    z_0m = z_0m_soil,\n    z_0b = z_0b_soil,\n    emissivity = soil_ϵ,\n    PAR_albedo = soil_α_PAR,\n    NIR_albedo = soil_α_NIR,\n);\n\nsoil_args = (domain = soil_domain, parameters = soil_ps)\nsoil_model_type = Soil.EnergyHydrology{FT}","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"ClimaLSM.Soil.EnergyHydrology{Float64}","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Next we need to set up the CanopyModel. For more details on the specifics of this model see the previous tutorial.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Begin by declaring the component types of the canopy model. Unlike in the previous tutorial, collect the arguments to each component into tuples and do not instantiate the component models yet. The constructor for the SoilPlantHydrologyModel will use these arguments and internally instatiate the component CanopyModel and RichardsModel instances. This is done so that the constructor may enforce consistency constraints between the two models, and this must be done internally from the constructor.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"canopy_component_types = (;\n    autotrophic_respiration = Canopy.AutotrophicRespirationModel{FT},\n    radiative_transfer = Canopy.TwoStreamModel{FT},\n    photosynthesis = Canopy.FarquharModel{FT},\n    conductance = Canopy.MedlynConductanceModel{FT},\n    hydraulics = Canopy.PlantHydraulicsModel{FT},\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Then provide arguments to the canopy radiative transfer, stomatal conductance, and photosynthesis models as was done in the previous tutorial.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"autotrophic_respiration_args = (;\n    parameters = AutotrophicRespirationParameters{FT}(;\n        ne = FT(8 * 1e-4),\n        ηsl = FT(0.01),\n        σl = FT(0.05),\n        μr = FT(1.0),\n        μs = FT(0.1),\n        f1 = FT(0.012),\n        f2 = FT(0.25),\n    )\n)\n\nradiative_transfer_args = (;\n    parameters = TwoStreamParameters{FT}(;\n        ld = FT(0.5),\n        α_PAR_leaf = FT(0.1),\n        α_NIR_leaf = FT(0.45),\n        τ_PAR_leaf = FT(0.05),\n        τ_NIR_leaf = FT(0.25),\n        Ω = FT(0.69),\n        λ_γ_PAR = FT(5e-7),\n        λ_γ_NIR = FT(1.65e-6),\n        n_layers = UInt64(20),\n    )\n)\n\nconductance_args = (;\n    parameters = MedlynConductanceParameters{FT}(;\n        g1 = FT(141),\n        Drel = FT(1.6),\n        g0 = FT(1e-4),\n    )\n)\n\nphotosynthesis_args = (;\n    parameters = FarquharParameters{FT}(\n        Canopy.C3();\n        oi = FT(0.209),\n        ϕ = FT(0.6),\n        θj = FT(0.9),\n        f = FT(0.015),\n        sc = FT(5e-6),\n        pc = FT(-2e5),\n        Vcmax25 = FT(5e-5),\n        Γstar25 = FT(4.275e-5),\n        Kc25 = FT(4.049e-4),\n        Ko25 = FT(0.2874),\n        To = FT(298.15),\n        ΔHkc = FT(79430),\n        ΔHko = FT(36380),\n        ΔHVcmax = FT(58520),\n        ΔHΓstar = FT(37830),\n        ΔHJmax = FT(43540),\n        ΔHRd = FT(46390),\n    )\n);\n\nf_root_to_shoot = FT(3.5)\nSAI = FT(0.00242)\nmaxLAI = FT(4.2)\nK_sat_plant = 1.8e-8\nRAI = (SAI + maxLAI) * f_root_to_shoot;","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Note: LAIfunction was determined from data in the script we included above.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"ai_parameterization = PrescribedSiteAreaIndex{FT}(LAIfunction, SAI, RAI)\nfunction root_distribution(z::T; rooting_depth = FT(1.0)) where {T}\n    return T(1.0 / rooting_depth) * exp(z / T(rooting_depth)) # 1/m\nend\n\nψ63 = FT(-4 / 0.0098)\nWeibull_param = FT(4)\na = FT(0.05 * 0.0098)\n\nconductivity_model =\n    PlantHydraulics.Weibull{FT}(K_sat_plant, ψ63, Weibull_param)\n\nretention_model = PlantHydraulics.LinearRetentionCurve{FT}(a)\n\nplant_ν = FT(0.7)\nplant_S_s = FT(1e-2 * 0.0098)\n\nplant_hydraulics_ps = PlantHydraulics.PlantHydraulicsParameters(;\n    ai_parameterization = ai_parameterization,\n    ν = plant_ν,\n    S_s = plant_S_s,\n    root_distribution = root_distribution,\n    conductivity_model = conductivity_model,\n    retention_model = retention_model,\n)\n\nn_stem = Int64(1)\nn_leaf = Int64(1)\nh_stem = FT(9)\nh_leaf = FT(9.5)\ncompartment_midpoints = [h_stem / 2, h_stem + h_leaf / 2]\ncompartment_surfaces = [zmax, h_stem, h_stem + h_leaf]\n\nplant_hydraulics_args = (\n    parameters = plant_hydraulics_ps,\n    n_stem = n_stem,\n    n_leaf = n_leaf,\n    compartment_midpoints = compartment_midpoints,\n    compartment_surfaces = compartment_surfaces,\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"We may now collect all of the canopy component argument tuples into one arguments tuple for the canopy component models.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"canopy_component_args = (;\n    autotrophic_respiration = autotrophic_respiration_args,\n    radiative_transfer = radiative_transfer_args,\n    photosynthesis = photosynthesis_args,\n    conductance = conductance_args,\n    hydraulics = plant_hydraulics_args,\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"We also need to provide the shared parameter struct to the canopy.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"z0_m = FT(2)\nz0_b = FT(0.2)\n\nshared_params = SharedCanopyParameters{FT, typeof(earth_param_set)}(\n    z0_m,\n    z0_b,\n    earth_param_set,\n)\ncanopy_domain = obtain_surface_domain(land_domain)\ncanopy_model_args = (; parameters = shared_params, domain = canopy_domain);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"We may now instantiate the integrated plant and soil model. In this example, we will compute transpiration diagnostically, and work with prescribed atmospheric and radiative flux conditions from the observations at the Ozark site as was done in the previous tutorial.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"land_input = (atmos = atmos, radiation = radiation)\n\nland = SoilCanopyModel{FT}(;\n    land_args = land_input,\n    soil_model_type = soil_model_type,\n    soil_args = soil_args,\n    canopy_component_types = canopy_component_types,\n    canopy_component_args = canopy_component_args,\n    canopy_model_args = canopy_model_args,\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"[ Info: Using the PrescribedAtmosphere air temperature as the canopy temperature\n","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Now we can initialize the state vectors and model coordinates, and initialize the explicit/implicit tendencies as usual. The Richard's equation time stepping is done implicitly, while the canopy model may be explicitly stepped, so we use an IMEX (implicit-explicit) scheme for the combined model.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Y, p, coords = initialize(land);\nexp_tendency! = make_exp_tendency(land);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"We need to provide initial conditions for the soil and canopy hydraulics models:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Y.soil.ϑ_l = FT(0.4)\nY.soil.θ_i = FT(0.0)\nT_0 = FT(288.7)\nρc_s =\n    volumetric_heat_capacity.(Y.soil.ϑ_l, Y.soil.θ_i, Ref(land.soil.parameters))\nY.soil.ρe_int =\n    volumetric_internal_energy.(\n        Y.soil.θ_i,\n        ρc_s,\n        T_0,\n        Ref(land.soil.parameters),\n    )\nψ_stem_0 = FT(-1e5 / 9800)\nψ_leaf_0 = FT(-2e5 / 9800)\n\nS_l_ini =\n    inverse_water_retention_curve.(\n        retention_model,\n        [ψ_stem_0, ψ_leaf_0],\n        plant_ν,\n        plant_S_s,\n    )\n\nfor i in 1:2\n    Y.canopy.hydraulics.ϑ_l.:($i) .=\n        augmented_liquid_fraction.(plant_ν, S_l_ini[i])\nend;","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Now set the initial conditions for the auxiliary variables for the combined soil and plant model.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"t0 = FT(0)\nset_initial_aux_state! = make_set_initial_aux_state(land)\nset_initial_aux_state!(p, Y, t0);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Select the timestepper and solvers needed for the specific problem. Specify the time range and dt value over which to perform the simulation.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"t0 = FT(150 * 3600 * 24)# start mid year\nN_days = 100\ntf = t0 + FT(3600 * 24 * N_days)\ndt = FT(30)\nn = 120\nsaveat = Array(t0:(n * dt):tf)\n\ntimestepper = CTS.RK4()\node_algo = CTS.ExplicitAlgorithm(timestepper);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"And now perform the simulation as always.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"sv = (;\n    t = Array{FT}(undef, length(saveat)),\n    saveval = Array{ClimaCore.Fields.NamedTuple}(undef, length(saveat)),\n)\ncb = ClimaLSM.NonInterpSavingCallback(sv, saveat)\n\nprob = SciMLBase.ODEProblem(\n    CTS.ClimaODEFunction(T_exp! = exp_tendency!),\n    Y,\n    (t0, tf),\n    p,\n);\nsol = SciMLBase.solve(\n    prob,\n    ode_algo;\n    dt = dt,\n    callback = cb,\n    adaptive = false,\n    saveat = saveat,\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/#Plotting","page":"Coupled Canopy and Soil","title":"Plotting","text":"","category":"section"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Now that we have both a soil and canopy model incorporated together, we will show how to plot some model data demonstrating the time series produced from each of these models. As before, we may plot the GPP of the system as well as transpiration showing fluxes in the canopy.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"daily = sol.t ./ 3600 ./ 24\nmodel_GPP = [\n    parent(sv.saveval[k].canopy.photosynthesis.GPP)[1] for\n    k in 1:length(sv.saveval)\n]\n\nplt1 = Plots.plot(size = (600, 700));\nPlots.plot!(\n    plt1,\n    daily,\n    model_GPP .* 1e6,\n    label = \"Model\",\n    xlim = [minimum(daily), maximum(daily)],\n    xlabel = \"days\",\n    ylabel = \"GPP [μmol/mol]\",\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Transpiration plot:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"T = [\n    parent(sv.saveval[k].canopy.conductance.transpiration)[1] for\n    k in 1:length(sv.saveval)\n]\nT = T .* (1e3 * 24 * 3600)\n\nplt2 = Plots.plot(size = (500, 700));\nPlots.plot!(\n    plt2,\n    daily,\n    T,\n    label = \"Model\",\n    xlim = [minimum(daily), maximum(daily)],\n    xlabel = \"days\",\n    ylabel = \"Vapor Flux [mm/day]\",\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Show the two plots together:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Plots.plot(plt1, plt2, layout = (2, 1));","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Save the output:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"savefig(\"ozark_canopy_flux_test.png\");","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"(Image: )","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Now, we will plot the augmented volumetric liquid water fraction at different depths in the soil over the course of the simulation.","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"plt1 = Plots.plot(size = (500, 700));\nϑ_l_10 = [parent(sol.u[k].soil.ϑ_l)[end] for k in 1:1:length(sol.t)]\nplt1 = Plots.plot(\n    daily,\n    ϑ_l_10,\n    label = \"10 cm\",\n    xlabel = \"Days\",\n    ylabel = \"SWC [m/m]\",\n    xlim = [minimum(daily), maximum(daily)],\n    size = (500, 700),\n    margins = 10Plots.mm,\n    color = \"blue\",\n);\n\nplot!(\n    plt1,\n    daily,\n    [parent(sol.u[k].soil.ϑ_l)[end - 1] for k in 1:1:length(sol.t)],\n    label = \"20cm\",\n    color = \"red\",\n);\n\nplot!(\n    plt1,\n    daily,\n    [parent(sol.u[k].soil.ϑ_l)[end - 2] for k in 1:1:length(sol.t)],\n    label = \"30cm\",\n    color = \"purple\",\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"Save the output:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"savefig(\"ozark_soil_test.png\");","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"(Image: )","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"And now to demonstrate the coupling of the soil and canopy models we will plot the water fluxes from the soil up into the plant hydraulic system:","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"root_stem_flux = [\n    sum(sv.saveval[k].root_extraction) .* (1e3 * 3600 * 24) for\n    k in 1:length(sol.t)\n]\nplt1 = Plots.plot(\n    daily,\n    root_stem_flux,\n    label = \"soil-root-stem water flux\",\n    ylabel = \"Water flux[mm/day]\",\n    xlim = [minimum(daily), maximum(daily)],\n    size = (500, 700),\n    margins = 10Plots.mm,\n);","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"And save the output","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"savefig(\"ozark_soil_plant_flux.png\");","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"(Image: )","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"","category":"page"},{"location":"generated/Canopy/soil_canopy_tutorial/","page":"Coupled Canopy and Soil","title":"Coupled Canopy and Soil","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/Snow/","page":"Snow Model","title":"Snow Model","text":"Snow Model","category":"page"},{"location":"APIs/Snow/","page":"Snow Model","title":"Snow Model","text":"CurrentModule = ClimaLSM.Snow","category":"page"},{"location":"APIs/Snow/#Snow-Parameters","page":"Snow Model","title":"Snow Parameters","text":"","category":"section"},{"location":"APIs/Snow/","page":"Snow Model","title":"Snow Model","text":"ClimaLSM.Snow.SnowParameters","category":"page"},{"location":"APIs/Snow/#Snow-Functions-of-State","page":"Snow Model","title":"Snow Functions of State","text":"","category":"section"},{"location":"APIs/Snow/","page":"Snow Model","title":"Snow Model","text":"```@docs ClimaLSM.Snow.specificheatcapacity ClimaLSM.Snow.snowsurfacetemperature ClimaLSM.Snow.snowdepth ClimaLSM.Snow.snowthermalconductivity ClimaLSM.Snow.snowbulktemperature ClimaLSM.Snow.snowliquidmassfraction ClimaLSM.Snow.maximumliquidmassfraction ClimaLSM.Snow.runofftimescale","category":"page"},{"location":"APIs/canopy/RadiativeTransfer/#Radiative-Transfer","page":"Canopy RT","title":"Radiative Transfer","text":"","category":"section"},{"location":"APIs/canopy/RadiativeTransfer/","page":"Canopy RT","title":"Canopy RT","text":"CurrentModule = ClimaLSM.Canopy","category":"page"},{"location":"APIs/canopy/RadiativeTransfer/#Parameters","page":"Canopy RT","title":"Parameters","text":"","category":"section"},{"location":"APIs/canopy/RadiativeTransfer/","page":"Canopy RT","title":"Canopy RT","text":"ClimaLSM.Canopy.BeerLambertParameters","category":"page"},{"location":"APIs/canopy/RadiativeTransfer/#ClimaLSM.Canopy.BeerLambertParameters","page":"Canopy RT","title":"ClimaLSM.Canopy.BeerLambertParameters","text":"BeerLambertParameters{FT <: AbstractFloat}\n\nThe required parameters for the Beer-Lambert radiative transfer model.\n\nld: Leaf angle distribution function (unitless)\nα_PAR_leaf: PAR leaf reflectance (unitless)\nα_NIR_leaf: NIR leaf reflectance\nϵ_canopy: Emissivity of the canopy\nΩ: Clumping index following Braghiere (2021) (unitless)\nλ_γ_PAR: Typical wavelength per PAR photon (m)\nλ_γ_NIR: Typical wavelength per NIR photon (m)\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/RadiativeTransfer/#Methods","page":"Canopy RT","title":"Methods","text":"","category":"section"},{"location":"APIs/canopy/RadiativeTransfer/","page":"Canopy RT","title":"Canopy RT","text":"ClimaLSM.Canopy.compute_absorbances\nClimaLSM.Canopy.plant_absorbed_pfd\nClimaLSM.Canopy.extinction_coeff","category":"page"},{"location":"APIs/canopy/RadiativeTransfer/#ClimaLSM.Canopy.compute_absorbances","page":"Canopy RT","title":"ClimaLSM.Canopy.compute_absorbances","text":"compute_absorbances(\n    RT::BeerLambertModel{FT},\n    PAR,\n    NIR,\n    LAI,\n    K,\n    α_soil_PAR,\n    α_soil_NIR,\n    _,\n    _,\n)\n\nComputes the PAR and NIR absorbances, reflectances, and tranmittances for a canopy in the case of the  Beer-Lambert model. The absorbances are a function of the radiative transfer  model, as well as the magnitude of incident PAR and NIR radiation in moles of  photons, the leaf area index, the extinction coefficient, and the soil albedo in the PAR and NIR bands. Returns a NamedTuple of NamedTuple, of the form: (; par = (; refl = , trans = , abs = ),  nir = (; refl = , trans = , abs = ))\n\n\n\n\n\ncompute_absorbances(\n    RT::TwoStreamModel{FT},\n    PAR,\n    NIR,\n    LAI,\n    K,\n    α_soil_PAR,\n    α_soil_NIR,\n    θs,\n    frac_diff,\n)\n\nComputes the PAR and NIR absorbances, reflectances, and tranmittances for a canopy in the case of the  Beer-Lambert model. The absorbances are a function of the radiative transfer  model, as well as the magnitude of incident PAR and NIR radiation in moles of  photons, the leaf area index, the extinction coefficient, and the soil albedo in the PAR and NIR bands. \n\nThis model also depends on the diffuse fraction and the zenith angle. Returns a NamedTuple of NamedTuple, of the form: (; par = (; refl = , trans = , abs = ),  nir = (; refl = , trans = , abs = ))\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/RadiativeTransfer/#ClimaLSM.Canopy.plant_absorbed_pfd","page":"Canopy RT","title":"ClimaLSM.Canopy.plant_absorbed_pfd","text":"plant_absorbed_pfd(\n    RT::BeerLambertModel{FT},\n    SW_IN:FT,\n    α_leaf::FT,\n    LAI::FT,\n    K::FT,\n    α_soil::FT\n)\n\nComputes the absorbed, reflected, and transmitted photon flux density  in terms of mol photons per m^2 per  second for a radiation band.\n\nThis applies the Beer-Lambert law, which is a function of incident  radiation (SW_IN; moles of photons/m^2/), leaf reflectance (α_leaf), the extinction coefficient (K), leaf area index (LAI), and the albedo of the soil (α_soil). \n\nReturns a tuple of reflected, absorbed, and transmitted radiation in mol photons/m^2/s.\n\n\n\n\n\nplant_absorbed_pfd(\n    RT::TwoStreamModel{FT},\n    α_leaf,\n    SW_IN::FT,\n    LAI::FT,\n    K::FT,\n    τ_leaf,\n    θs::FT,\n    α_soil::FT,\n)\n\nComputes the absorbed, transmitted, and reflected  photon flux density  in terms of mol photons  per m^2 per second for a radiation band. \n\nThis applies the two-stream radiative transfer solution which takes into account the impacts of scattering within the canopy. The function takes in all  parameters from the parameter struct of a TwoStreamModel, along with the  incident radiation, LAI, extinction coefficient K, soil albedo from the  canopy soil_driver, solar zenith angle, and τ.\n\nReturns a tuple of reflected, absorbed, and transmitted radiation in mol photons/m^2/s.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/RadiativeTransfer/#ClimaLSM.Canopy.extinction_coeff","page":"Canopy RT","title":"ClimaLSM.Canopy.extinction_coeff","text":"extinction_coeff(ld::FT,\n                 θs::FT) where {FT}\n\nComputes the vegetation extinction coefficient (K), as a function of the sun zenith angle (θs), and the leaf angle distribution (ld).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Canopy/#Canopy","page":"Canopy Models","title":"Canopy","text":"","category":"section"},{"location":"APIs/canopy/Canopy/","page":"Canopy Models","title":"Canopy Models","text":"CurrentModule = ClimaLSM.Canopy","category":"page"},{"location":"APIs/canopy/Canopy/#Canopy-Model-Structs","page":"Canopy Models","title":"Canopy Model Structs","text":"","category":"section"},{"location":"APIs/canopy/Canopy/","page":"Canopy Models","title":"Canopy Models","text":"ClimaLSM.Canopy.CanopyModel\nClimaLSM.Canopy.SharedCanopyParameters","category":"page"},{"location":"APIs/canopy/Canopy/#ClimaLSM.Canopy.CanopyModel","page":"Canopy Models","title":"ClimaLSM.Canopy.CanopyModel","text":" CanopyModel{FT, AR, RM, PM, SM, PHM, EM, A, R, S, PS, D} <: AbstractExpModel{FT}\n\nThe model struct for the canopy, which contains\n\nthe canopy model domain (a point for site-level simulations, or\n\nan extended surface (plane/spherical surface) for regional or global simulations.\n\nsubcomponent model type for radiative transfer. This is of type\n\nAbstractRadiationModel.\n\nsubcomponent model type for photosynthesis. This is of type\n\nAbstractPhotosynthesisModel, and currently only the FarquharModel is supported.\n\nsubcomponent model type for stomatal conductance. This is of type\n\nAbstractStomatalConductanceModel and currently only the MedlynModel is supported\n\nsubcomponent model type for plant hydraulics. This is of type\n\nAbstractPlantHydraulicsModel and currently only a version which prognostically solves Richards equation in the plant is available.\n\nsubcomponent model type for canopy energy. This is of type\n\nAbstractCanopyEnergyModel and currently we support a version where   the canopy temperature is prescribed.\n\ncanopy model parameters, which include parameters that are shared\n\nbetween canopy model components or those needed to compute boundary fluxes.\n\nThe atmospheric conditions, which are either prescribed\n\n(of type PrescribedAtmosphere) or computed via a coupled simulation (of type CoupledAtmosphere).\n\nThe radiative flux conditions, which are either prescribed\n\n(of type PrescribedRadiativeFluxes) or computed via a coupled simulation (of type CoupledRadiativeFluxes).\n\nThe soil conditions, which are either prescribed (of type PrecribedSoil, for\n\nrunning the canopy model in standalone mode), or prognostic (of type  PrognosticSoil, for running integrated soil+canopy models)\n\nNote that the canopy height is specified as part of the  PlantHydraulicsModel, along with the area indices of the leaves, roots, and stems. Eventually, when plant biomass becomes a prognostic variable (by integrating with a carbon model), some parameters specified here will be treated differently.\n\nautotrophic_respiration: Autotrophic respiration model, a canopy component model\nradiative_transfer: Radiative transfer model, a canopy component model\nphotosynthesis: Photosynthesis model, a canopy component model\nconductance: Stomatal conductance model, a canopy component model\nhydraulics: Plant hydraulics model, a canopy component model\nenergy: Energy balance model, a canopy component model\natmos: Atmospheric forcing: prescribed or coupled\nradiation: Radiative forcing: prescribed or coupled\nsoil_driver: Soil pressure: prescribed or prognostic\nparameters: Shared canopy parameters between component models\ndomain: Canopy model domain\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/Canopy/#ClimaLSM.Canopy.SharedCanopyParameters","page":"Canopy Models","title":"ClimaLSM.Canopy.SharedCanopyParameters","text":"SharedCanopyParameters{FT <: AbstractFloat, PSE}\n\nA place to store shared parameters that are required by multiple canopy components.\n\nz_0m: Roughness length for momentum (m)\nz_0b: Roughness length for scalars (m)\nearth_param_set: Earth param set\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/Canopy/#Canopy-Model-Fluxes","page":"Canopy Models","title":"Canopy Model Fluxes","text":"","category":"section"},{"location":"APIs/canopy/Canopy/","page":"Canopy Models","title":"Canopy Models","text":"ClimaLSM.Canopy.DiagnosticTranspiration\nClimaLSM.Canopy.canopy_surface_fluxes","category":"page"},{"location":"APIs/canopy/Canopy/#ClimaLSM.Canopy.PlantHydraulics.DiagnosticTranspiration","page":"Canopy Models","title":"ClimaLSM.Canopy.PlantHydraulics.DiagnosticTranspiration","text":"DiagnosticTranspiration{FT} <: AbstractTranspiration{FT}\n\nA concrete type used for dispatch in the case where transpiration is computed diagnostically, as a function of prognostic variables and parameters, and stored in p during the update_aux! step.\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/Canopy/#ClimaLSM.Canopy.canopy_surface_fluxes","page":"Canopy Models","title":"ClimaLSM.Canopy.canopy_surface_fluxes","text":"canopy_surface_fluxes(atmos::PrescribedAtmosphere{FT},\n                      model::CanopyModel,\n                      Y,\n                      p,\n                      t::FT) where {FT}\n\nComputes canopy transpiration using Monin-Obukhov Surface Theory, the prescribed atmospheric conditions, and the canopy conductance.\n\nPlease note that in the future the SurfaceFluxes.jl code will compute fluxes taking into account the canopy conductance, so that what is returned by surface_fluxes is correct. At present, it does not, so we are adjusting for it after the fact here in both ET and LHF.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Canopy/#Canopy-Model-Soil-Drivers","page":"Canopy Models","title":"Canopy Model Soil Drivers","text":"","category":"section"},{"location":"APIs/canopy/Canopy/","page":"Canopy Models","title":"Canopy Models","text":"ClimaLSM.Canopy.AbstractSoilDriver\nClimaLSM.Canopy.PrescribedSoil\nClimaLSM.Canopy.PrognosticSoil","category":"page"},{"location":"APIs/canopy/Canopy/#ClimaLSM.Canopy.AbstractSoilDriver","page":"Canopy Models","title":"ClimaLSM.Canopy.AbstractSoilDriver","text":"An abstract type of soil drivers of the canopy model.\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/Canopy/#ClimaLSM.Canopy.PrescribedSoil","page":"Canopy Models","title":"ClimaLSM.Canopy.PrescribedSoil","text":" PrescribedSoil{FT} <: AbstractSoilDriver{FT}\n\nA container for holding prescribed soil parameters needed by the canopy model when running the canopy in standalone mode, including the soil pressure and  albedo.\n\nroot_depths: The depth of the root tips, in meters\nψ_soil: Prescribed soil potential (m) as a function of time\nsoil_α_PAR: Soil albedo for PAR\nsoil_α_NIR: Soil albedo for NIR\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/Canopy/#ClimaLSM.Canopy.PrognosticSoil","page":"Canopy Models","title":"ClimaLSM.Canopy.PrognosticSoil","text":" PrognosticSoil{FT} <: AbstractSoilDriver{FT}\n\nConcrete type of AbstractSoilDriver used for dispatch in cases where both  a canopy model and soil model are run. Contains the soil albedo to be shared  between the canopy and soil models.\n\nWhen running the SoilCanopyModel, the soil model specifies the albedo. In this  case, the constructor for the model reads the albedo from the soil model and the user only specifies it once, for the soil model. When running the  SoilPlantHydrologyModel (which is intended for internal usage/testing primarily) the user must specify the albedo because the soil model in that case does not have an albedo.\n\nsoil_α_PAR: Soil albedo for PAR\nsoil_α_NIR: Soil albedo for NIR\n\n\n\n\n\n","category":"type"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Soil/freezing_front/#Modeling-a-freezing-front-in-unsaturated-soil","page":"Phase Changes","title":"Modeling a freezing front in unsaturated soil","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Before reading this tutorial, we recommend that you look over the coupled energy and water tutorial. That tutorial showed how to solve the heat equation for soil volumetric internal energy ρe_int, simultaneously with Richards equation for volumetric liquid water fraction ϑ_l, assuming zero volumetric ice fraction θ_i for all time, everywhere in the domain. In this example, we add in a source term to the right hand side for both θ_i and ϑ_l which models freezing and thawing and conserves water mass during the process. The equations are","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"frac ρe_int t =    κ(θ_l θ_i ν ) T +   ρe_int_liq K (Tθ_l θ_i ν ) nabla h( ϑ_l z ν )","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"frac  ϑ_l t =   K (Tθ_l θ_i ν ) h( ϑ_l z ν ) -fracF_Tρ_l","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"frac  θ_i t = fracF_Tρ_i","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Here","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"t is the time (s),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"z is the location in the vertical (m),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ρe_int is the volumetric internal energy of the soil (J/m^3),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"T is the temperature of the soil (K),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"κ is the thermal conductivity (W/m/K),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ρe_int_liq is the volumetric internal energy of liquid water (J/m^3),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"K is the hydraulic conductivity (m/s),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"h is the hydraulic head (m),","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ϑ_l is the augmented volumetric liquid water fraction,","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"θ_i is the volumetric ice fraction,","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ν  denotes parameters relating to soil type, such as porosity, and","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"F_T is the freeze-thaw term.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"To begin, we will show how to implement adding in this source term. After the results are obtained, we will explain how our model parameterizes this effect and compare the results with some analytic expections.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"We solve these equations in an effectively 1-d domain with z  -020, and with the following boundary and initial conditions:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"- κ T(t z = 0) = 28 Wm^2K (T - 26715K) ẑ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"- κ T(t z= -02) =  -3 Wm^2K (T - 27985K) ẑ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"T(t = 0 z) = 27985 K","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"- K h(t z = 0) = 0 ẑ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"-K h(t z = -02) = 0 ẑ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ϑ_l(t = 0 z) = 033.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"The problem setup and soil properties are chosen to match the lab experiment of Mizoguchi (1990), as detailed in Hansson (2004) and Dall'Amico (2011). Like Hansson et al., we allow for a small amount of energy leakage at the bottom of the domain to account for imperfect insulation.","category":"page"},{"location":"generated/Soil/freezing_front/#Import-necessary-modules","page":"Phase Changes","title":"Import necessary modules","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"import SciMLBase\nimport ClimaTimeSteppers as CTS\nusing ArtifactWrappers\nusing DelimitedFiles\nusing Plots\n\nusing ClimaCore\nimport CLIMAParameters as CP\n\nusing ClimaLSM\nusing ClimaLSM.Domains: Column\nusing ClimaLSM.Soil\n\nimport ClimaLSM\nimport ClimaLSM.Parameters as LSMP\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));","category":"page"},{"location":"generated/Soil/freezing_front/#Preliminary-set-up","page":"Phase Changes","title":"Preliminary set-up","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Choose a floating point precision, and get the parameter set, which holds constants used across CliMA models:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"FT = Float64\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Set the values of other parameters required by the model:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ν = FT(0.535)\nK_sat = FT(3.2e-6) # m/s\nS_s = FT(1e-3) #inverse meters\nvg_n = FT(1.48)\nvg_α = FT(1.11) # inverse meters\nhcm = vanGenuchten(; α = vg_α, n = vg_n);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"You could also try the Brooks and Corey model:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"#ψb = FT(-0.6)\n#c = FT(0.43)\n#hcm = BrooksCorey(;ψb = ψb, c = c);\nθ_r = FT(0.05)\nν_ss_om = FT(0.3)\nν_ss_quartz = FT(0.7)\nν_ss_gravel = FT(0.0)\nκ_minerals = FT(2.4)\nκ_om = FT(0.25)\nκ_quartz = FT(7.7)\nκ_air = FT(0.025)\nκ_ice = FT(2.29)\nκ_liq = FT(0.57)\nρp = FT(3200)\nρc_ds = FT(2.3e6 * (1.0 - ν))\nκ_solid = Soil.κ_solid(ν_ss_om, ν_ss_quartz, κ_om, κ_quartz, κ_minerals)\nκ_dry = Soil.κ_dry(ρp, ν, κ_solid, κ_air)\nκ_sat_frozen = Soil.κ_sat_frozen(κ_solid, ν, κ_ice)\nκ_sat_unfrozen = Soil.κ_sat_unfrozen(κ_solid, ν, κ_liq)\nparams = Soil.EnergyHydrologyParameters{FT}(;\n    κ_dry = κ_dry,\n    κ_sat_frozen = κ_sat_frozen,\n    κ_sat_unfrozen = κ_sat_unfrozen,\n    ρc_ds = ρc_ds,\n    ν = ν,\n    ν_ss_om = ν_ss_om,\n    ν_ss_quartz = ν_ss_quartz,\n    ν_ss_gravel = ν_ss_gravel,\n    hydrology_cm = hcm,\n    K_sat = K_sat,\n    S_s = S_s,\n    θ_r = θ_r,\n    earth_param_set = earth_param_set,\n);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Choose the domain and discretization:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"zmax = FT(0)\nzmin = FT(-0.2)\nnelems = 20\nΔz = 0.01\nsoil_domain = Column(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Set the boundary conditions:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"zero_flux_bc = FluxBC((p, t) -> eltype(t)(0.0))\nfunction top_heat_flux(p, t)\n    p_len = ClimaCore.Spaces.nlevels(axes(p.soil.T))\n    T_c = ClimaCore.Fields.level(p.soil.T, p_len)\n    return @. eltype(t)(28 * (T_c - 267.15))\nend\nfunction bottom_heat_flux(p, t)\n    T_c = ClimaCore.Fields.level(p.soil.T, 1)\n    return @. eltype(t)(-3 * (T_c - 279.85))\nend\ntop_heat_flux_bc = FluxBC(top_heat_flux)\nbottom_heat_flux_bc = FluxBC(bottom_heat_flux)\nboundary_fluxes = (;\n    top = (water = zero_flux_bc, heat = top_heat_flux_bc),\n    bottom = (water = zero_flux_bc, heat = bottom_heat_flux_bc),\n);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Create the source term instance. Our phase change model requires knowledge of the vertical spacing, so we pass that information in via an attribute of the PhaseChange structure. Sources are added as elements of a list of sources. Here we just add freezing and thawing.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"sources = (PhaseChange{FT}(Δz),);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Now we can package this up in the EnergyHydrology model struct:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"soil = Soil.EnergyHydrology{FT}(;\n    parameters = params,\n    domain = soil_domain,\n    boundary_conditions = boundary_fluxes,\n    sources = sources,\n);","category":"page"},{"location":"generated/Soil/freezing_front/#Running-a-simulation","page":"Phase Changes","title":"Running a simulation","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Once we have the model, we can initialize the state vectors and obtain the coordinates","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Y, p, coords = initialize(soil);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"After which, we can specify the initial condition function, and initialze the variables:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"function init_soil!(Ysoil, z, params)\n    ν = params.ν\n    FT = eltype(Y.soil.ϑ_l)\n    Ysoil.soil.ϑ_l .= FT(0.33)\n    Ysoil.soil.θ_i .= FT(0.0)\n    T = FT(279.85)\n    ρc_s = Soil.volumetric_heat_capacity(FT(0.33), FT(0.0), params)\n    Ysoil.soil.ρe_int .=\n        Soil.volumetric_internal_energy.(FT(0.0), ρc_s, T, Ref(params))\nend\n\ninit_soil!(Y, coords.subsurface.z, soil.parameters);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"We choose the initial and final simulation times:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"t0 = FT(0)\ntf = FT(60 * 60 * 50);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"We set the aux state corresponding to the initial conditions of the state Y:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"set_initial_aux_state! = make_set_initial_aux_state(soil);\nset_initial_aux_state!(p, Y, t0);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Create the tendency function, and choose a timestep, and timestepper:","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"exp_tendency! = make_exp_tendency(soil)\ndt = FT(60)\ntimestepper = CTS.RK4()\node_algo = CTS.ExplicitAlgorithm(timestepper)\nprob = SciMLBase.ODEProblem(\n    CTS.ClimaODEFunction(T_exp! = exp_tendency!, dss! = ClimaLSM.dss!),\n    Y,\n    (t0, tf),\n    p,\n);","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Now we can solve the problem.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"sol = SciMLBase.solve(prob, ode_algo; dt = dt, saveat = 0:3600:tf);","category":"page"},{"location":"generated/Soil/freezing_front/#Comparison-to-data","page":"Phase Changes","title":"Comparison to data","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"This data was obtained by us from the figures of Hansson et al. (2004), but was originally obtained by Mizoguchi (1990). No error bars were reported, and we haven't quantified the error in our estimation of the data from images.","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"af = ArtifactFile(\n    url = \"https://caltech.box.com/shared/static/3xbo4rlam8u390vmucc498cao6wmqlnd.csv\",\n    filename = \"mizoguchi_all_data.csv\",\n)\ndataset = ArtifactWrapper(@__DIR__, \"mizoguchi\", ArtifactFile[af]);\ndataset_path = get_data_folder(dataset);\ndata = joinpath(dataset_path, \"mizoguchi_all_data.csv\")\nds = readdlm(data, ',')\nhours = ds[:, 1][2:end]\nvwc = ds[:, 2][2:end] ./ 100.0\ndepth = ds[:, 3][2:end]\nmask_12h = hours .== 12\nmask_24h = hours .== 24\nmask_50h = hours .== 50;\n\nz = parent(coords.subsurface.z)[:];\nplot1 = plot(\n    ylabel = \"Soil depth (m)\",\n    xlabel = \"\",\n    title = \"12 hours\",\n    xlim = [0.2, 0.55],\n    ylim = [-0.2, 0],\n)\nscatter!(plot1, vwc[mask_12h], -depth[mask_12h], label = \"\", color = \"purple\")\nplot!(\n    plot1,\n    parent(sol.u[13].soil.ϑ_l .+ sol.u[13].soil.θ_i)[:],\n    z,\n    label = \"\",\n    color = :green,\n)\n\nplot2 = plot(\n    ylabel = \"\",\n    xlabel = \"Volumetric Water content\",\n    title = \"24 hours\",\n    xlim = [0.2, 0.55],\n    ylim = [-0.2, 0],\n)\nscatter!(plot2, vwc[mask_24h], -depth[mask_24h], label = \"\", color = \"purple\")\nplot!(\n    plot2,\n    parent(sol.u[25].soil.ϑ_l .+ sol.u[25].soil.θ_i)[:],\n    z,\n    label = \"\",\n    color = :green,\n)\n\nplot3 = plot(\n    ylabel = \"\",\n    xlabel = \"\",\n    title = \"50 hours\",\n    xlim = [0.2, 0.55],\n    ylim = [-0.2, 0],\n)\nscatter!(\n    plot3,\n    vwc[mask_50h],\n    -depth[mask_50h],\n    label = \"Data\",\n    color = \"purple\",\n)\nplot!(\n    plot3,\n    parent(sol.u[51].soil.ϑ_l .+ sol.u[51].soil.θ_i)[:],\n    z,\n    label = \"Simulation\",\n    color = :green,\n)\nplot!(plot3, legend = :bottomright)\nplot(\n    plot1,\n    plot2,\n    plot3,\n    layout = (1, 3),\n    size = (1200, 500),\n    margin = 10Plots.mm,\n)\nsavefig(\"mizoguchi_data_comparison.png\");","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"(Image: )","category":"page"},{"location":"generated/Soil/freezing_front/#Discussion-and-Model-Explanation","page":"Phase Changes","title":"Discussion and Model Explanation","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"To begin, let's observe that the freeze thaw source term alone conserves water mass, as it satisfies","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"ρ_l partial_tϑ_l + ρ_i partial_tθ_i = -F_T + F_T = 0","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Next, we describe how we define F_T. The Clausius-Clapeyron (CC) equation defines a pressure-temperature curve along which two phases can co-exist. It assumes that the phases are at equal temperature and pressures. For water in soil, however, the liquid water experiences pressure ρ_l g ψ, where ψ is the matric potential. A more general form of the CC equation allows for different pressures in the two phases. Usually the ice pressure is taken to be zero, which is reasonable for unsaturated freezing soils. In saturated soils, freezing can lead to heaving of the soil which we do not model. After that assumption is made, we obtain that, below freezing (T  T_f)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"fracdp_lρ_l = L_f fracdTT","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"or","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"p_l = p_l0 + L_f ρ_l fracT-T_fT_f mathcalH(T_f-T)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"where we have assumed that assumed T is near the freezing point, and then performed a Taylor explansion of the logarithm, and we are ignoring the freezing point depression, which is small (less than one degree) for non-clay soils. What we have sketched is further explained in Dall'Amico et al. (2011) and Kurylyk and Watanabe (2013).","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"What this implies is that above the freezing point, the pressure is equal to p_l0, which is independent of temperature. Once the temperature drops below the freezing point, the pressure drops. Since prior to freezing, the pressure p_l0 is equal to ρ_l g ψ(θ_l), water undergoing freezing alone (without flowing) should satisfy (Dall'Amico et al. (2011)):","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"p_l0 = ρ_l g ψ(θ_l+ρ_iθ_iρ_l)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"where ψ is the matric potential function of van Genuchten. At each step, we know both the water and ice contents, as well as the temperature, and can then solve for","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"θ_l^* = (ν-θ_r) ψ^-1(p_l(ρ_l g)) + θ_r","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"For freezing, the freeze thaw function F_T is equal to","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"F_T = frac1τ ρ_l (θ_l-θ_l^*) mathcalH(T_f-T) mathcalH(θ_l-θ_l^*)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"which brings the θ_l to a value which satisfies p_l = ρ_l g ψ(θ_l). This is why, in our simulation, we see the liquid water fraction approaches a constant around 0.075 in the frozen region, rather than the residual fraction of 0.019, or 0. This behavior is observed, for example, in the experiments of Watanabe et al. (2011).","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Although this approach may indicate that we should replace the pressure head appearing in the diffusive water flux term in Richards equation (Dall'Amico et al. (2011)), we do not do so at present. As such, we may not be modeling the flow of water around the freezing front properly. However, we still observe cryosuction, which is the flow of water towards the freezing front, from the unfrozen side. As the water freezes, the liquid water content drops, setting up a larger gradient in matric potential across the freezing front, which generates upward flow against gravity. This is evident because the total water content at the top is larger at the end of the simulation than it was at t=0 (when it was 0.33).","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"This model differs from others (e.g. Painter and Karra (2014), Hansson et al. (2004), Dall'Amico et al. (2011))  in that it requires us to set a timescale for the phase change, τ. We currently use the thermal time","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"τ_LTE= c Δz²κ","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"which seems to work adequately for modeling freezing front propagation and cryosuction, via comparisons with Mizoguchi (1990).","category":"page"},{"location":"generated/Soil/freezing_front/#References","page":"Phase Changes","title":"References","text":"","category":"section"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"Mizoguchi, M., 1990. Water, heat and salt transport in freezing soil. Ph.D. thesis. (In Japanese.) University of Tokyo.\nHansson et al., Vadose Zone Journal 3:693–704 (2004).\nM. Dall’Amico et al., The Cryosphere, 5, 469–484 (2011).\nKurylyk and Watanabe, Advances in Water Resources, Volume 60, (2013)\nWatanabe et al. 2011, Annals of Glaciology , Volume 52 , Issue 58\nPainter and Karra, Vadose Zone Journal (2014) 13 (4)","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"","category":"page"},{"location":"generated/Soil/freezing_front/","page":"Phase Changes","title":"Phase Changes","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/Soil/#Soil-Models","page":"Soil Energy and Hydrology","title":"Soil Models","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"CurrentModule = ClimaLSM.Soil","category":"page"},{"location":"APIs/Soil/#Soil-Models-2","page":"Soil Energy and Hydrology","title":"Soil Models","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.AbstractSoilModel\nClimaLSM.Soil.RichardsModel\nClimaLSM.Soil.EnergyHydrology","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.AbstractSoilModel","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.AbstractSoilModel","text":"AbstractSoilModel{FT} <: ClimaLSM.AbstractImExModel{FT}\n\nThe abstract type for all soil models.\n\nCurrently, we only have plans to support a RichardsModel, simulating the flow of liquid water through soil via the Richardson-Richards equation, and a fully integrated soil heat and water model, with phase change.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.RichardsModel","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.RichardsModel","text":"RichardsModel\n\nA model for simulating the flow of water in a porous medium by solving the Richardson-Richards Equation.\n\nA variety of boundary condition types are supported, including FluxBC, RichardsAtmosDrivenFluxBC, MoistureStateBC, and FreeDrainage  (only for the bottom of the domain). \n\nIf you wish to  simulate soil hydrology under the context of a prescribed precipitation volume flux (m/s) as a function of time, the RichardsAtmosDrivenFluxBC  type should be chosen. Please see the documentation for more details.\n\nparameters: the parameter set\ndomain: the soil domain, using ClimaCore.Domains\nboundary_conditions: the boundary conditions, of type AbstractSoilBoundaryConditions\nsources: A tuple of sources, each of type AbstractSoilSource\nlateral_flow: A boolean flag which, when false, turns off the horizontal flow of water\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.EnergyHydrology","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.EnergyHydrology","text":"EnergyHydrology <: AbstractSoilModel\n\nA model for simulating the flow of water and heat in a porous medium by solving the Richardson-Richards equation and the heat equation, including terms for phase change.\n\nA variety of boundary condition types are supported, including FluxBC, MoistureStateBC/TemperatureStateBC,  FreeDrainage (only for the bottom of the domain), and an AtmosDrivenFluxBC (under which radiative fluxes and turbulent surface fluxes are computed and used as boundary conditions). Please see the documentation for this boundary condition type for more details.\n\nparameters: The parameter sets\ndomain: the soil domain, using ClimaCore.Domains\nboundary_conditions: the boundary conditions for RRE and heat, of type AbstractSoilBoundaryConditions\nsources: A tuple of sources, each of type AbstractSoilSource\nlateral_flow: A boolean flag which, when false, turns off the horizontal flow of water and heat\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#Soil-Parameter-Structs","page":"Soil Energy and Hydrology","title":"Soil Parameter Structs","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.RichardsParameters\nClimaLSM.Soil.EnergyHydrologyParameters","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.RichardsParameters","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.RichardsParameters","text":"RichardsParameters{FT <: AbstractFloat}\n\nA struct for storing parameters of the RichardModel.\n\nν: The porosity of the soil (m^3/m^3)\nhydrology_cm: The hydrology closure model: vanGenuchten or BrooksCorey\nK_sat: The saturated hydraulic conductivity (m/s)\nS_s: The specific storativity (1/m)\nθ_r: The residual water fraction (m^3/m^3\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.EnergyHydrologyParameters","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.EnergyHydrologyParameters","text":"EnergyHydrologyParameters{FT <: AbstractFloat}\n\nA parameter structure for the integrated soil water and energy  equation system. In this simplest form, we assume the conductivity and volumetric heat capacity of the soil are constant.\n\nκ_dry: The dry soil thermal conductivity, W/m/K\nκ_sat_frozen: The saturated thermal conductivity of frozen soil, W/m/K\nκ_sat_unfrozen: The saturated thermal conductivity of unfrozen soil, W/m/K\nρc_ds: The volumetric heat capacity of dry soil, J/m^3/K\nν: The porosity of the soil (m^3/m^3)\nν_ss_om: The volumetric fraction of the soil solids in organic matter (m^3/m^3)\nν_ss_quartz: The volumetric fraction of the soil solids in quartz (m^3/m^3)\nν_ss_gravel: The volumetric fraction of the soil solids in gravel (m^3/m^3)\nα: The parameter α used in computing Kersten number, unitless\nβ: The parameter β used in computing Kersten number, unitless\nhydrology_cm: The soil hydrology closure model: van Genucthen or Brooks and Corey\nK_sat: The saturated hydraulic conductivity (m/s)\nS_s: The specific storativity (1/m)\nθ_r: The residual water fraction (m^3/m^3\nΩ: Ice impedance factor for the hydraulic conductivity\nγ: Coefficient of viscosity factor for the hydraulic conductivity\nγT_ref: Reference temperature for the viscosity factor\nPAR_albedo: Soil PAR Albedo\nNIR_albedo: Soil NIR Albedo\nemissivity: Soil Emissivity\nz_0m: Roughness length for momentum\nz_0b: Roughness length for scalars\nd_ds: Maximum dry soil layer thickness under evaporation (m)\nearth_param_set: Physical constants and clima-wide parameters\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#Soil-Hydrology-Parameterizations","page":"Soil Energy and Hydrology","title":"Soil Hydrology Parameterizations","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.volumetric_liquid_fraction\nClimaLSM.Soil.pressure_head\nClimaLSM.Soil.hydraulic_conductivity\nClimaLSM.Soil.impedance_factor\nClimaLSM.Soil.viscosity_factor\nClimaLSM.Soil.effective_saturation\nClimaLSM.Soil.matric_potential\nClimaLSM.Soil.dψdϑ\nClimaLSM.Soil.inverse_matric_potential\nClimaLSM.Soil.AbstractSoilHydrologyClosure\nClimaLSM.Soil.vanGenuchten\nClimaLSM.Soil.BrooksCorey","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.volumetric_liquid_fraction","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.volumetric_liquid_fraction","text":"volumetric_liquid_fraction(ϑ_l::FT, ν_eff::FT, θ_r::FT) where {FT}\n\nA pointwise function returning the volumetric liquid fraction given the augmented liquid fraction and the effective porosity.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.pressure_head","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.pressure_head","text":"pressure_head(\n    cm::vanGenuchten{FT},\n    θ_r::FT,\n    ϑ_l::FT,\n    ν_eff::FT,\n    S_s::FT,\n) where {FT}\n\nA point-wise function returning the pressure head in variably saturated soil, using the van Genuchten matric potential  if the soil is not saturated, and an approximation of the positive pressure in the soil if the soil is saturated.\n\n\n\n\n\npressure_head(\n    cm::BrooksCorey{FT},\n    θ_r::FT,\n    ϑ_l::FT,\n    ν_eff::FT,\n    S_s::FT,\n) where {FT}\n\nA point-wise function returning the pressure head in variably saturated soil, using the Brooks and Corey matric potential  if the soil is not saturated, and an approximation of the positive pressure in the soil if the soil is saturated.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.hydraulic_conductivity","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.hydraulic_conductivity","text":" hydraulic_conductivity(cm::vanGenuchten{FT}, K_sat::FT, S::FT) where {FT}\n\nA point-wise function returning the hydraulic conductivity, using the van Genuchten formulation.\n\n\n\n\n\n hydraulic_conductivity(cm::BrooksCorey{FT}, K_sat::FT, S::FT) where {FT}\n\nA point-wise function returning the hydraulic conductivity, using the Brooks and Corey formulation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.impedance_factor","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.impedance_factor","text":"impedance_factor(\n    f_i::FT,\n    Ω::FT\n) where {FT}\n\nReturns the multiplicative factor reducing conductivity when  a fraction of ice f_i is present.\n\nOnly for use with the EnergyHydrology model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.viscosity_factor","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.viscosity_factor","text":"viscosity_factor(\n    T::FT,\n    γ::FT,\n    γT_ref::FT,\n) where {FT}\n\nReturns the multiplicative factor which accounts for the temperature dependence of the conductivity.\n\nOnly for use with the EnergyHydrology model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.effective_saturation","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.effective_saturation","text":"effective_saturation(porosity::FT, ϑ_l::FT, θr::FT) where {FT}\n\nA point-wise function computing the effective saturation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.matric_potential","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.matric_potential","text":" matric_potential(cm::vanGenuchten{FT}, S::FT) where {FT}\n\nA point-wise function returning the matric potential, using the van Genuchten formulation.\n\n\n\n\n\n matric_potential(cm::BrooksCorey{FT}, S::FT) where {FT}\n\nA point-wise function returning the matric potential, using the Brooks and Corey formulation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.dψdϑ","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.dψdϑ","text":"dψdϑ(cm::vanGenuchten{FT}, ϑ, ν, θr, Ss)\n\nComputes and returns the derivative of the pressure head  with respect to ϑ for the van Genuchten formulation.\n\n\n\n\n\ndψdϑ(cm::BrooksCorey{FT}, ϑ, ν, θr, Ss)\n\nComputes and returns the derivative of the pressure head  with respect to ϑ for the Brooks and Corey formulation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.inverse_matric_potential","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.inverse_matric_potential","text":" inverse_matric_potential(cm::vanGenuchten{FT}, ψ::FT) where {FT}\n\nA point-wise function returning the effective saturation, given the matric potential, using the van Genuchten formulation.\n\n\n\n\n\n inverse_matric_potential(cm::BrooksCorey{FT}, ψ::FT) where {FT}\n\nA point-wise function returning the effective saturation, given the matric potential, using the Brooks and Corey formulation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.AbstractSoilHydrologyClosure","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.AbstractSoilHydrologyClosure","text":"AbstractSoilHydrologyClosure{FT <: AbstractFloat}\n\nThe abstract type of soil hydrology closure, of which vanGenuchten{FT} and BrooksCorey{FT} are the two supported  concrete types.\n\nTo add a new parameterization, methods are required for:\n\nmatric_potential,\ninversematricpotential,\npressure_head,\ndψdϑ,\nhydraulic_conductivity.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.vanGenuchten","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.vanGenuchten","text":"vanGenuchten{FT} <: AbstractSoilHydrologyClosure{FT}\n\nThe van Genuchten soil hydrology closure, chosen when the  hydraulic conductivity and matric potential are modeled using the van Genuchten parameterization (van Genuchten 1980; see also Table 8.2 of G. Bonan 2019).\n\nα: The inverse of the air entry potential (1/m)\nn: The van Genuchten pore-size distribution index (unitless)\nm: The van Genuchten parameter m = 1 - 1/n (unitless)\nS_c: A derived parameter: the critical saturation at which capillary flow no longer replenishes the surface\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.BrooksCorey","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.BrooksCorey","text":"BrooksCorey{FT} <: AbstractSoilHydrologyClosure{FT}\n\nThe Brooks and Corey soil hydrology closure, chosen when the  hydraulic conductivity and matric potential are modeled using the Brooks and Corey parameterization (Brooks and Corey, 1964, 1966; see also Table 8.2 of G. Bonan 2019).\n\nc: The pore-size distribution index (unitless)\nψb: The air entry matric potential, when S=1 (m)\nS_c: A derived parameter: the critical saturation at which capillary flow no longer replenishes the surface\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#Soil-Heat-Parameterizations","page":"Soil Energy and Hydrology","title":"Soil Heat Parameterizations","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.volumetric_heat_capacity\nClimaLSM.Soil.κ_solid\nClimaLSM.Soil.κ_sat_frozen\nClimaLSM.Soil.κ_sat_unfrozen\nClimaLSM.Soil.κ_sat\nClimaLSM.Soil.κ_dry\nClimaLSM.Soil.kersten_number\nClimaLSM.Soil.relative_saturation\nClimaLSM.Soil.volumetric_internal_energy\nClimaLSM.Soil.volumetric_internal_energy_liq\nClimaLSM.Soil.temperature_from_ρe_int\nClimaLSM.Soil.thermal_conductivity\nClimaLSM.Soil.phase_change_source\nClimaLSM.Soil.thermal_time","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.volumetric_heat_capacity","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.volumetric_heat_capacity","text":"volumetric_heat_capacity(\n    θ_l::FT,\n    θ_i::FT,\n    parameters::EnergyHydrologyParameters{FT},\n) where {FT}\n\nCompute the expression for volumetric heat capacity.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_solid","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_solid","text":"κ_solid(ν_ss_om::FT,\n        ν_ss_quartz::FT,\n        κ_om::FT,\n        κ_quartz::FT,\n        κ_minerals::FT) where {FT}\n\nComputes the thermal conductivity of the solid material in soil. The _ss_ subscript denotes that the volumetric fractions of the soil components are referred to the soil solid components, not including the pore space.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_sat_frozen","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_sat_frozen","text":"function κ_sat_frozen(\n    κ_solid::FT,\n    ν::FT,\n    κ_ice::FT\n) where {FT}\n\nComputes the thermal conductivity for saturated frozen soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_sat_unfrozen","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_sat_unfrozen","text":"function κ_sat_unfrozen(\n    κ_solid::FT,\n    ν::FT,\n    κ_l::FT\n) where {FT}\n\nComputes the thermal conductivity for saturated unfrozen soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_sat","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_sat","text":"κ_sat(\n    θ_l::FT,\n    θ_i::FT,\n    κ_sat_unfrozen::FT,\n    κ_sat_frozen::FT\n) where {FT}\n\nCompute the expression for saturated thermal conductivity of soil matrix.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.κ_dry","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.κ_dry","text":"function κ_dry(ρp::FT,\n               ν::FT,\n               κ_solid::FT,\n               κ_air::FT;\n               a = FT(0.053)) where {FT}\n\nComputes the thermal conductivity of dry soil according to the model of Balland and Arp.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.kersten_number","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.kersten_number","text":"kersten_number(\n    θ_i::FT,\n    S_r::FT,\n    parameters::EnergyHydrologyParameters{FT},\n) where {FT}\n\nCompute the expression for the Kersten number, using the Balland and Arp model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.relative_saturation","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.relative_saturation","text":"relative_saturation(\n        θ_l::FT,\n        θ_i::FT,\n        ν::FT\n) where {FT}\n\nCompute the expression for relative saturation.  This is referred to as θ_sat in Balland and Arp's paper.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.volumetric_internal_energy","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.volumetric_internal_energy","text":"volumetric_internal_energy(θ_i::FT, ρc_s::FT, T::FT,\n                             parameters::EnergyHydrologyParameters{FT}) where {FT}\n\nA pointwise function for computing the volumetric internal energy of the soil, given the volumetric ice content, volumetric heat capacity, and temperature.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.volumetric_internal_energy_liq","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.volumetric_internal_energy_liq","text":"volumetric_internal_energy_liq(T::FT, parameters::EnergyHydrologyParameters{FT}) where {FT}\n\nA pointwise function for computing the volumetric internal energy of the liquid water in the soil, given the temperature T.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.temperature_from_ρe_int","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.temperature_from_ρe_int","text":"temperature_from_ρe_int(ρe_int::FT, θ_i::FT, ρc_s::FT\n                        parameters::EnergyHydrologyParameters{FT}) where {FT}\n\nA pointwise function for computing the temperature from the volumetric internal energy, volumetric ice content, and volumetric heat capacity of the soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.thermal_conductivity","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.thermal_conductivity","text":"thermal_conductivity(\n    κ_dry::FT,\n    K_e::FT,\n    κ_sat::FT\n) where {FT}\n\nCompute the expression for thermal conductivity of soil matrix.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.phase_change_source","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.phase_change_source","text":"phase_change_source(\n    θ_l::FT,\n    θ_i::FT,\n    T::FT,\n    τ::FT,\n    params::EnergyHydrologyParameters{FT},\n) where {FT}\n\nReturns the source term (1/s) used for converting liquid water and ice into each other during phase changes. Note that there are unitless prefactors multiplying this term in the  equations.\n\nNote that these equations match what is in Dall'Amico (for θstar, ψ(T), ψw0). We should double check them in the case where we have ϑl > θl, but they should be very close to the form we want regardless.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.thermal_time","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.thermal_time","text":"thermal_time(ρc::FT, Δz::FT, κ::FT) where {FT}\n\nReturns the thermal timescale for temperature differences across a typical thickness Δz to equilibrate.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#Soil-Surface-Parameterizations","page":"Soil Energy and Hydrology","title":"Soil Surface Parameterizations","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.soil.soil_resistance\nClimaLSM.Soil.dry_soil_layer_thickness\nClimaLSM.Soil.soil_tortuosity","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.dry_soil_layer_thickness","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.dry_soil_layer_thickness","text":"dry_soil_layer_thickness(S_l_sfc::FT, S_c::FT, d_ds::FT) where {FT}\n\nReturns the maximum dry soil layer thickness that can develop under evaporation;  this is used when computing the soil resistance to evaporation according to Swenson et al (2012).\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.soil_tortuosity","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.soil_tortuosity","text":"soil_tortuosity(θ_l::FT, θ_i::FT, ν::FT) where {FT}\n\nComputes the tortuosity of water vapor in a porous medium, as a function of porosity ν and the volumetric liquid water and ice contents, θ_l and θ_i.\n\nSee Equation (1) of : Shokri, N., P. Lehmann, and D. Or (2008), Effects of hydrophobic layers on evaporation from porous media, Geophys. Res. Lett., 35, L19407, doi:10.1029/ 2008GL035230.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#Soil-Runoff-Types-and-Methods","page":"Soil Energy and Hydrology","title":"Soil Runoff Types and Methods","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.NoRunoff\nClimaLSM.Soil.subsurface_runoff_source\nClimaLSM.Soil.soil_surface_infiltration","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.NoRunoff","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.NoRunoff","text":"NoRunoff <: AbstractRunoffModel\n\nA concrete type of soil runoff model; the  default choice which does not include the  effects of runoff.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.subsurface_runoff_source","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.subsurface_runoff_source","text":"subsurface_runoff_source(runoff::AbstractRunoffModel)::Union{Nothing, AbstractSoilSource}\n\nA function which returns the soil source for the runoff model  runoff; the default returns nothing in which case no source is added.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#ClimaLSM.Soil.soil_surface_infiltration","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.soil_surface_infiltration","text":"soil_surface_infiltration(::NoRunoff, net_water_flux, _...)\n\nA function which computes the infiltration into the soil  for the default of NoRunoff.\n\nIf net_water_flux = P+E, where P is the precipitation and E is the evaporation (both negative if towards the soil),  this returns P+E as the water boundary flux for the soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/Soil/#Soil-BC-Methods-and-Types","page":"Soil Energy and Hydrology","title":"Soil BC Methods and Types","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.AbstractSoilBC\nClimaLSM.Soil.MoistureStateBC\nClimaLSM.Soil.FluxBC\nClimaLSM.Soil.TemperatureStateBC\nClimaLSM.Soil.FreeDrainage\nClimaLSM.Soil.RichardsAtmosDrivenFluxBC\nClimaLSM.Soil.AtmosDrivenFluxBC","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.AbstractSoilBC","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.AbstractSoilBC","text":"AbstractSoilBC <: ClimaLSM. AbstractBC\n\nAn abstract type for soil-specific types of boundary conditions, like free drainage.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.MoistureStateBC","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.MoistureStateBC","text":"MoistureStateBC <: AbstractSoilBC\n\nA simple concrete type of boundary condition, which enforces a state boundary condition ϑ_l = f(p,t) at either the top or bottom of the domain.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.FluxBC","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.FluxBC","text":"FluxBC <: AbstractSoilBC\n\nA simple concrete type of boundary condition, which enforces a normal flux boundary condition f(p,t) at either the top or bottom of the domain.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.TemperatureStateBC","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.TemperatureStateBC","text":"TemperatureStateBC <: AbstractSoilBC\n\nA simple concrete type of boundary condition, which enforces a state boundary condition T = f(p,t) at either the top or bottom of the domain.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.FreeDrainage","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.FreeDrainage","text":"FreeDrainage <: AbstractSoilBC\n\nA concrete type of soil boundary condition, for use at  the BottomBoundary only, where the flux is set to be F = -K∇h = -K.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.RichardsAtmosDrivenFluxBC","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.RichardsAtmosDrivenFluxBC","text":"RichardsAtmosDrivenFluxBC{R <: AbstractRunoffModel} <: AbstractSoilBC\n\nA concrete type of boundary condition intended only for use with the RichardsModel, which uses a prescribed precipitation rate (m/s) to compute the infiltration into the soil.\n\nA runoff model is used  to simulate surface and subsurface runoff and this is accounted for when setting boundary conditions. In order to run the simulation without runoff, choose runoff = NoRunoff() - this is also the default.\n\nIf you wish to simulate preciptation and runoff in the full EnergyHydrology model, you must use the AtmosDrivenFluxBC type.\n\nprecip: The prescribed liquid water precipitation rate f(t) (m/s); Negative by convention.\nrunoff: The runoff model. The default is no runoff.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.AtmosDrivenFluxBC","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.AtmosDrivenFluxBC","text":"AtmosDrivenFluxBC{\n    A <: AbstractAtmosphericDrivers,\n    B <: AbstractRadiativeDrivers,\n    R <: AbstractRunoffModel\n} <: AbstractSoilBC\n\nA concrete type of soil boundary condition for use at the top of the domain. This holds the conditions for the atmosphere AbstractAtmosphericDrivers, for the radiation state  AbstractRadiativeDrivers. This is only supported for the EnergyHydrology model.\n\nThis choice indicates the Monin-Obukhov Surface Theory will be used to compute the sensible and latent heat fluxes, as  well as evaporation,  and that the net radiation and precipitation will also be computed. The net energy and water fluxes are used as boundary conditions. \n\nA runoff model is used  to simulate surface and subsurface runoff and this is accounted for when setting boundary conditions. The default is to have no runoff accounted for.\n\natmos: The atmospheric conditions driving the model\nradiation: The radiative fluxes driving the model\nrunoff: The runoff model. The default is no runoff.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#Soil-Source-Types","page":"Soil Energy and Hydrology","title":"Soil Source Types","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.AbstractSoilSource\nClimaLSM.Soil.PhaseChange\nClimaLSM.Soil.RootExtraction","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.AbstractSoilSource","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.AbstractSoilSource","text":"AbstractSoilSource{FT} <:  ClimaLSM.AbstractSource{FT}\n\nAn abstract type for types of source terms for the soil equations.\n\nIn standalone mode, the only supported source type is freezing and thawing. ClimaLSM.jl creates additional sources to include as necessary e.g. root extraction (not available in stand alone mode).\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#ClimaLSM.Soil.PhaseChange","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.PhaseChange","text":"PhaseChange{FT} <: AbstractSoilSource{FT}\n\nPhaseChange source type.\n\n\n\n\n\n","category":"type"},{"location":"APIs/Soil/#Soil-Jacobian-Structures","page":"Soil Energy and Hydrology","title":"Soil Jacobian Structures","text":"","category":"section"},{"location":"APIs/Soil/","page":"Soil Energy and Hydrology","title":"Soil Energy and Hydrology","text":"ClimaLSM.Soil.RichardsTridiagonalW","category":"page"},{"location":"APIs/Soil/#ClimaLSM.Soil.RichardsTridiagonalW","page":"Soil Energy and Hydrology","title":"ClimaLSM.Soil.RichardsTridiagonalW","text":"RichardsTridiagonalW{R, J, W, T} <: ClimaLSM.AbstractTridiagonalW\n\nA struct containing the necessary information for constructing a tridiagonal Jacobian matrix (W) for solving Richards equation, treating only the vertical diffusion term implicitly.\n\nNote that the diagonal, upper diagonal, and lower diagonal entry values are stored in this struct and updated in place.\n\ndtγ_ref: Reference to dtγ, which is specified by the ODE solver\n∂ϑₜ∂ϑ: Diagonal entries of the Jacobian stored as a ClimaCore.Fields.Field\nW_column_arrays: Array of tridiagonal matrices containing W for each column\ntemp1: An allocated cache used to evaluate ldiv!\ntemp2: An allocated cache used to evaluate ldiv!\ntransform: A flag indicating whether this struct is used to compute Wfact_t or Wfact\nones_face_space: A pre-allocated cache storing ones on the face space\n\n\n\n\n\n","category":"type"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/#Introduction-to-the-Land-Bucket-Model","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"","category":"section"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The land bucket model implemented in ClimaLSM is based off of the models of Manabe (1969)[1], Milly and Shmakin (2002)[2], and the SLIM model (Laguë, Bonan, Swann 2019)[3], with small changes, as noted.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"This tutorial explains in brief the core equations and the necessary parameters of the bucket model, and shows how to set up a simulation in standalone mode. More detail for coupled runs can be found in the ClimaCoupler.jl documentation and in the coupled simulation tutorial.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"At each coordinate point on the surface, we solve ordinary differential equations for the subsurface water storage of land (W, m), the snow water equivalent multiplied by the snow cover fraction (σS, m), and the surface water content of land (Ws, m). We additionally solve a partial differential equation for the land temperature as a function of depth (T, K). The snow cover fraction is given by a heaviside function in the current code.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"In what follows, surface fluxes over soil generally indicate fluxes over non-snow-covered regions. The exception is the albedo of vegetated and non-vegetated surfaces, for which we use the symbol α_sfc.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We have:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"fracd Wdt = I","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"fracd Wsdt = P_liq + σM - (1-σ) E_soil - I","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"fracd σSdt = P_snow - σ(E_snow + M)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"ρc fracpartial Tpartial t = κ_soil fracpartial Tpartial z","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"F_bot = 00 = -κ_soil fracpartial Tpartial z_z = z_bot","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(1-σ) (R_n+ SHF + LHF)_soil + σG_undersnow = -κ_soil fracpartial Tpartial z_z = z_sfc","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"G_undersnow = (R_n+ SHF + LHF)_snow - F_intosnow","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"F_intosnow = -ρ_l L_f0 (M+E_snow)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"R_n = -(1-α)*SW -LW + σ_SB T_sfc^4","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"where the water fluxes are : I the infiltration as defined in [1], P_liq (m/s) the water volume flux of precipitation, P_snow (m/s) the water volume flux in the form of snow, (1-σ)E_soil (m/s) the water volume flux in evaporation, σE_snow the water volume flux in sublimation from snow, and σM (m/s) the water volume flux in melting of snow. The melt rate is defined via the net surface flux when surface temperatures are above freezing.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"For heat fluxes, we have R_n the net radiation, SHF the sensible heat flux, LHF the latent heat flux, G_undersnow the heat flux into snow-covered soil, and F_intosnow the heat flux into the snowpack itself. Note that the water balance equation for snow is equivalent to the heat balance equation, since we neglect the sensible heat contribution and only track the latent heat contribution.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Finally, we have α_sfc(lat, lon) the (snow-free) surface albedo, ρc the volumetric heat capacity of the land, σ_SB the Stefan-Boltzmann constant,  and κ_soil the thermal conductivity. The albedo is a linear interpolation between the albedo of surface and snow, as decribed in [3]. The surface temperature is taken to be equal to the temperature T at the first grid point, assumed to be the same for soil and snow. At present the snow cover fraction is a heaviside function, and only one set of surface fluxes is computed per grid point.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Turbulent surface fluxes of sensible heat, latent heat, and water vapor (SHF, LHF, E) are computed using Monin-Obukhov theory; SW↓ and LW↓ are the downward fluxes in short and long wavelength bands. We use the same roughness lengths for snow and soil. Note that with the exception of precipitation and downwelling radiation, all fluxes are defined such that positive is towards the atmosphere.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"As the temperature at the surface of the soil and snow is the same, only the evaporation changes between the two surface coverage types. We have","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"E_soil =  β(W W_f) E(q_sat(T_sfc ρ_sfc liquid)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"where β is the factor used in [1] which accounts for the fact that soil does not evaporate at the potential rate when it is not saturated. This makes use of the field capacity parameter W_f. We also have","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"E_snow = E(q_sat(T_sfc ρ_sfc ice)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/#Simulating-a-standalone-bucket-model","page":"Introduction to the Land Bucket Model","title":"Simulating a standalone bucket model","text":"","category":"section"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"First, we need to import necessary packages. We use SciMLBase.jl and ClimaTimeSteppers.jl for the timestepping.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"import SciMLBase\nimport ClimaTimeSteppers as CTS","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We use ClimaCore for setting up the domain/coordinate points. While this infrastructure isn't really necessary for standalone simulations, adhering to it makes setting up coupled simulations very easy. It also is nice to rely on ClimaCore utilities because they have been designed in advance for running distributed simulations.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"using ClimaCore","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We also use CLIMAParameters, which strives to ensure a common set of parameters across all Clima models, and to make parameter estimation more seamless.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"import CLIMAParameters as CP","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We also use Insolation to calculate solar zenith angle and solar insolation.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"using Insolation","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Lastly, let's bring in the bucket model types (from ClimaLSM) that we will need access to.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"using ClimaLSM.Bucket: BucketModel, BucketModelParameters, BulkAlbedoFunction\nusing ClimaLSM.Domains: coordinates, Column\nusing ClimaLSM:\n    initialize,\n    make_update_aux,\n    make_exp_tendency,\n    make_set_initial_aux_state,\n    PrescribedAtmosphere,\n    PrescribedRadiativeFluxes","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We also want to plot the solution","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"using Plots","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"And we need to use the DateTime type to store reference times","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"using Dates\n\nFT = Float64;","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"As mentioned we use CLIMAParameters for earth parameters that are required across models (e.g. the density of water and ice, the latent heat of fusion at a reference temperature, etc). The land model requires additional parameters as described in the text above. These two sets are combined in the object BucketModelParameters as follows:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"import ClimaLSM\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Define our BulkAlbedoFunction model using a constant surface and snow albedo: The surface albedo is a function of coordinates, which would be (x,y) on a plane, and (lat,lon) on a sphere. Another albedo option is to specify a BulkAlbedoStatic or BulkAlbedoFunction, which uses a NetCDF file to read in surface albedo. These options only applies when coordinates are (lat,lon).","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"α_sfc = (coordinate_point) -> FT(0.2);\nα_snow = FT(0.8);\nalbedo = BulkAlbedoFunction{FT}(α_snow, α_sfc);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The critical snow level setting the scale for when we interpolate between snow and surface albedo","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"σS_c = FT(0.2);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The field capacity of the soil","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"W_f = FT(0.15);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Roughness lengths (meters)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"z_0m = FT(1e-2);\nz_0b = FT(1e-3);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Thermal parameters of soil","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"κ_soil = FT(0.7);\nρc_soil = FT(2e6);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Simulation start time, end time, and timestep","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"t0 = FT(0.0);\ntf = FT(7 * 86400);\nΔt = FT(3600.0);\n\nbucket_parameters = BucketModelParameters(\n    κ_soil,\n    ρc_soil,\n    albedo,\n    σS_c,\n    W_f,\n    z_0m,\n    z_0b,\n    Δt,\n    earth_param_set,\n);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Set up the model domain. At every surface coordinate point, we'll solve an ODE for W and Ws, and for every subsurface point, we solve for T. In coupled simulations run at the same resolution as the atmosphere, the bucket horizontal resolution would match the horizontal resolution at the lowest level of the atmosphere model. In general, however, the two resolutions do not need to match. Here we just set up something simple - a Column.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"soil_depth = FT(3.5);\nbucket_domain = Column(; zlim = (-soil_depth, 0.0), nelements = 10);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The PrescribedAtmosphere and PrescribedRadiation need to take in a reference time, the date of the start of the simulation. In this tutorial we will consider this January 1, 2005.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"ref_time = DateTime(2005);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"To drive the system in standalone mode, the user must provide prescribed functions of time for the water volume flux in precipitation,  for the net downward shortwave and longwave radiative energy fluxes (SW↓, LW↓, W/m^2), for the atmospheric temperature T_a, wind speed u_a (m/s), specific humidity q_a, and air density ρ_a (kg/m^3) at a reference height h_a (m).","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Here we define the model drivers, starting with downward radiation.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"SW_d = (t) -> eltype(t)(300);\nLW_d = (t) -> eltype(t)(300);\nbucket_rad = PrescribedRadiativeFluxes(\n    FT,\n    SW_d,\n    LW_d,\n    ref_time;\n    orbital_data = Insolation.OrbitalData(),\n);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Prescribed atmospheric variables","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Stochastic precipitation:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"precip = (t) -> eltype(t)(0);\nsnow_precip = (t) -> eltype(t)(5e-7 * (t > 3 * 86400) * (t < 4 * 86400));","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Diurnal temperature variations:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"T_atmos = (t) -> eltype(t)(275.0 + 5.0 * sin(2.0 * π * t / 86400 + 7200));","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Constant otherwise:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"u_atmos = (t) -> eltype(t)(3.0);\nq_atmos = (t) -> eltype(t)(0.005);\nh_atmos = FT(2);\nP_atmos = (t) -> eltype(t)(101325);\nbucket_atmos = PrescribedAtmosphere(\n    precip,\n    snow_precip,\n    T_atmos,\n    u_atmos,\n    q_atmos,\n    P_atmos,\n    ref_time,\n    h_atmos,\n);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Then, we create the model object, which contains the drivers, parameters, domain, and is associated with the correct differential equations for the bucket model:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"model = BucketModel(\n    parameters = bucket_parameters,\n    domain = bucket_domain,\n    atmosphere = bucket_atmos,\n    radiation = bucket_rad,\n);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Note the holder structs for the radiation and atmosphere functions: they are named Prescribed. In coupled simulations, we would use a different type and rely on multiple dispatch to obtain the atmospheric and radiative quantitites from the coupler.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Like all ClimaLSM models, we set up the state vector using initialize:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Y, p, coords = initialize(model);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We can inspect the prognostic and auxiliary variables of the model:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"ClimaLSM.prognostic_vars(model)\nY.bucket |> propertynames","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(:W, :T, :Ws, :σS)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The auxiliary variables in this case are the surface temperature, the turbulent fluxes, the net radiation, and the surface specific humidity.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"ClimaLSM.auxiliary_vars(model)\np.bucket |> propertynames","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(:q_sfc, :evaporation, :turbulent_energy_flux, :R_n, :T_sfc, :α_sfc, :ρ_sfc)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Next is to set initial conditions.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Y.bucket.T .= FT(270);\nY.bucket.W .= FT(0.05);\nY.bucket.Ws .= FT(0.0);\nY.bucket.σS .= FT(0.08);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We also set the initial conditions of the auxiliary state here:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"set_initial_aux_state! = make_set_initial_aux_state(model);\nset_initial_aux_state!(p, Y, t0);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Then to create the entire right hand side (tendency) function for the system of ordinary differential equations:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"exp_tendency! = make_exp_tendency(model);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Now we choose our timestepping algorithm.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"timestepper = CTS.RK4()\node_algo = CTS.ExplicitAlgorithm(timestepper)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"ClimaTimeSteppers.IMEXAlgorithm{ClimaTimeSteppers.Unconstrained, ClimaTimeSteppers.RK4, ClimaTimeSteppers.IMEXTableau{StaticArraysCore.SVector{4, Float64}, StaticArraysCore.SMatrix{4, 4, Float64, 16}}, Nothing}(ClimaTimeSteppers.Unconstrained(), ClimaTimeSteppers.RK4(), ClimaTimeSteppers.IMEXTableau{StaticArraysCore.SVector{4, Float64}, StaticArraysCore.SMatrix{4, 4, Float64, 16}}([0.0 0.0 0.0 0.0; 0.5 0.0 0.0 0.0; 0.0 0.5 0.0 0.0; 0.0 0.0 1.0 0.0], [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666], [0.0, 0.5, 0.5, 1.0], [0.0 0.0 0.0 0.0; 0.5 0.0 0.0 0.0; 0.0 0.5 0.0 0.0; 0.0 0.0 1.0 0.0], [0.16666666666666666, 0.3333333333333333, 0.3333333333333333, 0.16666666666666666], [0.0, 0.5, 0.5, 1.0]), nothing)","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Then we can set up the simulation and solve it:","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"prob = SciMLBase.ODEProblem(\n    CTS.ClimaODEFunction(T_exp! = exp_tendency!),\n    Y,\n    (t0, tf),\n    p,\n);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"We need a callback to get and store the auxiliary fields, as they are not stored by default.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"saveat = collect(t0:Δt:tf);\nsaved_values = (;\n    t = Array{FT}(undef, length(saveat)),\n    saveval = Array{NamedTuple}(undef, length(saveat)),\n);\n\ncb = ClimaLSM.NonInterpSavingCallback(saved_values, saveat);\n\nsol = SciMLBase.solve(prob, ode_algo; dt = Δt, saveat = saveat, callback = cb);","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"Extracting the solution from what is returned by the ODE.jl commands is a bit clunky right now, but we are working on hiding some of this. parent extracts the underlying data from the ClimaCore.Fields.Field object and we loop over the solution sol because of how the data is stored within solutions returned by ODE.jl - indexed by timestep.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"W = [parent(sol.u[k].bucket.W)[1] for k in 1:length(sol.t)];\nWs = [parent(sol.u[k].bucket.Ws)[1] for k in 1:length(sol.t)];\nσS = [parent(sol.u[k].bucket.σS)[1] for k in 1:length(sol.t)];\nT_sfc =\n    [parent(saved_values.saveval[k].bucket.T_sfc)[1] for k in 1:length(sol.t)];\nevaporation = [\n    parent(saved_values.saveval[k].bucket.evaporation)[1] for\n    k in 1:length(sol.t)\n];\nR_n = [parent(saved_values.saveval[k].bucket.R_n)[1] for k in 1:length(sol.t)];","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"The turbulent energy flux is the sum of latent and sensible heat fluxes.","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"turbulent_energy_flux = [\n    parent(saved_values.saveval[k].bucket.turbulent_energy_flux)[1] for\n    k in 1:length(sol.t)\n];\n\n\nplot(\n    sol.t ./ 86400,\n    W,\n    label = \"\",\n    xlabel = \"time (days)\",\n    ylabel = \"W (m)\",\n    title = \"Land water storage (m)\",\n)\nsavefig(\"w.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/w.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"plot(\n    sol.t ./ 86400,\n    σS,\n    label = \"\",\n    xlabel = \"time (days)\",\n    ylabel = \"σS (m)\",\n    title = \"Area weighted SWE (m) \",\n)\nsavefig(\"swe.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/swe.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"plot(\n    sol.t ./ 86400,\n    -snow_precip.(sol.t),\n    label = \"Net precipitation\",\n    xlabel = \"time (days)\",\n    ylabel = \"Flux (m/s)\",\n    title = \"Surface water fluxes\",\n    legend = :bottomright,\n)\nplot!(sol.t ./ 86400, evaporation, label = \"Sublimation/Evaporation\")\nsavefig(\"water_f.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/water_f.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"plot(\n    sol.t ./ 86400,\n    T_sfc,\n    title = \"Surface Temperatures\",\n    label = \"Ground temperature\",\n    xlabel = \"time (days)\",\n    ylabel = \"T_sfc (K)\",\n    legend = :bottomright,\n)\nplot!(sol.t ./ 86400, T_atmos.(sol.t), label = \"Atmospheric Temperature\")\nsavefig(\"t.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/t.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"plot(\n    sol.t ./ 86400,\n    R_n,\n    label = \"Net radiative flux\",\n    xlabel = \"time (days)\",\n    ylabel = \"Flux (W/m^2)\",\n    title = \"Surface energy fluxes\",\n    legend = :bottomright,\n)\nplot!(sol.t ./ 86400, turbulent_energy_flux, label = \"Turbulent fluxes\")\nplot!(sol.t ./ 86400, R_n .+ turbulent_energy_flux, label = \"Net flux\")\nsavefig(\"energy_f.png\")","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"\"/home/runner/work/ClimaLSM.jl/ClimaLSM.jl/docs/src/generated/Bucket/energy_f.png\"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"(Image: )","category":"page"},{"location":"generated/Bucket/bucket_tutorial/#References","page":"Introduction to the Land Bucket Model","title":"References","text":"","category":"section"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"[1] Manabe, S. (1969) CLIMATE AND THE OCEAN CIRCULATION I: The Atmospheric Circulation and the Hydrology of the Earth's Surface. Monthly Weather Review, Volume 97: Issue 11, p 739-774. [2] Milly, P. C. D. and Shmakin, A.B. (2002) Global Modeling of Land Water and Energy Balances. Part I: The Land Dynamics (LaD) Model Journal of Hydrometeorology, Volume 3: Issue 3, p 283-299. [3] Laguë, M., Bonan, G., and Swann, A. (2019) Seperating the Impact of Individual Land Surface Properties on the Terrestrial Surface Energy Budget in both the Coupled and Uncoupled Land-Atmosphere System Volume 32: Issue 18, p 5725-5744","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"","category":"page"},{"location":"generated/Bucket/bucket_tutorial/","page":"Introduction to the Land Bucket Model","title":"Introduction to the Land Bucket Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/ClimaLSM/#ClimaLSM","page":"ClimaLSM","title":"ClimaLSM","text":"","category":"section"},{"location":"APIs/ClimaLSM/","page":"ClimaLSM","title":"ClimaLSM","text":"CurrentModule = ClimaLSM","category":"page"},{"location":"APIs/ClimaLSM/#LSM-Model-Types-and-methods","page":"ClimaLSM","title":"LSM Model Types and methods","text":"","category":"section"},{"location":"APIs/ClimaLSM/","page":"ClimaLSM","title":"ClimaLSM","text":"ClimaLSM.SoilPlantHydrologyModel\nClimaLSM.LandSoilBiogeochemistry\nClimaLSM.LandHydrology\nClimaLSM.make_interactions_update_aux\nClimaLSM.initialize_interactions\nClimaLSM.land_components\nClimaLSM.interaction_vars\nClimaLSM.interaction_types\nClimaLSM.interaction_domain_names\nClimaLSM.domain_name","category":"page"},{"location":"APIs/ClimaLSM/#ClimaLSM.LandSoilBiogeochemistry","page":"ClimaLSM","title":"ClimaLSM.LandSoilBiogeochemistry","text":"struct LandSoilBiogeochemistry{\n    FT,\n    SEH <: Soil.EnergyHydrology{FT},\n    SB <: Soil.Biogeochemistry.SoilCO2Model{FT},\n} <: AbstractLandModel{FT}\n\nA concrete type of land model used for simulating systems with a  soil energy, hydrology, and biogeochemistry component.\n\nsoil: The soil model\nsoilco2: The biochemistry model\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#ClimaLSM.LandHydrology","page":"ClimaLSM","title":"ClimaLSM.LandHydrology","text":"struct LandHydrology{\n    FT,\n    SM <: Soil.AbstractSoilModel{FT},\n    SW <: Pond.AbstractSurfaceWaterModel{FT},\n} <: AbstractLandModel{FT}\n\nA concrete type of land model used for simulating systems with a  soil and surface water component.\n\nsoil: The soil model\nsurface_water: The surface water model\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#ClimaLSM.make_interactions_update_aux","page":"ClimaLSM","title":"ClimaLSM.make_interactions_update_aux","text":"make_interactions_update_aux(land::AbstractLandModel) end\n\nMakes and returns a function which updates the interaction variables, which are a type of auxiliary variable.\n\nThe update_aux! function returned is evaluted during the right hand side evaluation.\n\nThis is a stub which concrete types of LSMs extend.\n\n\n\n\n\nfunction make_interactions_update_aux(\n    land::LandHydrology{FT, SM, SW},\n) where {FT, SM <: Soil.RichardsModel{FT}, SW <: Pond.PondModel{FT}}\n\nA method which makes a function; the returned function  updates the auxiliary variable p.soil_infiltration, which is needed for both the boundary condition for the soil model and the source term (runoff) for the surface water model.\n\nThis function is called each ode function evaluation.\n\n\n\n\n\nmake_interactions_update_aux(\n    land::SoilCanopyModel{FT, SM, RM},\n) where {FT, SM <: Soil.RichardsModel{FT}, RM <: Canopy.CanopyModel{FT}}\n\nA method which makes a function; the returned function  updates the auxiliary variable p.root_extraction, which is needed for a sink term for the soil model and to create the lower water boundary condition for the canopy model. It also updates the soil surface fluxes, which are affected by the presence of a canopy.\n\nThis function is called each ode function evaluation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.initialize_interactions","page":"ClimaLSM","title":"ClimaLSM.initialize_interactions","text":"initialize_interactions(land::AbstractLandModel) end\n\nInitializes interaction variables, which are a type of auxiliary variable, to empty objects of the correct type for the model.\n\nInteraction variables are specified by interaction_vars, their types by interaction_types, and their spaces by interaction_spaces. This function should be called during initialize_auxiliary step.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.land_components","page":"ClimaLSM","title":"ClimaLSM.land_components","text":"land_components(land::AbstractLandModel)\n\nReturns the component names of the land model, by calling propertynames(land).\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.interaction_vars","page":"ClimaLSM","title":"ClimaLSM.interaction_vars","text":"interaction_vars(m::AbstractLandModel)\n\nReturns the interaction variable symbols for the model in the form of a tuple.\n\n\n\n\n\ninteraction_vars(m::SoilCanopyModel)\n\nThe names of the additional auxiliary variables that are  included in the integrated Soil-Canopy model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.interaction_types","page":"ClimaLSM","title":"ClimaLSM.interaction_types","text":"interaction_types(m::AbstractLandModel)\n\nReturns the shared interaction variable types for the model in the form of a tuple.\n\n\n\n\n\ninteraction_types(m::SoilCanopyModel)\n\nThe types of the additional auxiliary variables that are  included in the integrated Soil-Canopy model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.interaction_domain_names","page":"ClimaLSM","title":"ClimaLSM.interaction_domain_names","text":"interactiondomainnames(m::AbstractLandModel)\n\nReturns the interaction domain symbols in the form of a tuple e.g. :surface or :subsurface.\n\nThis is only required for variables shared between land submodels, and only needed for multi-component models, not standalone components. Component-specific variables should be listed as prognostic or auxiliary variables which do not require this to initialize.\n\n\n\n\n\ninteraction_domain_names(m::SoilCanopyModel)\n\nThe domain names of the additional auxiliary variables that are  included in the integrated Soil-Canopy model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#Land-Hydrology","page":"ClimaLSM","title":"Land Hydrology","text":"","category":"section"},{"location":"APIs/ClimaLSM/","page":"ClimaLSM","title":"ClimaLSM","text":"ClimaLSM.infiltration_capacity\nClimaLSM.infiltration_at_point\nClimaLSM.PrognosticRunoff\nClimaLSM.RunoffBC","category":"page"},{"location":"APIs/ClimaLSM/#ClimaLSM.infiltration_capacity","page":"ClimaLSM","title":"ClimaLSM.infiltration_capacity","text":"function infiltration_capacity(\n    Y::ClimaCore.Fields.FieldVector,\n    p::NamedTuple,\n)\n\nFunction which computes the infiltration capacity of the soil based on soil characteristics, moisture levels, and pond height.\n\nDefined such that positive means into soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.infiltration_at_point","page":"ClimaLSM","title":"ClimaLSM.infiltration_at_point","text":"infiltration_at_point(η::FT, i_c::FT, P::FT)\n\nReturns the infiltration given pond height η, infiltration capacity, and precipitation. \n\nThis is defined such that positive means into soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/ClimaLSM/#ClimaLSM.PrognosticRunoff","page":"ClimaLSM","title":"ClimaLSM.PrognosticRunoff","text":"PrognosticRunoff{FT} <: Pond.AbstractSurfaceRunoff{FT}\n\nConcrete type of Pond.AbstractSurfaceRunoff for use in LSM models, where precipitation is passed in, but infiltration is computed prognostically.\n\nThis is paired with Soil.RunoffBC: both are used at the same time, ensuring the infiltration used for the boundary condition of soil is also used to compute the runoff for the surface water.\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#ClimaLSM.RunoffBC","page":"ClimaLSM","title":"ClimaLSM.RunoffBC","text":"RunoffBC <: Soil.AbstractSoilBC\n\nConcrete type of Soil.AbstractSoilBC for use in LSM models, where precipitation is passed in, but infiltration is computed prognostically. This infiltration is then used to set an upper boundary condition for the soil.\n\nThis is paired with Pond.PrognosticRunoff: both are used at the same  time, ensuring that the infiltration used for the boundary condition of soil is also used to compute the runoff for the surface water.\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#SoilPlantHydrologyModel","page":"ClimaLSM","title":"SoilPlantHydrologyModel","text":"","category":"section"},{"location":"APIs/ClimaLSM/","page":"ClimaLSM","title":"ClimaLSM","text":"ClimaLSM.PrognosticSoilPressure\nClimaLSM.RootExtraction","category":"page"},{"location":"APIs/ClimaLSM/#ClimaLSM.RootExtraction","page":"ClimaLSM","title":"ClimaLSM.RootExtraction","text":"RootExtraction{FT} <: Soil.AbstractSoilSource{FT}\n\nConcrete type of Soil.AbstractSoilSource, used for dispatch  in an LSM with both soil and plant hydraulic components.\n\nThis is paired with the source term Canopy.PrognosticSoil:both  are used at the same time, ensuring that the water flux into the roots is extracted correctly from the soil.\n\n\n\n\n\n","category":"type"},{"location":"APIs/ClimaLSM/#LandSoilBiogeochemistry","page":"ClimaLSM","title":"LandSoilBiogeochemistry","text":"","category":"section"},{"location":"APIs/ClimaLSM/","page":"ClimaLSM","title":"ClimaLSM","text":"ClimaLSM.PrognosticMet","category":"page"},{"location":"APIs/shared_utilities/#Shared-Utilities","page":"Shared Utilities","title":"Shared Utilities","text":"","category":"section"},{"location":"APIs/shared_utilities/","page":"Shared Utilities","title":"Shared Utilities","text":"CurrentModule = ClimaLSM","category":"page"},{"location":"APIs/shared_utilities/#Domains","page":"Shared Utilities","title":"Domains","text":"","category":"section"},{"location":"APIs/shared_utilities/","page":"Shared Utilities","title":"Shared Utilities","text":"ClimaLSM.Domains.AbstractDomain\nClimaLSM.Domains.AbstractLSMDomain\nClimaLSM.Domains.SphericalShell\nClimaLSM.Domains.SphericalSurface\nClimaLSM.Domains.HybridBox\nClimaLSM.Domains.Column\nClimaLSM.Domains.Plane\nClimaLSM.Domains.Point\nClimaLSM.Domains.coordinates\nClimaLSM.Domains.obtain_face_space\nClimaLSM.Domains.obtain_surface_space\nClimaLSM.Domains.obtain_surface_domain\nClimaLSM.Domains.top_center_to_surface","category":"page"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.AbstractDomain","page":"Shared Utilities","title":"ClimaLSM.Domains.AbstractDomain","text":"AbstractDomain{FT <:AbstractFloat}\n\nAn abstract type for domains. \n\nThe domain structs typically hold information regarding the bounds of the domain, the boundary condition type (periodic or not), and the spatial discretization.\n\nAdditionally, the domain struct holds the relevant spaces for that domain. For example, a 3D domain holds the center space (in terms of finite difference - the space corresponding to the centers of each element), and the top face space where surface fluxes are computed.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.SphericalShell","page":"Shared Utilities","title":"ClimaLSM.Domains.SphericalShell","text":"struct SphericalShell{FT} <: AbstractDomain{FT}\n    radius::FT\n    depth::FT\n    dz_tuple::Union{Tuple{FT, FT}, Nothing}\n    nelements::Tuple{Int, Int}\n    npolynomial::Int\nend\n\nA struct holding the necessary information to construct a domain, a mesh,  a 2d spectral element space (non-radial directions)  x a 1d finite difference space (radial direction),  and the resulting coordinate field.\n\nspace is a NamedTuple holding the surface space (in this case, the top face space) and the center space for the subsurface. These are stored using the keys :surface and :subsurface.\n\nFields\n\nradius: The radius of the shell\ndepth: The radial extent of the shell\ndz_tuple: Tuple for mesh stretching specifying target (dzbottom, dztop) (m). If nothing, no stretching is applied.\nnelements: The number of elements to be used in the non-radial and radial directions\nnpolynomial: The polynomial order to be used in the non-radial directions\nspace: A NamedTuple of associated ClimaCore spaces: in this case, the surface space and subsurface center space\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.SphericalSurface","page":"Shared Utilities","title":"ClimaLSM.Domains.SphericalSurface","text":"struct SphericalSurface{FT} <: AbstractDomain{FT}\n    radius::FT\n    nelements::Tuple{Int, Int}\n    npolynomial::Int\nend\n\nA struct holding the necessary information to construct a domain, a mesh,  a 2d spectral element space (non-radial directions) and the resulting coordinate field.\n\nspace is a NamedTuple holding the surface space (in this case, the entire SphericalSurface space).\n\nFields\n\nradius: The radius of the surface\nnelements: The number of elements to be used in the non-radial directions\nnpolynomial: The polynomial order to be used in the non-radial directions\nspace: A NamedTuple of associated ClimaCore spaces: in this case, the surface (SphericalSurface) space\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.HybridBox","page":"Shared Utilities","title":"ClimaLSM.Domains.HybridBox","text":"struct HybridBox{FT} <: AbstractDomain{FT}\n    xlim::Tuple{FT, FT}\n    ylim::Tuple{FT, FT}\n    zlim::Tuple{FT, FT}\n    dz_tuple::Union{Tuple{FT, FT}, Nothing}\n    nelements::Tuple{Int, Int, Int}\n    npolynomial::Int\n    periodic::Tuple{Bool, Bool}\nend\n\nA struct holding the necessary information to construct a domain, a mesh,  a 2d spectral element space (horizontal) x a 1d finite difference space  (vertical), and the resulting coordinate field. This domain is not periodic along the z-axis. Note that  only periodic domains are supported in the horizontal.\n\nspace is a NamedTuple holding the surface space (in this case, the top face space) and the center space for the subsurface. These are stored using the keys :surface and :subsurface.\n\nFields\n\nxlim: Domain interval limits along x axis, in meters\nylim: Domain interval limits along y axis, in meters\nzlim: Domain interval limits along z axis, in meters\ndz_tuple: Tuple for mesh stretching specifying target (dzbottom, dztop) (m). If nothing, no stretching is applied.\nnelements: Number of elements to discretize interval, (nx, ny,nz)\nnpolynomial:  Polynomial order for the horizontal directions\nperiodic: Flag indicating periodic boundaries in horizontal. only true is supported\nspace: A NamedTuple of associated ClimaCore spaces: in this case, the surface space and subsurface center space\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.Column","page":"Shared Utilities","title":"ClimaLSM.Domains.Column","text":"Column{FT} <: AbstractDomain{FT}\n\nA struct holding the necessary information  to construct a domain, a mesh, a center and face space, etc. for use when a finite difference in 1D is suitable, as for a soil column model.\n\nspace is a NamedTuple holding the surface space (in this case, the top face space) and the center space for the subsurface. These are stored using the keys :surface and :subsurface.\n\nFields\n\nzlim: Domain interval limits, (zmin, zmax), in meters\nnelements: Number of elements used to discretize the interval\ndz_tuple: Tuple for mesh stretching specifying target (dzbottom, dztop) (m). If nothing, no stretching is applied.\nboundary_tags: Boundary face identifiers\nspace: A NamedTuple of associated ClimaCore spaces: in this case, the surface space and subsurface center space\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.Plane","page":"Shared Utilities","title":"ClimaLSM.Domains.Plane","text":"Plane{FT} <: AbstractDomain{FT}\n\nA struct holding the necessary information  to construct a domain, a mesh, a 2d spectral element space, and the resulting coordinate field. Note that only periodic domains are currently supported.\n\nspace is a NamedTuple holding the surface space (in this case, the entire Plane space).\n\nFields\n\nxlim: Domain interval limits along x axis, in meters\nylim: Domain interval limits along y axis, in meters\nnelements: Number of elements to discretize interval, (nx, ny)\nperiodic: Flags for periodic boundaries; only true is supported\nnpolynomial: Polynomial order for both x and y\nspace: A NamedTuple of associated ClimaCore spaces: in this case, the surface(Plane) space\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.Point","page":"Shared Utilities","title":"ClimaLSM.Domains.Point","text":"Point{FT} <: AbstractDomain{FT}\n\nA domain for single column surface variables. For models such as ponds, snow, plant hydraulics, etc. Enables consistency  in variable initialization across all domains.\n\nspace is a NamedTuple holding the surface space (in this case, the Point space).\n\nFields\n\nz_sfc: Surface elevation relative to a reference (m)\nspace: A NamedTuple of associated ClimaCore spaces: in this case, the Point (surface) space\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.coordinates","page":"Shared Utilities","title":"ClimaLSM.Domains.coordinates","text":"Domains.coordinates(model::AbstractLandModel)\n\nReturns a NamedTuple of the unique set of coordinates for the LSM model, where the unique set is taken over the coordinates of all of the subcomponents.\n\nFor example, an LSM with a single layer snow model, multi-layer  soil model, and canopy model would have a coordinate set corresponding to the coordinates of the surface (snow), the subsurface coordinates (soil) and the coordinates of the surface (canopy). This would return the coordinates of the surface and subsurface. These are distinct because the subsurface coordinates correspond to the centers of the layers, while the surface corresponds to the top face of the domain.\n\n\n\n\n\ncoordinates(domain::AbstractDomain)\n\nReturns the coordinate fields for the domain as a NamedTuple.\n\nThe returned coordinates are stored with keys :surface, :subsurface, e.g. as relevant for the domain.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.obtain_face_space","page":"Shared Utilities","title":"ClimaLSM.Domains.obtain_face_space","text":"obtain_face_space(cs::ClimaCore.Spaces.AbstractSpace)\n\nReturns the face space, if applicable, for the center space cs.\n\n\n\n\n\nobtain_face_space(cs::ClimaCore.Spaces.CenterExtrudedFiniteDifferenceSpace)\n\nReturns the face space for the CenterExtrudedFiniteDifferenceSpace cs.\n\n\n\n\n\nobtain_face_space(cs::ClimaCore.Spaces.CenterFiniteDifferenceSpace)\n\nReturns the face space corresponding to the CenterFiniteDifferenceSpace cs.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.obtain_surface_space","page":"Shared Utilities","title":"ClimaLSM.Domains.obtain_surface_space","text":"obtain_surface_space(cs::ClimaCore.Spaces.AbstractSpace)\n\nReturns the surface space, if applicable, for the center space cs.\n\n\n\n\n\nobtain_surface_space(cs::ClimaCore.Spaces.CenterExtrudedFiniteDifferenceSpace)\n\nReturns the horizontal space for the CenterExtrudedFiniteDifferenceSpace cs.\n\n\n\n\n\nobtain_surface_space(cs::ClimaCore.Spaces.CenterFiniteDifferenceSpace)\n\nReturns the top level of the face space corresponding to the CenterFiniteDifferenceSpace cs.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.obtain_surface_domain","page":"Shared Utilities","title":"ClimaLSM.Domains.obtain_surface_domain","text":"obtain_surface_domain(d::AbstractDomain) where {FT}\n\nDefault method throwing an error; any domain with a corresponding domain should define a new method of this function.\n\n\n\n\n\nobtain_surface_domain(c::Column{FT}) where {FT}\n\nReturns the Point domain corresponding to the top face (surface) of the Column domain c.\n\n\n\n\n\nobtain_surface_domain(b::HybridBox{FT}) where {FT}\n\nReturns the Plane domain corresponding to the top face (surface) of the HybridBox domain b.\n\n\n\n\n\nobtain_surface_domain(s::SphericalShell{FT}) where {FT}\n\nReturns the SphericalSurface domain corresponding to the top face  (surface) of the SphericalShell domain s.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.Domains.top_center_to_surface","page":"Shared Utilities","title":"ClimaLSM.Domains.top_center_to_surface","text":"top_center_to_surface(center_field::ClimaCore.Fields.Field)\n\nCreates and returns a ClimaCore.Fields.Field defined on the space corresponding to the surface of the space on which center_field  is defined, with values equal to the those at the level of the top  center.\n\nFor example, given a center_field defined on 1D center finite difference space, this would return a field defined on the Point space of the surface of the column. The value would be the value of the oroginal center_field  at the topmost location. Given a center_field defined on a 3D extruded center finite difference space, this would return a 2D field corresponding to the surface, with values equal to the topmost level.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#Models","page":"Shared Utilities","title":"Models","text":"","category":"section"},{"location":"APIs/shared_utilities/","page":"Shared Utilities","title":"Shared Utilities","text":"ClimaLSM.AbstractModel\nClimaLSM.AbstractImExModel\nClimaLSM.AbstractExpModel\nClimaLSM.make_exp_tendency\nClimaLSM.make_imp_tendency\nClimaLSM.make_compute_exp_tendency\nClimaLSM.make_compute_imp_tendency\nClimaLSM.make_update_aux\nClimaLSM.make_set_initial_aux_state\nClimaLSM.prognostic_vars\nClimaLSM.prognostic_types\nClimaLSM.prognostic_domain_names\nClimaLSM.auxiliary_vars\nClimaLSM.auxiliary_types\nClimaLSM.auxiliary_domain_names\nClimaLSM.initialize_prognostic\nClimaLSM.initialize_auxiliary\nClimaLSM.initialize\nClimaLSM.name\nClimaLSM.AbstractBC\nClimaLSM.AbstractSource\nClimaLSM.source!\nClimaLSM.AbstractBoundary\nClimaLSM.TopBoundary\nClimaLSM.BottomBoundary\nClimaLSM.boundary_flux\nClimaLSM.diffusive_flux\nClimaLSM.get_Δz\nClimaLSM.make_tendency_jacobian\nClimaLSM.make_update_jacobian\nClimaLSM.∂tendencyBC∂Y\nClimaLSM.AbstractTridiagonalW","category":"page"},{"location":"APIs/shared_utilities/#ClimaLSM.AbstractModel","page":"Shared Utilities","title":"ClimaLSM.AbstractModel","text":"abstract type AbstractModel{FT <: AbstractFloat}\n\nAn abstract type for all models.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.AbstractImExModel","page":"Shared Utilities","title":"ClimaLSM.AbstractImExModel","text":"AbstractImExModel{FT} <: AbstractModel{FT}\n\nAn abstract type for models which must be treated implicitly (and which may also have tendency terms that can be treated explicitly). This inherits all the default function definitions from AbstractModel, as well as make_imp_tendency and make_compute_imp_tendency defaults.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.AbstractExpModel","page":"Shared Utilities","title":"ClimaLSM.AbstractExpModel","text":"AbstractExpModel{FT} <: AbstractModel{FT}\n\nAn abstract type for models which must be treated explicitly. This inherits all the default function definitions from AbstractModel, as well as a make_imp_tendency default.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.make_exp_tendency","page":"Shared Utilities","title":"ClimaLSM.make_exp_tendency","text":"make_exp_tendency(model::AbstractModel)\n\nReturns an exp_tendency that updates auxiliary variables and updates the prognostic state of variables that are stepped explicitly.\n\ncompute_exp_tendency! should be compatible with SciMLBase.jl solvers.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.make_imp_tendency","page":"Shared Utilities","title":"ClimaLSM.make_imp_tendency","text":"make_imp_tendency(model::AbstractImExModel)\n\nReturns an imp_tendency that updates auxiliary variables and updates the prognostic state of variables that are stepped implicitly.\n\ncompute_imp_tendency! should be compatible with SciMLBase.jl solvers.\n\n\n\n\n\nmake_imp_tendency(model::AbstractModel)\n\nReturns an imp_tendency that does nothing. This model type is not stepped explicity.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.make_compute_exp_tendency","page":"Shared Utilities","title":"ClimaLSM.make_compute_exp_tendency","text":"make_compute_exp_tendency(model::BucketModel{FT}) where {FT}\n\nCreates the computeexptendency! function for the bucket model.\n\n\n\n\n\nmake_compute_exp_tendency(model::SoilCO2Model)\n\nAn extension of the function make_compute_exp_tendency, for the soilco2 equation. This function creates and returns a function which computes the entire right hand side of the PDE for C, and updates dY.soil.C in place with that value. These quantities will be stepped explicitly.\n\nThis has been written so as to work with Differential Equations.jl.\n\n\n\n\n\nmake_compute_exp_tendency(model::AbstractModel)\n\nReturn a compute_exp_tendency! function that updates state variables that we will be stepped explicitly.\n\ncompute_exp_tendency! should be compatible with SciMLBase.jl solvers.\n\n\n\n\n\nmake_compute_exp_tendency(model::PlantHydraulicsModel, _)\n\nA function which creates the computeexptendency! function for the PlantHydraulicsModel. The computeexptendency! function must comply with a rhs function of SciMLBase.jl.\n\nBelow, fa denotes a flux multiplied by the relevant cross section (per unit area ground, or area index, AI). The tendency for the ith compartment can be written then as: ∂ϑ[i]/∂t = 1/(AI*dz)[fa[i]-fa[i+1]).\n\nNote that if the area_index is zero because no plant is present, AIdz is zero, and the fluxes fa appearing in the numerator are zero because they are scaled by AI.\n\nTo prevent dividing by zero, we change AI/(AI x dz)\" to \"AI/max(AI x dz, eps(FT))\"\n\n\n\n\n\n ClimaLSM.make_compute_exp_tendency(component::AbstractCanopyComponent, canopy)\n\nCreates the computeexptendency!(dY,Y,p,t) function for the canopy component.\n\nSince component models are not standalone models, other information may be needed and passed in (via the canopy model itself). The right hand side for the entire canopy model can make use of these functions for the individual components.\n\n\n\n\n\nmake_compute_exp_tendency(canopy::CanopyModel)\n\nCreates and returns the computeexptendency! for the CanopyModel.\n\nThis allows for prognostic variables in each canopy component, and specifies that they will be stepped explicitly.\n\n\n\n\n\nmake_explicit_tendency(model::Soil.RichardsModel)\n\nAn extension of the function make_compute_imp_tendency, for the Richardson- Richards equation.\n\nConstruct the tendency computation function for the explicit terms of the RHS, which are horizontal components and source/sink terms.\n\n\n\n\n\nmake_compute_exp_tendency(model::EnergyHydrology)\n\nAn extension of the function make_compute_exp_tendency, for the integrated soil energy and heat equations, including phase change.\n\nThis function creates and returns a function which computes the entire right hand side of the PDE for Y.soil.ϑ_l, Y.soil.θ_i, Y.soil.ρe_int, and updates dY.soil in place with those values. All of these quantities will be stepped explicitly.\n\nThis has been written so as to work with Differential Equations.jl.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.make_compute_imp_tendency","page":"Shared Utilities","title":"ClimaLSM.make_compute_imp_tendency","text":"make_compute_imp_tendency(model::AbstractModel)\n\nReturn a compute_imp_tendency! function that updates state variables that we will be stepped implicitly.\n\ncompute_imp_tendency! should be compatible with SciMLBase.jl solvers.\n\n\n\n\n\nmake_compute_imp_tendency(model::RichardsModel)\n\nAn extension of the function make_compute_imp_tendency, for the Richardson- Richards equation.\n\nThis function creates and returns a function which computes the entire right hand side of the PDE for ϑ_l, and updates dY.soil.ϑ_l in place with that value.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.make_update_aux","page":"Shared Utilities","title":"ClimaLSM.make_update_aux","text":"make_update_aux(model::BucketModel{FT}) where {FT}\n\nCreates the update_aux! function for the BucketModel.\n\n\n\n\n\nmake_update_aux(model::SoilCO2Model)\n\nAn extension of the function make_update_aux, for the soilco2 equation. This function creates and returns a function which updates the auxiliary variables p.soil.variable in place. This has been written so as to work with Differential Equations.jl.\n\n\n\n\n\nmake_update_aux(model::AbstractModel)\n\nReturn an update_aux! function that updates auxiliary parameters p.\n\n\n\n\n\n ClimaLSM.make_update_aux(canopy::CanopyModel{FT, \n                                              <:AutotrophicRespirationModel,\n                                              <:Union{BeerLambertModel, TwoStreamModel},\n                                              <:FarquharModel,\n                                              <:MedlynConductanceModel,\n                                              <:PlantHydraulicsModel,},\n                          ) where {FT}\n\nCreates the update_aux! function for the CanopyModel; a specific method for update_aux! for the case where the canopy model components are of the type in the parametric type signature: AutotrophicRespirationModel, AbstractRadiationModel, FarquharModel, MedlynConductanceModel, and PlantHydraulicsModel.\n\nPlease note that the plant hydraulics model has auxiliary variables that are updated in its prognostic compute_exp_tendency! function. While confusing, this is better for performance as it saves looping over the state vector multiple times.\n\nThe other sub-components rely heavily on each other, so the version of the CanopyModel with these subcomponents has a single update_aux! function, given here.\n\n\n\n\n\nmake_update_aux(model::RichardsModel)\n\nAn extension of the function make_update_aux, for the Richardson- Richards equation.\n\nThis function creates and returns a function which updates the auxiliary variables p.soil.variable in place.\n\nThis has been written so as to work with Differential Equations.jl.\n\n\n\n\n\nmake_update_aux(model::EnergyHydrology)\n\nAn extension of the function make_update_aux, for the integrated soil hydrology and energy model.\n\nThis function creates and returns a function which updates the auxiliary variables p.soil.variable in place.\n\nThis has been written so as to work with Differential Equations.jl.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.make_set_initial_aux_state","page":"Shared Utilities","title":"ClimaLSM.make_set_initial_aux_state","text":"ClimaLSM.make_set_initial_aux_state(model::BucketModel{FT}) where{FT}\n\nReturns the setinitialaux_state! function, which updates the auxiliary state p in place with the initial values corresponding to Y(t=t0) = Y0.\n\nIn this case, we also use this method to update the initial values for the spatially varying parameter fields, read in from data files.\n\n\n\n\n\nmake_set_initial_aux_state(model::AbstractModel)\n\nReturns the setinitialaux_state! function, which updates the auxiliary state p in place with the initial values corresponding to Y(t=t0) = Y0.\n\nIn principle, this function is not needed, because in the very first evaluation of either explicit_tendency or implicit_tendency, at t=t0, the auxiliary state is updated using the initial conditions for Y=Y0. However, without setting the initial p state prior to running the simulation, the value of p in the saved output at t=t0 will be unset.\n\nFurthermore, specific methods of this function may be useful for models which store time indepedent spatially varying parameter fields in the auxiliary state. In this case, update_aux! does not need to do anything, but they do need to be set with the initial (constant) values before the simulation can be carried out.\n\n\n\n\n\nClimaLSM.make_set_initial_aux_state(model::CanopyModel)\n\nReturns the setinitialaux_state! function, which updates the auxiliary state p in place with the initial values corresponding to Y(t=t0) = Y0.\n\nIn this case, we also use this method to update the initial values for the spatially and temporally varying canopy parameter fields,  read in from data files or otherwise prescribed.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.prognostic_vars","page":"Shared Utilities","title":"ClimaLSM.prognostic_vars","text":"prognostic_vars(m::AbstractModel)\n\nReturns the prognostic variable symbols for the model in the form of a tuple.\n\n\n\n\n\nprognostic_vars(model::PlantHydraulicsModel)\n\nA function which returns the names of the prognostic variables of the PlantHydraulicsModel.\n\n\n\n\n\nClimaLSM.prognostic_vars(::AbstractCanopyComponent)\n\nReturns the prognostic vars of the canopy component passed in as an argument.\n\n\n\n\n\nprognostic_vars(canopy::CanopyModel)\n\nReturns the prognostic variables for the canopy model by looping over each sub-component name in canopy_components.\n\nThis relies on the propertynames of CanopyModel being the same as those returned by canopy_components.\n\n\n\n\n\nprognostic_vars(soil::RichardsModel)\n\nA function which returns the names of the prognostic variables of RichardsModel.\n\n\n\n\n\nprognostic_vars(soil::EnergyHydrology)\n\nA function which returns the names of the prognostic variables of EnergyHydrology.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.prognostic_types","page":"Shared Utilities","title":"ClimaLSM.prognostic_types","text":"prognostic_types(m::AbstractModel{FT}) where {FT}\n\nReturns the prognostic variable types for the model in the form of a tuple.\n\nTypes provided must have ClimaCore.RecursiveApply.rzero(T::DataType)  defined. Common examples  include\n\nFloat64, Float32 for scalar variables (a scalar value at each\n\ncoordinate point)\n\nSVector{k,Float64} for a mutable but statically sized array of\n\nlength k at each coordinate point.\n\nHere, the coordinate points are those returned by coordinates(model).\n\n\n\n\n\nClimaLSM.prognostic_types(model::PlantHydraulicsModel{FT}) where {FT}\n\nDefines the prognostic types for the PlantHydraulicsModel.\n\n\n\n\n\nClimaLSM.prognostic_types(::AbstractCanopyComponent)\n\nReturns the prognostic types of the canopy component passed in as an argument.\n\n\n\n\n\nprognostic_types(canopy::CanopyModel)\n\nReturns the prognostic types for the canopy model by looping over each sub-component name in canopy_components.\n\nThis relies on the propertynames of CanopyModel being the same as those returned by canopy_components.\n\n\n\n\n\nprognostic_types(soil::EnergyHydrology{FT}) where {FT}\n\nA function which returns the types of the prognostic variables of EnergyHydrology.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.prognostic_domain_names","page":"Shared Utilities","title":"ClimaLSM.prognostic_domain_names","text":"prognosticdomainnames(m::AbstractModel)\n\nReturns the domain names for the prognostic variables in the form of a tuple.\n\nExamples: (:surface, :surface, :subsurface).\n\n\n\n\n\nprognosticdomainnames(m::AbstractCanopyComponent)\n\nReturns the domain names for the prognostic variables in the form of a tuple.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.auxiliary_vars","page":"Shared Utilities","title":"ClimaLSM.auxiliary_vars","text":"auxiliary_vars(m::AbstractModel)\n\nReturns the auxiliary variable symbols for the model in the form of a tuple.\n\n\n\n\n\nauxiliary_vars(model::PlantHydraulicsModel)\n\nA function which returns the names of the auxiliary variables of the PlantHydraulicsModel, the transpiration stress factor β (unitless), the water potential ψ (m), the volume fluxcross section fa (1/s), and the volume fluxroot cross section in the roots fa_roots (1/s), where the cross section can be represented by an area index.\n\n\n\n\n\nClimaLSM.auxiliary_vars(::AbstractCanopyComponent)\n\nReturns the auxiliary types of the canopy component passed in as an argument.\n\n\n\n\n\nauxiliary_vars(canopy::CanopyModel)\n\nReturns the auxiliary variables for the canopy model by looping over each sub-component name in canopy_components.\n\nThis relies on the propertynames of CanopyModel being the same as those returned by canopy_components.\n\n\n\n\n\nauxiliary_vars(soil::RichardsModel)\n\nA function which returns the names of the auxiliary variables of RichardsModel.\n\nNote that auxiliary variables are not needed for such a simple model. We could instead compute the conductivity and matric potential within the tendency function explicitly, rather than compute and store them in the auxiliary vector p. We did so in this case as a demonstration.\n\n\n\n\n\nauxiliary_vars(soil::EnergyHydrology)\n\nA function which returns the names of the auxiliary variables of EnergyHydrology.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.auxiliary_types","page":"Shared Utilities","title":"ClimaLSM.auxiliary_types","text":"auxiliary_types(m::AbstractModel{FT}) where {FT}\n\nReturns the auxiliary variable types for the model in the form of a tuple.\n\nTypes provided must have ClimaCore.RecursiveApply.rzero(T::DataType) defined. Common examples  include\n\nFloat64, Float32 for scalar variables (a scalar value at each\n\ncoordinate point)\n\nSVector{k,Float64} for a mutable but statically sized array of\n\nlength k at each coordinate point.\n\nNote that Arrays, MVectors are not isbits and cannot be used.\n\nHere, the coordinate points are those returned by coordinates(model).\n\n\n\n\n\nClimaLSM.auxiliary_types(model::PlantHydraulicsModel{FT}) where {FT}\n\nDefines the auxiliary types for the PlantHydraulicsModel.\n\n\n\n\n\nClimaLSM.auxiliary_types(::AbstractCanopyComponent)\n\nReturns the auxiliary types of the canopy component passed in as an argument.\n\n\n\n\n\nauxiliary_types(canopy::CanopyModel)\n\nReturns the auxiliary types for the canopy model by looping over each sub-component name in canopy_components.\n\nThis relies on the propertynames of CanopyModel being the same as those returned by canopy_components.\n\n\n\n\n\nauxiliary_types(soil::EnergyHydrology{FT}) where {FT}\n\nA function which returns the types of the auxiliary variables of EnergyHydrology.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.auxiliary_domain_names","page":"Shared Utilities","title":"ClimaLSM.auxiliary_domain_names","text":"auxiliarydomainnames(m::AbstractModel)\n\nReturns the domain names for the auxiliary variables in the form of a tuple.\n\nExamples: (:surface, :surface, :subsurface).\n\n\n\n\n\nauxiliarydomainnames(m::AbstractCanopyComponent)\n\nReturns the domain names for the auxiliary variables in the form of a tuple.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.initialize_prognostic","page":"Shared Utilities","title":"ClimaLSM.initialize_prognostic","text":"initialize_prognostic(model::AbstractModel, state::NamedTuple)\n\nReturns a FieldVector of prognostic variables for model with the required structure, with values equal to similar(state). This assumes that all prognostic variables are defined over the entire domain, and that all prognostic variables have the same dimension and type.\n\nIf a model has no prognostic variables, the returned FieldVector contains only an empty array.\n\nThe input state is an array-like object, usually a ClimaCore Field or a Vector{FT}.\n\nAdjustments to this - for example because different prognostic variables have different dimensions - require defining a new method.\n\n\n\n\n\ninitialize_prognostic(\n    component::AbstractCanopyComponent,\n    state,\n)\n\nCreates and returns a ClimaCore.Fields.FieldVector with the prognostic variables of the canopy component  component, stored using the name of the component.\n\nThe input state is usually a ClimaCore Field object.\n\n\n\n\n\ninitialize_prognostic(\n    model::CanopyModel{FT},\n    coords,\n) where {FT}\n\nCreates the prognostic state vector of the CanopyModel and returns it as a ClimaCore.Fields.FieldVector.\n\nThe input state is usually a ClimaCore Field object.\n\nThis function loops over the components of the CanopyModel and appends each component models prognostic state vector into a single state vector, structured by component name.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.initialize_auxiliary","page":"Shared Utilities","title":"ClimaLSM.initialize_auxiliary","text":"initialize_auxiliary(model::AbstractModel, state::NamedTuple)\n\nReturns a NamedTuple of auxiliary variables for model with the required structure, with values equal to similar(state). This assumes that all  auxiliary variables are defined over the entire domain, and that all auxiliary variables have the same dimension and type. The auxiliary variables NamedTuple can also hold preallocated objects which are not Fields.\n\nIf a model has no auxiliary variables, the returned NamedTuple contains only an empty array.\n\nThe input state is an array-like object, usually a ClimaCore Field or a Vector{FT}.\n\nAdjustments to this - for example because different auxiliary variables have different dimensions - require defining a new method.\n\n\n\n\n\ninitialize_auxiliary(\n    component::AbstractCanopyComponent,\n    state,\n)\n\nCreates and returns a ClimaCore.Fields.FieldVector with the auxiliary variables of the canopy component  component, stored using the name of the component.\n\nThe input state is usually a ClimaCore Field object.\n\n\n\n\n\ninitialize_auxiliary(\n    model::CanopyModel{FT},\n    coords,\n) where {FT}\n\nCreates the auxiliary state vector of the CanopyModel and returns  it as a ClimaCore.Fields.FieldVector.\n\nThe input coords is usually a ClimaCore Field object.\n\nThis function loops over the components of the CanopyModel and appends each component models auxiliary state vector into a single state vector, structured by component name.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.initialize","page":"Shared Utilities","title":"ClimaLSM.initialize","text":"initialize(model::AbstractModel)\n\nCreates the prognostic and auxiliary states structures, but with unset values; constructs and returns the coordinates for the model domain. We may need to consider this default more as we add diverse components and Simulations.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.name","page":"Shared Utilities","title":"ClimaLSM.name","text":"name(model::AbstractModel)\n\nReturns a symbol of the model component name, e.g. :soil or :vegetation.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.AbstractBC","page":"Shared Utilities","title":"ClimaLSM.AbstractBC","text":"AbstractBC\n\nAn abstract type for types of boundary conditions, which will include prescribed functions of space and time as Dirichlet conditions or Neumann conditions, in addition to other  convenient conditions.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.AbstractSource","page":"Shared Utilities","title":"ClimaLSM.AbstractSource","text":"AbstractSource{FT <: AbstractFloat}\n\nAn abstract type for types of source terms.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.source!","page":"Shared Utilities","title":"ClimaLSM.source!","text":"ClimaLSM.source!(dY::ClimaCore.Fields.FieldVector,\n                      src::MicrobeProduction,\n                      Y::ClimaCore.Fields.FieldVector,\n                      p::NamedTuple,\n                      params)\n\nA method which extends the ClimaLSM source! function for the case of microbe production of CO2 in soil.\n\n\n\n\n\n source!(dY::ClimaCore.Fields.FieldVector,\n         src::AbstractSource,\n         Y::ClimaCore.Fields.FieldVector,\n         p::NamedTuple\n         )::ClimaCore.Fields.Field\n\nA stub function, which is extended by ClimaLSM.\n\n\n\n\n\nClimaLSM.source!(dY::ClimaCore.Fields.FieldVector,\n                 src::RootExtraction,\n                 Y::ClimaCore.Fields.FieldVector,\n                 p::NamedTuple\n                 model::EnergyHydrology)\n\nAn extension of the ClimaLSM.source! function,  which computes source terms for the  soil model; this method returns the water and energy loss/gain due to root extraction.\n\n\n\n\n\n source!(dY::ClimaCore.Fields.FieldVector,\n         src::PhaseChange{FT},\n         Y::ClimaCore.Fields.FieldVector,\n         p::NamedTuple,\n         model\n         )\n\nComputes the source terms for phase change.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.AbstractBoundary","page":"Shared Utilities","title":"ClimaLSM.AbstractBoundary","text":"AbstractBoundary\n\nAn abstract type to indicate which boundary we are doing calculations for. Currently, we support the top boundary (TopBoundary) and bottom boundary (BottomBoundary).\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.TopBoundary","page":"Shared Utilities","title":"ClimaLSM.TopBoundary","text":"TopBoundary{} <: AbstractBoundary{}\n\nA simple object which should be passed into a function to indicate that we are considering the top boundary of the soil.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.BottomBoundary","page":"Shared Utilities","title":"ClimaLSM.BottomBoundary","text":"BottomBoundary{} <: AbstractBoundary{}\n\nA simple object which should be passed into a function to indicate that we are considering the bottom boundary of the soil.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.boundary_flux","page":"Shared Utilities","title":"ClimaLSM.boundary_flux","text":"ClimaLSM.boundary_flux(\n    bc::SoilCO2FluxBC,\n    boundary::ClimaLSM.AbstractBoundary,\n    Δz::ClimaCore.Fields.Field,\n    Y::ClimaCore.Fields.FieldVector,\n    p::NamedTuple,\n    t::FT,\n)::ClimaCore.Fields.Field where {FT}\n\nA method of ClimaLSM.boundary_flux which returns the soilco2 flux (kg CO2 /m^2/s) in the case of a prescribed flux BC at either the top or bottom of the domain.\n\n\n\n\n\nClimaLSM.boundary_flux(\nbc::SoilCO2StateBC,\nboundary::ClimaLSM.TopBoundary,\nΔz::ClimaCore.Fields.Field,\nY::ClimaCore.Fields.FieldVector,\np::NamedTuple,\nt::FT,\n)::ClimaCore.Fields.Field where {FT}\n\nA method of ClimaLSM.boundary_flux which returns the soilco2 flux in the case of a prescribed state BC at  top of the domain.\n\n\n\n\n\nClimaLSM.boundary_flux(\n    bc::SoilCO2StateBC,\n    boundary::ClimaLSM.BottomBoundary,\n    Δz::ClimaCore.Fields.Field,\n    Y::ClimaCore.Fields.FieldVector,\n    p::NamedTuple,\n    t::FT,\n)::ClimaCore.Fields.Field where {FT}\n\nA method of ClimaLSM.boundary_flux which returns the soilco2 flux in the case of a prescribed state BC at bottom of the domain.\n\n\n\n\n\nboundary_flux(bc::AbstractBC, bound_type::AbstractBoundary, Δz, _...)::ClimaCore.Fields.Field\n\nA function which returns the correct boundary flux  given     any boundary condition (BC). \n\n\n\n\n\nfunction ClimaLSM.boundary_flux(\n    bc::RunoffBC,\n    ::TopBoundary,\n    Δz::FT,\n    p::NamedTuple,\n    t::FT,\n    params,\n)::ClimaCore.Fields.Field where {FT}\n\nExtension of the ClimaLSM.boundary_flux function, which returns the water volume boundary flux for the soil. At the top boundary, return the soil infiltration (computed each step and stored in p.soil_infiltration).\n\n\n\n\n\nClimaLSM.boundary_flux(bc::FluxBC,  _...)::ClimaCore.Fields.Field\n\nA method of boundary fluxes which returns the desired flux.\n\nWe add a field of zeros in order to convert the bc (float) into a field.\n\n\n\n\n\nClimaLSM.boundary_flux(bc::RichardsAtmosDrivenFluxBC,\n                       boundary::ClimaLSM.AbstractBoundary,\n                       model::RichardsModel,\n                       Δz::ClimaCore.Fields.Field,\n                       Y::ClimaCore.Fields.FieldVector,\n                       p::NamedTuple,\n                       t,\n                       )::ClimaCore.Fields.Field\n\nA method of boundary fluxes which returns the desired water volume flux for  the RichardsModel, at the top of the domain, in the case of a prescribed  precipitation flux.\n\nIf model.runoff is not of type NoRunoff, surface runoff is accounted for when computing the infiltration.\n\n\n\n\n\nClimaLSM.boundary_flux(rre_bc::MoistureStateBC,\n                       ::ClimaLSM.TopBoundary,\n                       model::AbstractSoilModel,\n                       Δz::ClimaCore.Fields.Field,\n                       Y::ClimaCore.Fields.FieldVector,\n                       p::NamedTuple,\n                       t,\n                       )::ClimaCore.Fields.Field\n\nA method of boundary fluxes which converts a state boundary condition on θ_l at the top of the domain into a flux of liquid water.\n\n\n\n\n\nClimaLSM.boundary_flux(rre_bc::MoistureStateBC,\n                       ::ClimaLSM.BottomBoundary,\n                       model::AbstractSoilModel,\n                       Δz::ClimaCore.Fields.Field,\n                       Y::ClimaCore.Fields.FieldVector,\n                       p::NamedTuple,\n                       t,\n                       )::ClimaCore.Fields.Field\n\nA method of boundary fluxes which converts a state boundary condition on θ_l at the bottom of the domain into a flux of liquid water.\n\n\n\n\n\nClimaLSM.boundary_flux(heat_bc::TemperatureStateBC,\n                       ::ClimaLSM.TopBoundary,\n                       model::EnergyHydrology,\n                       Δz::ClimaCore.Fields.Field,\n                       Y::ClimaCore.Fields.FieldVector,\n                       p::NamedTuple,\n                       t,\n                       )::ClimaCore.Fields.Field\n\nA method of boundary fluxes which converts a state boundary condition on temperature at the top of the domain into a flux of energy.\n\n\n\n\n\nClimaLSM.boundary_flux(heat_bc::TemperatureStateBC,\n                       ::ClimaLSM.BottomBoundary,\n                       model::EnergyHydrology,\n                       Δz::ClimaCore.Fields.Field,\n                       Y::ClimaCore.Fields.FieldVector,\n                       p::NamedTuple,\n                       t,\n                       )::ClimaCore.Fields.Field\n\nA method of boundary fluxes which converts a state boundary condition on temperature at the bottom of the domain into a flux of energy.\n\n\n\n\n\nClimaLSM.boundary_flux(bc::FreeDrainage,\n                       boundary::ClimaLSM.BottomBoundary,\n                       model::AbstractSoilModel,\n                       Δz::ClimaCore.Fields.Field,\n                       Y::ClimaCore.Fields.FieldVector,\n                       p::NamedTuple,\n                       t,\n                       )::ClimaCore.Fields.Field\n\nA method of boundary fluxes which enforces free drainage at the bottom of the domain.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.diffusive_flux","page":"Shared Utilities","title":"ClimaLSM.diffusive_flux","text":"diffusive_flux(K, x_2, x_1, Δz)\n\nCalculates the diffusive flux of a quantity x (water content, temp, etc). Here, x2 = x(z + Δz) and x1 = x(z), so x_2 is at a larger z by convention.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.get_Δz","page":"Shared Utilities","title":"ClimaLSM.get_Δz","text":"get_Δz(z::ClimaCore.Fields.Field)\n\nA function to return a tuple containing the distance between the top boundary and its closest center, and the bottom boundary and its closest center,  both as Fields.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.make_tendency_jacobian","page":"Shared Utilities","title":"ClimaLSM.make_tendency_jacobian","text":"maketendencyjacobian(model::AbstractModel)\n\nCreates and returns a function which updates the auxiliary variables p in place and then updates the entries of the Jacobian matrix W for the model in place.\n\nThe default is that no updates are required, no implicit tendency is present, and hence the timestepping is entirely explicit.\n\nNote that the returned function tendency_jacobian! should be used as Wfact! in ClimaTimeSteppers.jl and SciMLBase.jl.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.make_update_jacobian","page":"Shared Utilities","title":"ClimaLSM.make_update_jacobian","text":"make_update_jacobian(model::AbstractModel)\n\nCreates and returns a function which updates the entries of the Jacobian matrix W in place.\n\nIf the implicit tendency function is given by T!(dY, Y, p, t) = make_implicit_tendency(model), the Jacobian should be given by W_{i,j}! = ∂T!_i/∂Y_j, where Y_j is the j-th state variable and T!_i is the implicit tendency of the i-th state variable.\n\nThe default is that no updates are required, no implicit tendency is present, and hence the timestepping is entirely explicit.\n\n\n\n\n\nClimaLSM.make_update_jacobian(model::RichardsModel)\n\nCreates and returns the update_jacobian! function for RichardsModel.\n\nUsing this Jacobian with a backwards Euler timestepper is equivalent to using the modified Picard scheme of Celia et al. (1990).\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.∂tendencyBC∂Y","page":"Shared Utilities","title":"ClimaLSM.∂tendencyBC∂Y","text":"∂tendencyBC∂Y(::AbstractModel,\n              ::AbstractBC,\n              ::AbstractBoundary,\n              _...)::Union{ClimaCore.Fields.FieldVector, Nothing}\n\nA function stub which returns the derivative of the implicit tendency term of the model arising from the boundary condition, with respect to the state Y.\n\n\n\n\n\nClimaLSM.∂tendencyBC∂Y(\n    model::RichardsModel,\n    ::MoistureStateBC,\n    boundary::ClimaLSM.TopBoundary,\n    Δz,\n    Y,\n    p,\n    t,\n\n)\n\nComputes and returns the derivative of the part of the implicit tendency in the top layer, due to the boundary condition, with respect to the state variable in the top layer.\n\nFor a diffusion equation like Richards equation with a single state variable, this is given by ∂T_N∂Y_N = [-∂/∂z(∂F_bc/∂Y_N)]_N, where N indicates the top  layer cell index.\n\n\n\n\n\nClimaLSM.∂tendencyBC∂Y(\n    ::AbstractSoilModel,\n    ::AbstractSoilBC,\n    boundary::ClimaLSM.TopBoundary,\n    Δz,\n    Y,\n    p,\n    t,\n\n)\n\nA default method which computes and returns the zero for the  derivative of the part of the implicit tendency in the top layer, due to the boundary condition, with respect to the state variable in the top layer.\n\nFor a diffusion equation like Richards equation with a single state variable, this is given by ∂T_N∂Y_N = [-∂/∂z(∂F_bc/∂Y_N)]_N, where N indicates the top  layer cell index.\n\nIf F_bc can be approximated as independent of Y_N, the derivative  is zero.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.AbstractTridiagonalW","page":"Shared Utilities","title":"ClimaLSM.AbstractTridiagonalW","text":"AbstractTridiagonalW\n\nAn abstract type for tridiagonal Jacobian matrices.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#Drivers","page":"Shared Utilities","title":"Drivers","text":"","category":"section"},{"location":"APIs/shared_utilities/","page":"Shared Utilities","title":"Shared Utilities","text":"ClimaLSM.PrescribedAtmosphere\nClimaLSM.PrescribedRadiativeFluxes\nClimaLSM.AbstractAtmosphericDrivers\nClimaLSM.AbstractRadiativeDrivers\nClimaLSM.surface_fluxes_at_a_point\nClimaLSM.radiative_fluxes_at_a_point\nClimaLSM.construct_atmos_ts\nClimaLSM.surface_air_density\nClimaLSM.liquid_precipitation\nClimaLSM.snow_precipitation\nClimaLSM.surface_temperature\nClimaLSM.surface_resistance\nClimaLSM.surface_specific_humidity","category":"page"},{"location":"APIs/shared_utilities/#ClimaLSM.PrescribedAtmosphere","page":"Shared Utilities","title":"ClimaLSM.PrescribedAtmosphere","text":"PrescribedAtmosphere{FT, LP, SP, TA, UA, QA, RA, CA, DT} <: AbstractAtmosphericDrivers{FT}\n\nContainer for holding prescribed atmospheric drivers and other information needed for computing turbulent surface fluxes when driving land models in standalone mode.\n\nSince not all models require co2 concentration, the default for that is nothing.\n\nliquid_precip: Precipitation (m/s) function of time: positive by definition\nsnow_precip: Snow precipitation (m/s) function of time: positive by definition\nT: Prescribed atmospheric temperature (function of time)  at the reference height (K)\nu: Prescribed wind speed (function of time)  at the reference height (m/s)\nq: Prescribed specific humidity (function of time)  at the reference height (_)\nP: Prescribed air pressure (function of time)  at the reference height (Pa)\nc_co2: CO2 concentration in atmosphere (mol/mol)\nref_time: Reference time - the datetime corresponding to t=0 for the simulation\nh: Reference height (m), relative to surface elevation\ngustiness: Minimum wind speed (gustiness; m/s)\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.PrescribedRadiativeFluxes","page":"Shared Utilities","title":"ClimaLSM.PrescribedRadiativeFluxes","text":"PrescribedRadiativeFluxes{FT, SW, LW, DT, T, OD} <: AbstractRadiativeDrivers{FT}\n\nContainer for the prescribed radiation functions needed to drive land models in standalone mode.\n\nSW_d: Downward shortwave radiation function of time (W/m^2): positive indicates towards surface\nLW_d: Downward longwave radiation function of time (W/m^2): positive indicates towards surface\nref_time: Reference time - the datetime corresponding to t=0 for the simulation\nθs: Sun zenith angle, in radians\norbital_data: Orbital Data for Insolation.jl\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.AbstractAtmosphericDrivers","page":"Shared Utilities","title":"ClimaLSM.AbstractAtmosphericDrivers","text":" AbstractAtmosphericDrivers{FT <: AbstractFloat}\n\nAn abstract type of atmospheric drivers of land models.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.AbstractRadiativeDrivers","page":"Shared Utilities","title":"ClimaLSM.AbstractRadiativeDrivers","text":" AbstractRadiativeDrivers{FT <: AbstractFloat}\n\nAn abstract type of radiative drivers of land models.\n\n\n\n\n\n","category":"type"},{"location":"APIs/shared_utilities/#ClimaLSM.surface_fluxes_at_a_point","page":"Shared Utilities","title":"ClimaLSM.surface_fluxes_at_a_point","text":"surface_fluxes_at_a_point(T_sfc::FT,\n                          q_sfc::FT,\n                          ρ_sfc::FT,\n                          β_sfc::FT,\n                          h_sfc::FT,\n                          r_sfc::FT,\n                          t::FT,\n                          parameters,\n                          atmos::PA,\n                          ) where {FT <: AbstractFloat, PA <: PrescribedAtmosphere{FT}}\n\nComputes turbulent surface fluxes at a point on a surface given (1) the surface temperature, specific humidity, and air density, (2) the time at which the fluxes are needed, (3) a factor βsfc  which scales the evaporation from the potential rate     (used in bucket models), and/or the surface resistance rsfc (used     in more complex land models), (4) the parameter set for the model, which must have fields earth_param_set, and roughness lengths z_0m, z_0b. (5) the prescribed atmospheric state, stored in atmos.\n\nThis returns an energy flux and a liquid water volume flux, stored in a tuple with self explanatory keys.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.construct_atmos_ts","page":"Shared Utilities","title":"ClimaLSM.construct_atmos_ts","text":"construct_atmos_ts(\n    atmos::PrescribedAtmosphere,\n    t::FT,\n    thermo_params,\n) where {FT}\n\nA helper function which constructs a Clima.Thermodynamics thermodynamic state given a PrescribedAtmosphere, a time at which the state is needed, and a set of Clima.Thermodynamics parameters thermo_params.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.surface_air_density","page":"Shared Utilities","title":"ClimaLSM.surface_air_density","text":"ClimaLSM.surface_air_density(model::BucketModel, Y, p)\n\na helper function which computes and returns the surface air density for the bucket model.\n\n\n\n\n\nsurface_air_density(\n                    atmos::AbstractAtmosphericDrivers,\n                    model::AbstractModel,\n                    Y,\n                    p,\n                    t,\n                    T_sfc,\n                    )\n\nA helper function which returns the surface air density for a given model, needed because different models compute and store surface air density  in different ways and places.\n\nWe additionally include the atmos type as an argument because the surface air density computation may change between a coupled simulation and a prescibed atmos simulation.\n\nExtending this function for your model is only necessary if you need to compute surface fluxes and radiative fluxes at the surface using the functions in this file.\n\n\n\n\n\nClimaLSM.surface_air_density(model::CanopyModel, Y, p)\n\nA helper function which computes and returns the surface air density for the canopy model.\n\n\n\n\n\nClimaLSM.surface_air_density(\n    atmos::PrescribedAtmosphere{FT},\n    model::EnergyHydrology{FT},\n    Y,\n    p,\n    t,\n    T_sfc\n) where {FT}\n\nReturns the surface air density field of the EnergyHydrology soil model for the PrescribedAtmosphere case.\n\nThis assumes the ideal gas law and hydrostatic balance to estimate the air density at the surface from the values of surface temperature and the atmospheric thermodynamic state, because the surface air density is not a prognostic variable of the soil model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.liquid_precipitation","page":"Shared Utilities","title":"ClimaLSM.liquid_precipitation","text":"liquid_precipitation(atmos::PrescribedAtmosphere, p, t)\n\nReturns the liquid precipitation (m/s) at the surface.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.snow_precipitation","page":"Shared Utilities","title":"ClimaLSM.snow_precipitation","text":"snow_precipitation(atmos::PrescribedAtmosphere, p, t)\n\nReturns the precipitation in snow (m of liquid water/s) at the surface.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.surface_temperature","page":"Shared Utilities","title":"ClimaLSM.surface_temperature","text":"ClimaLSM.surface_temperature(model::BucketModel, Y, p)\n\na helper function which returns the surface temperature for the bucket model, which is stored in the aux state.\n\n\n\n\n\nsurface_temperature(model::AbstractModel, Y, p, t)\n\nA helper function which returns the surface temperature for a given model, needed because different models compute and store surface temperature in different ways and places.\n\nExtending this function for your model is only necessary if you need to compute surface fluxes and radiative fluxes at the surface using the functions in this file.\n\n\n\n\n\nClimaLSM.surface_temperature(model::CanopyModel, Y, p, t)\n\nA helper function which returns the surface temperature for the canopy model, which is stored in the aux state.\n\n\n\n\n\nClimaLSM.surface_temperature(\n    model::EnergyHydrology{FT},\n    Y,\n    p,\n    t,\n) where {FT}\n\nReturns the surface temperature field of the EnergyHydrology soil model.\n\nThe assumption is that the soil surface temperature is the same as the temperature at the center of the first soil layer.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.surface_resistance","page":"Shared Utilities","title":"ClimaLSM.surface_resistance","text":"surface_resistance(model::AbstractModel, Y, p, t)\n\nA helper function which returns the surface resistance for a given model, needed because different models compute and store surface resistance in different ways and places.\n\nExtending this function for your model is only necessary if you need to compute surface fluxes and radiative fluxes at the surface using the functions in this file.\n\nThe default is 0, which is no additional resistance aside from the usual aerodynamic resistance from MOST.\n\n\n\n\n\nClimaLSM.surface_resistance(\n    model::CanopyModel{FT},\n    Y,\n    p,\n    t,\n) where {FT}\n\nReturns the surface resistance field of the CanopyModel canopy.\n\n\n\n\n\nClimaLSM.surface_resistance(\n    model::EnergyHydrology{FT},\n    Y,\n    p,\n    t,\n) where {FT}\n\nReturns the surface resistance field of the EnergyHydrology soil model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/shared_utilities/#ClimaLSM.surface_specific_humidity","page":"Shared Utilities","title":"ClimaLSM.surface_specific_humidity","text":"ClimaLSM.surface_specific_humidity(model::BucketModel, Y, p)\n\na helper function which returns the surface specific humidity for the bucket model, which is stored in the aux state.\n\n\n\n\n\nsurface_specific_humidity(model::AbstractModel, Y, p, T_sfc, ρ_sfc)\n\nA helper function which returns the surface specific humidity for a given model, needed because different models compute and store q_sfc in different ways and places.\n\nExtending this function for your model is only necessary if you need to compute surface fluxes and radiative fluxes at the surface using the functions in this file.\n\n\n\n\n\nClimaLSM.surface_specific_humidity(model::CanopyModel, Y, p)\n\nA helper function which returns the surface specific humidity for the canopy model, which is stored in the aux state.\n\n\n\n\n\nClimaLSM.surface_specific_humidity(\n    model::EnergyHydrology{FT},\n    Y,\n    p,\n    T_sfc,\n    ρ_sfc\n) where {FT}\n\nReturns the surface specific humidity field of the EnergyHydrology soil model.\n\nThis models the surface specific humidity as the saturated value multiplied by the factor exp(ψ_sfc g M_w/(RT_sfc)) in accordance with the Clausius-Clapeyron equation, where ψ_sfc is the matric potential at the surface, T_sfc the surface temperature, g the gravitational acceleration on the surface of the Earth, M_w the molar mass of water, and R the universal gas constant.\n\n\n\n\n\n","category":"function"},{"location":"folderstructure/#ClimaLSM-folder-structure","page":"Repository structure","title":"ClimaLSM folder structure","text":"","category":"section"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"ClimaLSM home directory has 5 main folders:","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"docs: contains files to generate the documentation website.  \nexperiments: contains simple runs of ClimaLSM models. \nparameters: contains a file to retrieve constants such as avogadro's number, the speed of light, etc. \nsrc: contains the code of ClimaLSM models. \ntest: contains unit tests, which are meant to ensure small pieces of ClimaLSM source code work as intended before merging pull requests.","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"and 3 GitHub actions folders. GitHub actions are .yml files, which are bash scripts that runs on a remote computer on each git push. ","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":".buildkite: contains a script building outputs such as figures from experiments and tests folders. These runs are carried out as part of CI and must run without error in order to merge a PR. \n.dev: contains useful tools for developers, such as a format checker for Julia (which is run as part of CI and must pass before a PR can be merged into main). \n.github: contains various scripts, for example, this documentation website is built each time a change is push to ClimaLSM. ","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"as well as 5 files:","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":".gitignore: commonly used git file, contains files, files type, and folders that should be ignored by git. \nLICENSE: License file of ClimaLSM, you can read it to learn about legal practice regarding use of ClimaLSM open source code. \nProject.toml: The Julia programming language requires a Project.toml file to create an environment, which specify dependencies of a project as well as its version, name, authors and a unique identifier number (uuid). Every Julia registered package has a Project.toml file. \nREADME.md: This markdown file contains the info that you can read on ClimaLSM GitHub web page\nbors.toml: This file ensure unit tests and other continuous integration requirements are met before merging a pull request to ClimaLSM main branch. ","category":"page"},{"location":"folderstructure/#/docs-folder","page":"Repository structure","title":"/docs folder","text":"","category":"section"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"Julia packages are recommended to have a \\docs folder that builds a standardised documentation following the official documentation generator for Julia: Documenter.jl.","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"The folder /docs contains:","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"a /src folder: It is recommended to put your markdown pages inside this folder. Each markdown file (.md extension text file) is a page accessible through the menu of the documentation. For example, docs/src/Contributing.md contains the text you can read on the documentation \"contribution guide\" menu. The path to this .md file and the name of the menu is set in the docs/make.jl file. \na make.jl file: This Julia file contains your documentation website structure. Running this file will build your website pages, you can run it locally, but it is commonly built remotely via .github/workflows/docs.yml to generate the github static page hosted on the gh-pages branch. ","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"Note: the documentation can have submenu. For example, APIs have submenu ClimaLSM which has many submenu... This structure is built in our current framework via a file docs/list_of_apis.jl in that example, which is then included in docs/make.jl.   ","category":"page"},{"location":"folderstructure/#/experiments-folder","page":"Repository structure","title":"/experiments folder","text":"","category":"section"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"The experiments folder contains scripts to run ClimaLSM models. It contains a folder for integrated models and a folder for standalone models. It is meant to provide users with simple examples of ClimaLSM runs. The files contains meteorological inputs (such as precipitation), values for every parameters, and the domains and timestepper are specified. ","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"For example, /experiments/LSM/ozark/ contains:","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"ozark_domain.jl: Describes the soil domain (depth, number of layer), and the canopy (number and height of stems and leaves).\nozarkmetdrivers_FLUXNET.jl: This files load meteorological input data from the ozark FLUXNET file, and does additional things such as spline interpolation of these drivers.\nozark_parameters.jl: In this file, parameters values are defined. \nozark_simulation.jl: In this file, initial and final time are set, as well as time resolution and time stepper algorithm. \nozark.jl: running this script will include all the above scripts, and run ClimaLSM for the single-site ozark. It will produce output in a text file as well as some figures comparing data and simulation.","category":"page"},{"location":"folderstructure/#/src-folder","page":"Repository structure","title":"/src folder","text":"","category":"section"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"The /src folder contains the source code of ClimaLSM models. It contains 3 folders:","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"sharedutilities: This is a core folder that defines functions and data structures used across all modules and models types of ClimaLSM. For example, `sharedutilities/models.jldefines and export the functionmakeupdateauxwhich will be used to create a function which updates the auxiliary parameters, stored in the vectorp,sharedutilities/boundaryconditions.jl` defines functions for setting boundary condition for PDE domains, etc.\nstandalone: This folder contains standalone models, which are submodels that can be run independently of each other. This is an important aspect of ClimaLSM code design: to maximise modularity, sub-models can be run alone, and many different methods of the same sub-model can be defined via Julia multiple-disptach. The standalone folder is independent from the integrated folder. \nintegrated: This folder contains integrated models. It assembles standalone models together, as one would assemble pieces of a puzzle. Thanks to the modularity of ClimaLSM design, many configuration of LSM can be assembled in integrated models. The same functions (update_aux!, exp_tendency!, etc.) can be used for standalone and integrated models, and an can be stepped  in the same way.","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"As well as one file:","category":"page"},{"location":"folderstructure/","page":"Repository structure","title":"Repository structure","text":"ClimaLSM.jl: This file is the main Julia module of ClimaLSM.jl repository. It contains all functions defined in /src in a nested way, for example ClimaLSM.X, ClimaLSM.Soil.X, 'ClimaLSM.Canopy.X, etc. When a Julia user install and uses ClimaLSM via]add ClimaLSM, using ClimaLSM`, they are loading those functions, and are ready to use ClimaLSM codebase. ","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The AbstractModel tutorial describes how a user can run simulations of a physical system governed by differential equations. In this framework, the user must define a model type for their problem, which contains all of the information required to set up the system of equations. By extending the methods for make_compute_exp_tendency(model), prognostic_variables(model), etc, the information stored in the model is used to make the system of equations. Given initial conditions, these equations can then be stepped forward in time using the time-stepper of your choice (we are set up to use SciMLBase.jl currently). Note that a model requiring implicit timestepping would instead use an AbstractImExModel framework.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The benefit of this framework is that it can be used for both individual components of an LSM (soil, snow, rivers, canopy biophysics, carbon...) as well as the LSM itself. Here we explain how a simple single column two component model can be set up using this software interface. Additionally, we demonstrate here the use of the auxiliary or cache variables, which were mentioned but not needed in the Henon-Heiles problem solved in the prior tutorial.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We'll first demonstrate how to set up two components in standalone mode, before spending time explaining the LSM setup. In our example, we have a component which accounts for soil hydrology via the Richardson-Richards (RR) equation.  Our second component is a surface water model without lateral flow (standing water, as in a pond). For more details on these models, and how they were set up, please feel free to look at the source code here and here. This tutorial focuses on using the AbstractModels framework to set up the equations, rather than on running simulations.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"First, let's load the required modules:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"using ClimaLSM\nusing ClimaLSM.Domains: Column, obtain_surface_domain\nusing ClimaLSM.Soil\nusing ClimaLSM.Pond\n\nFT = Float64;","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/#The-individual-component-models-I-Soil-Hydrology","page":"Intro to multi-component models","title":"The individual component models I - Soil Hydrology","text":"","category":"section"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The RR equation for the volumetric water content of soil is given by","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"fracpartial ϑpartial t = -  (-K(ψ+z)) + S(xyz t)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"In order to solve this, one must specify:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"boundary conditions,\nrelevant parameters (closure models for K and ψ),\na domain and a spatial discretization scheme,\nadditional source terms S, if applicable,\na time-stepping algorithm,\ninitial conditions.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We make the distinction between the spatially discretized equations (for which you need parameters, boundary conditions, source terms, and domain/ discretization scheme information in order to write down and evaluate), and the simulation you want to run (for which you need the equations, initial conditions, a time span, and a time-stepping scheme in order to specify completely).","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Here, we'll focus on what you need to write the equations. In the design of all CliMA systems, everything you need to write the equations is stored in the model structure itself, so that we can call make_exp_tendency(model) and get back a function which computes the time derivative of the prognostic variables, which the ODE timestepper needs to advance the state forward in time.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"For the RR equation, we can create this as follows. First, we specify parameters:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"ν = FT(0.495);\nK_sat = FT(0.0443 / 3600 / 100); # m/s\nS_s = FT(1e-3); #inverse meters\nvg_n = FT(2.0);\nvg_α = FT(2.6); # inverse meters\nhcm = vanGenuchten(; α = vg_α, n = vg_n);\nθ_r = FT(0);\nsoil_ps = Soil.RichardsParameters(;\n    ν = ν,\n    hydrology_cm = hcm,\n    K_sat = K_sat,\n    S_s = S_s,\n    θ_r = θ_r,\n);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Next, let's define the spatial domain and discretization:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"zmax = FT(0);\nzmin = FT(-1);\nnelems = 20;\nsoil_domain = Column(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"And boundary conditions and source terms (none currently):","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"top_flux_bc = FluxBC((p, t) -> eltype(t)(0.0))\nbot_flux_bc = FluxBC((p, t) -> eltype(t)(0.0))\nsources = ()\nboundary_fluxes =\n    (; top = (water = top_flux_bc,), bottom = (water = bot_flux_bc,))","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(top = (water = ClimaLSM.Soil.FluxBC(Main.var\"##292\".var\"#1#2\"()),), bottom = (water = ClimaLSM.Soil.FluxBC(Main.var\"##292\".var\"#3#4\"()),))","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"With this information, we can make our model:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"soil = Soil.RichardsModel{FT}(;\n    parameters = soil_ps,\n    domain = soil_domain,\n    boundary_conditions = boundary_fluxes,\n    sources = sources,\n);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We also can create the soil prognostic and auxiliary ClimaCore.Field.FieldVectors using the default method for initialize,","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Y_soil, p_soil, coords_soil = initialize(soil);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and we can set up the tendency function using the default as well,","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"soil_ode! = make_exp_tendency(soil);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"which computes, for the column domain,","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"-frac z (-Kfrac(ψ+z) z)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"for each value of ϑ on the mesh of our soil_domain.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Note that the soil model does include both hydraulic K and pressure head ψ in the auxiliary vector, so the fields p_soil.soil.K and p_soil.soil.ψ are present. These are automatically updated first in each call to soil_ode!, as follows:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function soil_ode!(dY, Y, p, t)\n         update_aux!(p,Y,t)\n         compute_exp_tendency!(dY, Y, p, t)\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"where update_aux! updates K, and ψ, in p, in place, and compute_exp_tendency! computes the divergence of the Darcy flux, using the updated p, and then updates dY in place with the computed values. For this reason, the p vector does not need to be set to some initial condition consistent with Y_soil.soil.ϑ(t=0) before starting a simulation, though initial conditions must be given for Y.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Note also that we have defined methods make_compute_exp_tendency and make_update_aux, which only take the model as argument, and which return the functions compute_exp_tendency! and update_aux!, here and here.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Lastly, the coordinates returned by initialize contain the z-coordinates of the centers of the finite difference layers used for spatial discretization of the PDE.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/#The-individual-component-models-II-Surface-Water","page":"Intro to multi-component models","title":"The individual component models II - Surface Water","text":"","category":"section"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The pond model has a single variable, the pond height η, which satisfies the ODE:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"frac η t = -(P - I) = R","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"where P is the precipitation, I the infiltration into the soil, and R is the runoff. Note that P, I < 0 indicates flow in the -ẑ direction.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"To write down the pond equations, we need to specify","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"P\nI","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"which are akin to boundary conditions. In standalone mode,  one would need to pass in prescribed functions of time and store them inside our pond model, since again, the pond model structure must contain everything needed to make the tendency function:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"precipitation(t::T) where {T} = t < T(20) ? -T(1e-5) : T(0.0) # m/s\n\ninfiltration(t::T) where {T} = -T(1e-6) #m/s\npond_model = Pond.PondModel{FT}(;\n    runoff = PrescribedRunoff{FT}(precipitation, infiltration),\n);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Here, PrescribedRunoff is the structure holding the prescribed driving functions for P and I.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Again we can initialize the state vector and auxiliary vectors:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Y_pond, p_pond, coords_pond = initialize(pond_model);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We can make the tendency function in the same way, for stepping the state forward in time:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"pond_ode! = make_exp_tendency(pond_model);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The pond_ode! function works in the same way as for the soil model:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function pond_ode!(dY, Y, p, t)\n         update_aux!(p,Y,t)\n         compute_exp_tendency!(dY, Y, p, t)\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"but the update_aux! does not alter p at all in this case. The pond model does not have auxiliary variables, so p_pond is empty.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The coordinates here are relatively meaningless - we are solving for the pond height at a point in space on the surface of the Earth, and by default this assigns a Point domain, with a coordinate of z_sfc = 0. In a simulation with horizontal resolution, the coordinates returned would be the (x,y,z=z_sfc(x,y)) coordinates of the surface, which are more useful.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/#An-LSM-with-pond-and-soil:","page":"Intro to multi-component models","title":"An LSM with pond and soil:","text":"","category":"section"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The LSM model must contain everything needed to write down the joint system of equations","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"fracpartial etapartial t = -(P(t) - I(ϑ η P)) = R","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"fracpartial ϑpartial t = -  (-K(ψ+z)) + S","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"-K (ψ+z)_z = zmax   z = I(ϑ η P)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"-K (ψ+z)_z = zmin   z = 00","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"These two components interact via the infiltration term I. Infiltration is a boundary condition for the soil, and affects the source term for the surface water equation. Infiltration depends on precipitation, the soil moisture state, and the pond height.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"As in the standalone cases, defining our model requires specifying","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"parameters,\ndomains, discretizations\nprecipitation,\nboundary conditions,\nsources in the soil equation, if any.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"First, let's make our  domain, which now contains information about the subsurface domain and the surface domain. For a single column, this means specifying the boundaries of the soil domain and the number of elements.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"lsm_domain = Column(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The surface domain is just a Point with z_sfc = zmax.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"surface_domain = obtain_surface_domain(lsm_domain)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"ClimaLSM.Domains.Point{Float64}(0.0, (surface = ClimaCore.Spaces.PointSpace{ClimaCore.DataLayouts.DataF{ClimaCore.Geometry.LocalGeometry{(3,), ClimaCore.Geometry.ZPoint{Float64}, Float64, StaticArraysCore.SMatrix{1, 1, Float64, 1}}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}}(ClimaCore.DataLayouts.DataF{ClimaCore.Geometry.LocalGeometry{(3,), ClimaCore.Geometry.ZPoint{Float64}, Float64, StaticArraysCore.SMatrix{1, 1, Float64, 1}}, SubArray{Float64, 1, Matrix{Float64}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}\n  [0.0, 0.05, 0.025, 20.0, 0.05, 20.0, 400.0, 0.0025]),))","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The subsurface domain is the column itself.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Let's now collect the needed arguments for the soil and pond models:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"soil_args = (parameters = soil_ps, domain = lsm_domain, sources = ());\nsurface_water_args = (domain = surface_domain,);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Atmospheric drivers don't \"belong\" to either component alone:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"land_args = (precip = precipitation,);\nland = LandHydrology{FT}(;\n    land_args = land_args,\n    soil_model_type = Soil.RichardsModel{FT},\n    soil_args = soil_args,\n    surface_water_model_type = Pond.PondModel{FT},\n    surface_water_args = surface_water_args,\n);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Here, LandHydrology is a type of AbstractModel which has a surface water model (Pond or otherwise) and a soil model (RR, or perhaps otherwise). Note that we pass in the type of the soil and surface water model - these could be more complex, e.g. a river model with lateral flow could be used in place of the Pond. We could also add in a snow component.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Now, note that we did not specify the infiltration function, like we did in standalone pond mode, nor did we specify boundary conditions for the soil model. Yet, before we stressed that the model needs to have everything required to write down and evaluate the time derivative of the ODEs. So, how does this work?","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Here, the LSM model constructor is given the information needed to make both the soil model and the pond model. Then, it is like running the pond and soil model in standalone mode, in series, except we have defined methods internally for computing the boundary condition and pond source term correctly, based on I, instead of using prescribed values passed in. The LSM constructor creates the correct boundary_fluxes object for the soil model, and the correct infiltration object for the pond model under the hood.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"To advance the state of the joint system (ϑ, η) from time t to time t+Δt, we must compute the infiltration at t. This value is stored in p.soil_infiltration, and reflects a proper use of the auxiliary or cache state: storing a quantity which we would rather compute once and store, rather than compute twice, once in the soil tendency function, and once in the pond tendency function. This guarantees the same value is used for both equations. In pseudo code, we have:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function make_update_aux(land)\n         soil_update_aux! = make_update_aux(land.soil)\n         surface_update_aux! = make_update_aux(land.surface_water)\n         interactions_update_aux! = make_update_aux(land, land.soil, land.surface_water)\n         function update_aux!(p,Y,t)\n                  surface_update_aux!(p,Y,t) # does nothing to `p`\n                  soil_update_aux!(p,Y,t) # updates p.soil.K and p.soil.ψ\n                  interactions_update_aux!(p,Y,t) # updates p.soil_infiltration\n         end\n         return update_aux!\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and similarily for the compute_exp_tendency! functions:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function make_compute_exp_tendency(land)\n         soil_compute_exp_tendency! = make_update_aux(land.soil)\n         surface_compute_exp_tendency! = make_update_aux(land.surface_water)\n         function compute_exp_tendency!(dY,Y,p,t)\n                  surface_compute_exp_tendency!(dY,Y,p, t), # computes dY.surface.η\n                  soil_compute_exp_tendency!(dY,Y,p,t) # computes dY.soil.ϑ\n         end\n         return compute_exp_tendency!\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"The exp_tendency! for the land model is then again just","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"function exp_tendency!(dY, Y, p, t)\n         update_aux!(p,Y,t)\n         compute_exp_tendency!(dY, Y, p, t)\nend","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"In the above, we showed explicitly what occurs by hardcoding the compute_exp_tendency!, update_aux! with names for soil and surface_water. In reality, this is done by looping over the components of the land model, meaning that we can use the same code internally for land models with different components.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"A similar composition occurs for initializing the state itself: Calling initialize(land) does four things:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"initialize(land.soil)\ninitialize(land.surface_water)\ninitializes interaction terms, like p.soil_infiltration\nappend these into Y, p, and coords:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Y, p, coords = initialize(land);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"We have volumetric liquid water fraction:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(Y.soil)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(:ϑ_l,)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and surface height of the pond:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(Y.surface_water)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(:η,)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"as well as auxiliary variables for the soil:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(p.soil)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(:K, :ψ)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and nothing for surface water:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(p.surface_water)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"()","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and the shared interaction term","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"propertynames(p)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"(:soil_infiltration, :soil, :surface_water)","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and finally, coordinates - useful for visualization of solutions:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"coords.subsurface","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"ClimaCore.Geometry.ZPoint{Float64}-valued Field:\n  z: [-0.975, -0.925, -0.875, -0.825, -0.775, -0.725, -0.675, -0.625, -0.575, -0.525, -0.475, -0.425, -0.375, -0.325, -0.275, -0.225, -0.175, -0.125, -0.075, -0.025]","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"and the coordinates of the surface variables:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"coords.surface","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"ClimaCore.Geometry.ZPoint{Float64}-valued Field:\n  z: [0.0]","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"And we can make the tendency function as before:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"land_ode! = make_exp_tendency(land);","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Next up would be to set initial conditions, choose a timestepping scheme, and run your simulation.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/#Advantages-and-disadvantages","page":"Intro to multi-component models","title":"Advantages and disadvantages","text":"","category":"section"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Some advantages to our interface design are as follows:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"a developer only needs to learn a few concepts (compute_exp_tendency!, prognostic vs. aux variables, update_aux!, initialize, domains) to make a model which can be run in standalone or work with other components.\nlikewise, a user only needs to learn one interface to run all models, regardless of if they are standalone components or LSMs with multiple componnents.\nthe exp_tendency!is completely seperate from the timestepping scheme used, so any scheme can be used (with the exception of mixed implicit/explicit schemes, which we can't handle yet).\nalthough we wrote it here in a hardwired fashion for surface water and soil, the update_aux!, compute_exp_tendency!, etc. many methods for LSM models generalize to any number and mix of components. One just needs to write a new model type (e.g. BiophysicsModel <: AbstractModel for a vegetation and carbon component model) and the appropriate interaction methods for that model.\nthe order in which the components are treated in the tendency or in update aux does not matter. What matters is that auxiliary/cache variables are updated first, and within this update, interactions are updated last. We assume that the tendency function for a component only needs the entire p and Y.component in making this statement. Similarily, updating the aux variables of a single component does not require interaction variables. Yhis is also the same as saying they can be run in standalone mode.\nthe code is also modular in terms of swapping out a simple component model for a more complex version.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Possible disadvantages to our interface design:","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"Even in standalone model, variables are accessed in a nested way: Y.soil, p.soil, etc, which is excessive.\nTo accomodate the fact that some components involve PDEs, a developer for purely ODE based component does need to at least handle ClimaCore.Field.FieldVectors.\nstandalone models need to play by the rules of AbstractModels, and LSMs need to play by the rules of ClimaLSM.jl.","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"","category":"page"},{"location":"generated/Usage/LSM_single_column_tutorial/","page":"Intro to multi-component models","title":"Intro to multi-component models","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/SoilBiogeochemistry/#Soil-Biogeochemistry","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"CurrentModule = ClimaLSM.Soil.Biogeochemistry","category":"page"},{"location":"APIs/SoilBiogeochemistry/#Model-Structure","page":"Soil Biogeochemistry","title":"Model Structure","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"ClimaLSM.Soil.Biogeochemistry.SoilCO2Model","category":"page"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.SoilCO2Model","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.SoilCO2Model","text":"SoilCO2Model\n\nA model for simulating the production and transport of CO₂ in the soil with dynamic source and diffusion terms.\n\nparameters: the parameter set\ndomain: the soil domain, using ClimaCore.Domains\nboundary_conditions: the boundary conditions, of type AbstractBoundaryConditions\nsources: A tuple of sources, each of type AbstractSource\ndriver:  Drivers\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#Parameter-Structure","page":"Soil Biogeochemistry","title":"Parameter Structure","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"ClimaLSM.Soil.Biogeochemistry.SoilCO2ModelParameters","category":"page"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.SoilCO2ModelParameters","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.SoilCO2ModelParameters","text":"SoilCO2ModelParameters{FT <: AbstractFloat, PSE}\n\nA struct for storing parameters of the SoilCO2Model.\n\nP_sfc: Pressure at the surface of the soil (Pa)\nD_liq: Diffusivity of soil C substrate in liquid (unitless)\nν: Soil porosity (m³ m⁻³)\nθ_a100: Air-filled porosity at soil water potential of -100 cm H₂O (~ 10 Pa)\nD_ref: Diffusion coefficient for CO₂ in air at standard temperature and pressure (m² s⁻¹)\nb: Absolute value of the slope of the line relating log(ψ) versus log(θ) (unitless)\nα_sx: Pre-exponential factor (kg C m-3 s-1)\nEa_sx: Activation energy (J mol-1)\nkM_sx: Michaelis constant (kg C m-3)\nkM_o2: Michaelis constant for O2 (m3 m-3)\nO2_a: Volumetric fraction of O₂ in the soil air, dimensionless\nD_oa: Diffusion coefficient of oxygen in air, dimensionless\np_sx: Fraction of soil carbon that is considered soluble, dimensionless\nearth_param_set: Physical constants used Clima-wide\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#Model-specific-Types","page":"Soil Biogeochemistry","title":"Model-specific Types","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"ClimaLSM.Soil.Biogeochemistry.MicrobeProduction\nClimaLSM.Soil.Biogeochemistry.SoilCO2FluxBC\nClimaLSM.Soil.Biogeochemistry.SoilCO2StateBC\nClimaLSM.Soil.Biogeochemistry.AbstractSoilDriver\nClimaLSM.Soil.Biogeochemistry.SoilDrivers\nClimaLSM.Soil.Biogeochemistry.PrescribedMet\nClimaLSM.Soil.Biogeochemistry.PrescribedSOC","category":"page"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.MicrobeProduction","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.MicrobeProduction","text":"MicrobeProduction{FT} <: AbstractCarbonSource{FT}\n\nStruct for the microbe production of CO2, appearing as a source term in the differential equation.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.SoilCO2FluxBC","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.SoilCO2FluxBC","text":"SoilCO2FluxBC <: AbstractSoilCO2BC\n\nA container holding the CO2 flux boundary condition, which is a function f(p,t), where p is the auxiliary state vector.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.SoilCO2StateBC","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.SoilCO2StateBC","text":"SoilCO2StateBC <: AbstractSoilCO2BC\n\nA container holding the CO2 state boundary condition (kg CO2 m−3), which is a function f(p,t), where p is the auxiliary state vector.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.AbstractSoilDriver","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.AbstractSoilDriver","text":"AbstractSoilDriver\n\nAn abstract type for drivers of soil CO2 production. These are soil temperature, soil moisture, root carbon, soil organic matter and microbe carbon. All varying in space (horizontally and vertically) and time.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.SoilDrivers","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.SoilDrivers","text":"SoilDrivers\n\nA container which passes in the soil drivers to the biogeochemistry model. These drivers are either of type Prescribed (for standalone mode) or Prognostic (for running with a prognostic model for soil temp and moisture).\n\nmet: Soil temperature and moisture drivers - Prescribed or Prognostic\nsoc: Soil SOM driver - Prescribed only\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.PrescribedMet","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.PrescribedMet","text":"PrescribedMet <: AbstractSoilDriver\n\nA container which holds the prescribed functions for soil temperature and moisture.\n\nThis is meant for use when running the biogeochemistry model in standalone mode, without a prognostic soil model.\n\ntemperature: The temperature of the soil, of the form f(z::FT,t::FT) where FT <: AbstractFloat\nvolumetric_liquid_fraction: Soil moisture, of the form f(z::FT,t::FT) FT <: AbstractFloat\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.PrescribedSOC","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.PrescribedSOC","text":"PrescribedSOC <: AbstractSoilDriver\n\nA container which holds the prescribed function for soil organic carbon\n\nThis is meant for use when running the biogeochemistry model without a soil organic carbon model.\n\nsoil_organic_carbon: Carbon content of soil organic matter, of the form f(z::FT,t::FT) where FT <: AbstractFloat\n\n\n\n\n\n","category":"type"},{"location":"APIs/SoilBiogeochemistry/#Functions-of-State","page":"Soil Biogeochemistry","title":"Functions of State","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"ClimaLSM.Soil.Biogeochemistry.volumetric_air_content\nClimaLSM.Soil.Biogeochemistry.co2_diffusivity\nClimaLSM.Soil.Biogeochemistry.microbe_source","category":"page"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.volumetric_air_content","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.volumetric_air_content","text":"volumetric_air_content(θ_w::FT,\n                       params::SoilCO2ModelParameters{FT}\n                       ) where {FT}\n\nComputes the volumetric air content (θ_a) in the soil,  which is related to the total soil porosity (ν) and  volumetric soil water content (θ_w = θ_l+θ_i).\n\n\n\n\n\n","category":"function"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.co2_diffusivity","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.co2_diffusivity","text":"co2_diffusivity(\n                T_soil::FT,\n                θ_w::FT,\n                params::SoilCO2ModelParameters{FT}\n                ) where {FT}\n\nComputes the diffusivity of CO₂ within the soil (D).\n\nFirst, D0 is computed using the temperature within the soil (T_soil in K) and  pressure at the surface of the soil (P_sfc in Pa), using reference values of T_ref and P_ref (273 K and 101325 Pa). Here, θ_a is the  volumetric air content and θ_a100 is the volumetric air content  at a soil water potential of  100cm, and b is the pore size distribution of the soil.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.microbe_source","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.microbe_source","text":"microbe_source(T_soil::FT,\n               θ_l::FT,\n               Csom::FT,\n               params::SoilCO2ModelParameters{FT}\n               ) where {FT}\n\nComputes the CO₂ production in the soil by microbes, in depth and time (kg C / m^3/s), using the Dual Arrhenius Michaelis Menten model (Davidson et al., 2012).\n\n\n\n\n\n","category":"function"},{"location":"APIs/SoilBiogeochemistry/#Extendible-Functions","page":"Soil Biogeochemistry","title":"Extendible Functions","text":"","category":"section"},{"location":"APIs/SoilBiogeochemistry/","page":"Soil Biogeochemistry","title":"Soil Biogeochemistry","text":"ClimaLSM.Soil.Biogeochemistry.soil_moisture\nClimaLSM.Soil.Biogeochemistry.soil_temperature\nClimaLSM.Soil.Biogeochemistry.soil_SOM_C","category":"page"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.soil_moisture","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.soil_moisture","text":"soil_moisture(driver::PrescribedMet, p, Y, t, z)\n\nReturns the soil moisture at location (z) and time (t) for the prescribed soil case.\n\n\n\n\n\nsoil_moisture(driver::PrognosticSoil, p, Y, t, z)\n\nReturns the volumetric liquid fraction, computed by the soil model from the prognostic liquid and ice fractions.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.soil_temperature","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.soil_temperature","text":"soil_temperature(driver::PrescribedMet, p, Y, t, z)\n\nReturns the soil temperature at location (z) and time (t) for the prescribed soil case.\n\n\n\n\n\nsoil_temperature(driver::PrognosticSoil, p, Y, t, z)\n\nReturns the prognostic soil temperature.\n\n\n\n\n\n","category":"function"},{"location":"APIs/SoilBiogeochemistry/#ClimaLSM.Soil.Biogeochemistry.soil_SOM_C","page":"Soil Biogeochemistry","title":"ClimaLSM.Soil.Biogeochemistry.soil_SOM_C","text":"soil_som_C(driver::PrescribedSOC, p, Y, t, z)\n\nReturns the carbon soil organic matter (SOM) at location (z) and time (t) for the prescribed soil case.\n\n\n\n\n\n","category":"function"},{"location":"Contributing/#Contributing","page":"Contribution guide","title":"Contributing","text":"","category":"section"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"Thank you for contributing to ClimaLSM! We encourage Pull Requests (PRs). Please do not hesitate to ask questions.","category":"page"},{"location":"Contributing/#Some-useful-tips","page":"Contribution guide","title":"Some useful tips","text":"","category":"section"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"When you start working on a new feature branch, make sure you start from main by running: git checkout main.\nMake sure you add tests for your code in test/ and appropriate documentation in the code and/or in docs/. All exported functions and structs must be documented.\nWhen your PR is ready for review, clean up your commit history by squashing and make sure your code is current with ClimateMachine main by rebasing.","category":"page"},{"location":"Contributing/#Continuous-integration","page":"Contribution guide","title":"Continuous integration","text":"","category":"section"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"After rebasing your branch, you can ask for review. Fill out the template and provide a clear summary of what your PR does. When a PR is created or updated, a set of automated tests are run on the PR in our continuous integration (CI) system.","category":"page"},{"location":"Contributing/#Automated-testing","page":"Contribution guide","title":"Automated testing","text":"","category":"section"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"Currently a number of checks are run per commit for a given PR.","category":"page"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"JuliaFormatter checks if the PR is formatted with .dev/climaformat.jl.\nDocumentation rebuilds the documentation for the PR and checks if the docs are consistent and generate valid output.\nTests runs the file test/runtests.jl,  using Pkg.test(). These are a mix of unit tests and fast integration tests.","category":"page"},{"location":"Contributing/","page":"Contribution guide","title":"Contribution guide","text":"We use bors to manage merging PR's in the the ClimaLSM repo. If you're a collaborator and have the necessary permissions, you can type bors try in a comment on a PR to have integration test suite run on that PR, or bors r+ to try and merge the code.  Bors ensures that all integration tests for a given PR always pass before merging into main.","category":"page"},{"location":"APIs/canopy/StomatalConductance/#Stomatal-Conductance","page":"Canopy Stomatal Conductance","title":"Stomatal Conductance","text":"","category":"section"},{"location":"APIs/canopy/StomatalConductance/","page":"Canopy Stomatal Conductance","title":"Canopy Stomatal Conductance","text":"CurrentModule = ClimaLSM.Canopy","category":"page"},{"location":"APIs/canopy/StomatalConductance/#Parameters","page":"Canopy Stomatal Conductance","title":"Parameters","text":"","category":"section"},{"location":"APIs/canopy/StomatalConductance/","page":"Canopy Stomatal Conductance","title":"Canopy Stomatal Conductance","text":"ClimaLSM.Canopy.MedlynConductanceParameters","category":"page"},{"location":"APIs/canopy/StomatalConductance/#ClimaLSM.Canopy.MedlynConductanceParameters","page":"Canopy Stomatal Conductance","title":"ClimaLSM.Canopy.MedlynConductanceParameters","text":"MedlynConductanceParameters{FT <: AbstractFloat}\n\nThe required parameters for the Medlyn stomatal conductance model.\n\nDrel: Relative diffusivity of water vapor (unitless)\ng0: Minimum stomatal conductance mol/m^2/s\ng1: Slope parameter, inversely proportional to the square root of marginal water use efficiency (Pa^{1/2})\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/StomatalConductance/#Methods","page":"Canopy Stomatal Conductance","title":"Methods","text":"","category":"section"},{"location":"APIs/canopy/StomatalConductance/","page":"Canopy Stomatal Conductance","title":"Canopy Stomatal Conductance","text":"ClimaLSM.Canopy.medlyn_term\nClimaLSM.Canopy.medlyn_conductance\nClimaLSM.Canopy.upscale_leaf_conductance\nClimaLSM.Canopy.penman_monteith","category":"page"},{"location":"APIs/canopy/StomatalConductance/#ClimaLSM.Canopy.medlyn_term","page":"Canopy Stomatal Conductance","title":"ClimaLSM.Canopy.medlyn_term","text":"medlyn_term(g1::FT, T_air::FT, P_air::FT, q_air::FT, thermo_params) where {FT}\n\nComputes the Medlyn term, equal to 1+g1/sqrt(VPD), by first computing the VPD, where VPD is the vapor pressure deficit in the atmosphere (Pa), and g_1 is a constant with units of sqrt(Pa).\n\nthermo_params is the Thermodynamics.jl parameter set.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/StomatalConductance/#ClimaLSM.Canopy.medlyn_conductance","page":"Canopy Stomatal Conductance","title":"ClimaLSM.Canopy.medlyn_conductance","text":"medlyn_conductance(g0::FT,\n                   Drel::FT,\n                   medlyn_term::FT,\n                   An::FT,\n                   ca::FT) where {FT}\n\nComputes the stomatal conductance according to Medlyn, as a function of  the minimum stomatal conductance (g0),  the relative diffusivity of water vapor with respect to CO2 (Drel), the Medlyn term (unitless), the biochemical demand for CO2 (An), and the atmospheric concentration of CO2 (ca).\n\nThis returns the conductance in units of mol/m^2/s. It must be converted to  m/s using the molar density of water prior to use in SurfaceFluxes.jl.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/StomatalConductance/#ClimaLSM.Canopy.upscale_leaf_conductance","page":"Canopy Stomatal Conductance","title":"ClimaLSM.Canopy.upscale_leaf_conductance","text":"upscale_leaf_conductance(gs::FT, LAI::FT, T::FT, R::FT, P::FT) where {FT}\n\nThis currently takes a leaf conductance (moles per leaf area per second) and (1) converts it to m/s, (2) upscales to the entire canopy, by assuming the leaves in the canopy are in parallel and hence multiplying by LAI.\n\nTODO: Check what CLM does, and check if we can use the same function  for GPP from An, and make more general.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/StomatalConductance/#ClimaLSM.Canopy.penman_monteith","page":"Canopy Stomatal Conductance","title":"ClimaLSM.Canopy.penman_monteith","text":"penman_monteith(\n    Δ::FT, # Rate of change of saturation vapor pressure with air temperature. (Pa K−1)  \n    Rn::FT, # Net irradiance (W m−2)\n    G::FT, # Ground heat flux (W m−2)\n    ρa::FT, # Dry air density (kg m−3)\n    cp::FT, # Specific heat capacity of air (J kg−1 K−1) \n    VPD::FT, # vapor pressure deficit (Pa)\n    ga::FT, # atmospheric conductance (m s−1)\n    γ::FT, # Psychrometric constant (γ ≈ 66 Pa K−1)\n    gs::FT, # surface or stomatal conductance (m s−1)\n    Lv::FT, # Volumetric latent heat of vaporization (J m-3)\n    ) where {FT}\n\nComputes the evapotranspiration in m/s using the Penman-Monteith equation.       \n\n\n\n\n\n","category":"function"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Usage/domain_tutorial/#Domain-Tutorial","page":"Intro to ClimaLSM Domains","title":"Domain Tutorial","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/#Goals-of-the-tutorial","page":"Intro to ClimaLSM Domains","title":"Goals of the tutorial","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"The goal of this is to outline what is currently implemented in ClimaLSM and to serve as a software design document for future development involving the underlying domains.","category":"page"},{"location":"generated/Usage/domain_tutorial/#Background","page":"Intro to ClimaLSM Domains","title":"Background","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"In both the atmosphere and the ocean, all variables are defined at all locations in the region of interest, or domain.  For example, the air density, temperature, pressure, and wind speed are defined everywhere in the domain. After choosing a resolution and discretizing space, the numerical problem is to advance a system of differential equations, where at each coordinate point a value of ρ, T, P, and u⃗ are solved for at each step. The choice of domain is a question \"only\" of geometry: you may be interested in a large eddy simulation (using a box domain), or in a global model (where you would need a spherical shell domain representing the atmosphere or ocean from some depth to z_sfc = 0).","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"For land surface models, each variable is not defined everywhere in space. For example, the soil water content θ is only defined below ground. Snow water equivalent (S) is only defined on the surface itself. Canopy variables are only defined above ground. Once we have discretized the land surface region into a set of points, the numerical problem is to advance a system of ODEs, where at each coordinate point a different subset of (θ, S, ...) are solved for.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"In other words, different variables in land surface models exist in different, overlapping, domains. We need to decide on the geometry of interest (e.g. single column vs a global simulation), but we also need to specify where each variable of the model is defined.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"ClimaLSM Domains were designed with this in mind. The domains are defined so that","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"the user can easily switch geometries, e.g. single column to global model,\nindividual component models can be run by themselves, using a single domain,\nthe same domains can be used to set up multi-component models (LSMs),\ndifferent variables can exist on different parts of the domain.","category":"page"},{"location":"generated/Usage/domain_tutorial/#What-is-a-ClimaLSM-Domain?","page":"Intro to ClimaLSM Domains","title":"What is a ClimaLSM Domain?","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"A domain represents a region of space. In ClimaLSM, domains are simply structs containing parameters that define these regions - for example an x-range and y-range that define a plane. In addition, ClimaLSM domains store the ClimaCore function spaces for the physical domain as a NamedTuple. When solving partial differential equations, the spatial discretization is tied to a set of basis functions you wish to use to represent the prognostic variable as a function of space. The nodal points - the locations in space where the variable is solved for - are arranged in space in a manner which depends on these basis functions. Note that these spaces are only mathematically needed when your variables satisfy PDEs[1], but that they still exist when your variables do not, because we are using the same underlying infrastructure in both cases.","category":"page"},{"location":"generated/Usage/domain_tutorial/#Domain-types","page":"Intro to ClimaLSM Domains","title":"Domain types","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"All ClimaLSM domains are subtypes of abstract type ClimaLSM.Domains.AbstractDomain. A variety of concrete domain types are supported:","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"0D: Domains.Point\n1D: Domains.Column\n2D: Domains.Plane, Domains.SphericalSurface\n3D: Domains.HybridBox, Domains.SphericalShell.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"As discussed above, our modeling requires that variables of a model can be defined on different subsets of the domain. Because of that, we define the concept of a surface domain, and a subsurface domain. Not all domains have a surface and subsurface; some only have surface domains, as shown in the Table below.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"Domain Surface Domain Subsurface Domain\nColumn Point Column\nHybridBox Plane HybridBox\nSphericalShell SphericalSurface SphericalShell","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"There is a single key method which take a ClimaLSM domain as an argument.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"coordinates(domain): under the hood, this function  uses","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"the NamedTuple of function spaces (domain.space) to create the coordinate field for the surface and subsurface domains (as applicable), stored in a NamedTuple. Depending on the domain, the returned coordinate field will have elements of different names and types. For example, the SphericalShell domain has subsurface coordinates of latitude, longitude, and depth, while the surface coordinates are latitude and longitude. A Plane domain has coordinates of x and y (surface only), and a Point domain only has a coordinate zsfc (surface only). Column domains have a surface coordinate of zsfc, and subsurface coordinates of z.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"It is important to note that the horizontal domain used for the surface and subsurface domains are identical in all simulations. This ensures that we can use the same indexing of surface and subsurface domains and variables. Otherwise we would need to develop additional infrastructure in order to, for example, select the correct subsurface column corresponding to a particular surface location.","category":"page"},{"location":"generated/Usage/domain_tutorial/#How-variable-initialization-depends-on-domains","page":"Intro to ClimaLSM Domains","title":"How variable initialization depends on domains","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"Single component models (soil, snow, vegetation, canopy...) must have an associated domain in order to solve the their equations.  Which domain is appropriate depends on the model equations and on the configuration of interest (single column or global, etc.). For example, the soil model is a vertically resolved model, so only domains with a vertical extent (Column, HybridBox, or SphericalShell) make sense to use. A single layer snow model does not require vertical resolution - and so the domains that make sense to use are a Point, Plane, or SphericalSurface.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"When a developer first defines a model, they need to specify the symbols used for the prognostic variables, via prognostic_vars, and the types of those variables,  via prognostic_types.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"They additionally need to define which subset of the domain the variables are defined on, using prognostic_domain_names.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"The initialize function (which calls both initialize_prognostic  and initialize_auxiliary) creates the prognostic state vector Y (a ClimaCore.Fields.FieldVector). Each field (ClimaCore.Fields.Field) stored within the field vector corresponds to a prognostic variable (identified with the symbol specified). If the prognostic type for that variable is a float, the field will be a field of float values (a scalar field)[4].","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"How do domains tie into this? The field of a prognostic variable corresponds in a 1-1 fashion with the coordinate field of the subset of the domain associated with that variable via prognostic_domain_name.  For example, the bucket model has a vertically resolved temperature T, but the bucket water content W is not vertically resolved. If your domain is a Column, the subsurface coordinates may be [-4.5,-3.5,-2.5,-1.5, -0.5], and the surface coordinate would be [-0.0]. Your prognostic variable field for T will be [T[-4.5], T[-3.5]; T[-2.5], T[-1.5], T[-0.5]], and for W  it will be [W[0.0],]. Your variable always has the same spatial resolution as the associated subset of the domain.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"This functionality is not required for every standalone component model. For example, a single layer snow model will only have variables on the surface of the domain (which in this case, would be the entire Point, Plane, or SphericalShell domain). The user still must define the prognosticdomainnames method. This functionality is required for most multi-component models.","category":"page"},{"location":"generated/Usage/domain_tutorial/#Future-work","page":"Intro to ClimaLSM Domains","title":"Future work","text":"","category":"section"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"Almost all interactions between variables in land surface models are within column - that is, there is only vertical transport and exchanges. The exception to this is the horizontal flow of water on the surface and within the soil. The tendency (produced by make_exp_tendency and make_imp_tendency) functions (the ODE functions) can be split into \"vertical\" and \"horizontal\" pieces.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"We envision each step of the land surface model simulation to be solved  in two steps: (1) the vertical tendency evaluations are carried out (and can be parallelized), and (2) the horizontal tendency functions are then evaluated (possibly less frequently?) and require communcation between columns. In this case, tendency functions will need to be aware of the domain. In general, tendencies reflecting horizontal flow will be treated explicitly and include in the explicit tendency function. Tendencies reflecting vertical flow may be treated explicitly or implicitly depending on the use case. To solve the problem, we then use IMEX (mixed explicit/implicit) methods.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"[1]: finite differencing is used in the vertical, and spectral elements are used in the horizontal.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"[2]: a suprasurface region may also be necessary - for example if the canopy airspace model involves PDEs.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"[3]: We also will support having an array-like type of variable.","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"","category":"page"},{"location":"generated/Usage/domain_tutorial/","page":"Intro to ClimaLSM Domains","title":"Intro to ClimaLSM Domains","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/Regridder/#Bucket","page":"Parameter Dataset Tools","title":"Bucket","text":"","category":"section"},{"location":"APIs/Regridder/","page":"Parameter Dataset Tools","title":"Parameter Dataset Tools","text":"CurrentModule = ClimaLSM.Regridder","category":"page"},{"location":"APIs/Regridder/#Functions","page":"Parameter Dataset Tools","title":"Functions","text":"","category":"section"},{"location":"APIs/Regridder/","page":"Parameter Dataset Tools","title":"Parameter Dataset Tools","text":"ClimaLSM.Regridder.regrid_netcdf_to_field","category":"page"},{"location":"APIs/canopy/CanopyEnergy/#Canopy-Energy-Model","page":"Canopy Energy","title":"Canopy Energy Model","text":"","category":"section"},{"location":"APIs/canopy/CanopyEnergy/","page":"Canopy Energy","title":"Canopy Energy","text":"CurrentModule = ClimaLSM.Canopy","category":"page"},{"location":"APIs/canopy/CanopyEnergy/#Methods","page":"Canopy Energy","title":"Methods","text":"","category":"section"},{"location":"APIs/canopy/CanopyEnergy/","page":"Canopy Energy","title":"Canopy Energy","text":"ClimaLSM.Canopy.canopy_temperature","category":"page"},{"location":"APIs/canopy/CanopyEnergy/#ClimaLSM.Canopy.canopy_temperature","page":"Canopy Energy","title":"ClimaLSM.Canopy.canopy_temperature","text":"canopy_temperature(model::PrescribedCanopyTempModel, canopy, Y, p, t)\n\nReturns the canopy temperature under the PrescribedCanopyTemp model,  where the canopy temperature is assumed to be the same as the atmosphere temperature.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/CanopyEnergy/#Types","page":"Canopy Energy","title":"Types","text":"","category":"section"},{"location":"APIs/canopy/CanopyEnergy/","page":"Canopy Energy","title":"Canopy Energy","text":"ClimaLSM.Canopy.AbstractCanopyEnergyModel\nClimaLSM.Canopy.PrescribedCanopyTempModel","category":"page"},{"location":"APIs/canopy/CanopyEnergy/#ClimaLSM.Canopy.PrescribedCanopyTempModel","page":"Canopy Energy","title":"ClimaLSM.Canopy.PrescribedCanopyTempModel","text":"PrescribedCanopyTempModel{FT} <: AbstractCanopyEnergyModel{FT}\n\nA model for the energy of the canopy which assumes the canopy temperature is the same as the atmosphere temperature prescribed in the PrescribedAtmos struct. \n\nNo equation for the energy of the canopy is solved.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SurfaceWater/#SurfaceWater","page":"Surface Water Models","title":"SurfaceWater","text":"","category":"section"},{"location":"APIs/SurfaceWater/","page":"Surface Water Models","title":"Surface Water Models","text":"CurrentModule = ClimaLSM.Pond","category":"page"},{"location":"APIs/SurfaceWater/#Models","page":"Surface Water Models","title":"Models","text":"","category":"section"},{"location":"APIs/SurfaceWater/","page":"Surface Water Models","title":"Surface Water Models","text":"ClimaLSM.Pond.PondModel","category":"page"},{"location":"APIs/SurfaceWater/#ClimaLSM.Pond.PondModel","page":"Surface Water Models","title":"ClimaLSM.Pond.PondModel","text":"PondModel{FT, D, R} <: AbstractSurfaceWaterModel{FT}\n\nA stand-in model for models like the snow or river model. In standalone mode, a prescribed soil infiltration rate  and precipitation rate control the rate of change of the pond height variable η via an ODE. In integrated LSM mode, the infiltration into the soil will be computed via a different method, and also be applied as a flux boundary condition for the soil model.\n\ndomain: The domain for the pond model\nrunoff: The runoff model for the pond model\n\n\n\n\n\n","category":"type"},{"location":"APIs/SurfaceWater/#Methods-and-Types","page":"Surface Water Models","title":"Methods and Types","text":"","category":"section"},{"location":"APIs/SurfaceWater/","page":"Surface Water Models","title":"Surface Water Models","text":"ClimaLSM.Pond.PrescribedRunoff\nClimaLSM.Pond.surface_runoff","category":"page"},{"location":"APIs/SurfaceWater/#ClimaLSM.Pond.PrescribedRunoff","page":"Surface Water Models","title":"ClimaLSM.Pond.PrescribedRunoff","text":"PrescribedRunoff <:  AbstractSurfaceRunoff\n\nThe required input for driving the simple pond model: precipitation, as a function of time, soil effective saturation at a depth Δz below the surface, as a function of time, and soil parameters, which affect infiltration.\n\n\n\n\n\n","category":"type"},{"location":"APIs/SurfaceWater/#ClimaLSM.Pond.surface_runoff","page":"Surface Water Models","title":"ClimaLSM.Pond.surface_runoff","text":"function Pond.surface_runoff(\n    runoff::PrognosticRunoff{FT},\n    Y::ClimaCore.Fields.FieldVector,\n    p::NamedTuple,\n    t::FT,\n) where {FT}\n\nExtension of the Pond.surface_runoff function, which computes the surface runoff, for use in an LSM when the runoff is determined prognostically.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/AutotrophicRespiration/#Autotrophic-Respiration","page":"Canopy Autotrophic Respiration","title":"Autotrophic Respiration","text":"","category":"section"},{"location":"APIs/canopy/AutotrophicRespiration/","page":"Canopy Autotrophic Respiration","title":"Canopy Autotrophic Respiration","text":"CurrentModule = ClimaLSM.Canopy","category":"page"},{"location":"APIs/canopy/AutotrophicRespiration/#Parameters","page":"Canopy Autotrophic Respiration","title":"Parameters","text":"","category":"section"},{"location":"APIs/canopy/AutotrophicRespiration/","page":"Canopy Autotrophic Respiration","title":"Canopy Autotrophic Respiration","text":"ClimaLSM.Canopy.AutotrophicRespirationParameters","category":"page"},{"location":"APIs/canopy/AutotrophicRespiration/#ClimaLSM.Canopy.AutotrophicRespirationParameters","page":"Canopy Autotrophic Respiration","title":"ClimaLSM.Canopy.AutotrophicRespirationParameters","text":"AutotrophicRespirationParameters{FT<:AbstractFloat}\n\nThe required parameters for the autrophic respiration model.\n\nne: Vcmax25 to N factor (mol CO2 m-2 s-1 kg C (kg C)-1)\nηsl: Live stem wood coefficient (kg C m-3)\nσl: Specific leaf density (kg C m-2 [leaf])\nμr: Ratio root nitrogen to top leaf nitrogen (-), typical value 1.0\nμs: Ratio stem nitrogen to top leaf nitrogen (-), typical value 0.1\nf1: Factor to convert from mol CO2 to kg C\nf2: Factor of relative contribution or Rgrowth (-)\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/AutotrophicRespiration/#Methods","page":"Canopy Autotrophic Respiration","title":"Methods","text":"","category":"section"},{"location":"APIs/canopy/AutotrophicRespiration/","page":"Canopy Autotrophic Respiration","title":"Canopy Autotrophic Respiration","text":"ClimaLSM.Canopy.nitrogen_content\nClimaLSM.Canopy.plant_respiration_maintenance\nClimaLSM.Canopy.plant_respiration_growth","category":"page"},{"location":"APIs/canopy/AutotrophicRespiration/#ClimaLSM.Canopy.nitrogen_content","page":"Canopy Autotrophic Respiration","title":"ClimaLSM.Canopy.nitrogen_content","text":"nitrogen_content(\n                 ne::FT, # Mean leaf nitrogen concentration (kg N (kg C)-1)\n                 Vcmax25::FT, #\n                 LAI::FT, # Leaf area index\n                 RAI::FT,\n                 ηsl::FT, # live stem  wood coefficient (kg C m-3) \n                 h::FT, # canopy height (m)\n                 σl::FT # Specific leaf density (kg C m-2 [leaf])\n                 μr::FT, # Ratio root nitrogen to top leaf nitrogen (-), typical value 1.0\n                 μs::FT, # Ratio stem nitrogen to top leaf nitrogen (-), typical value 0.1 \n                ) where {FT}\n\nComputes the nitrogen content of leafs (Nl), roots (Nr) and stems (Ns) as a function of leaf area index (LAI), specific leaf density (σl), the carbon content of roots (Rc), the carbon content of stems (Rs),  and mean leaf nitrogen concentration (nm).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/AutotrophicRespiration/#ClimaLSM.Canopy.plant_respiration_maintenance","page":"Canopy Autotrophic Respiration","title":"ClimaLSM.Canopy.plant_respiration_maintenance","text":"plant_respiration_maintenance(\n    Rd::FT, # Dark respiration\n    β::FT, # Soil moisture factor\n    Nl::FT, # Nitrogen content of leafs\n    Nr::FT, # Nitrogen content of roots\n    Ns::FT, # Nitrogen content of stems\n    f::FT # Factor to convert from mol CO2 to kg C\n    ) where {FT}\n\nComputes plant maintenance respiration as a function of dark respiration (Rd), the nitrogen content of leafs (Nl), roots (Nr) and stems (Ns),  and the soil moisture factor (β).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/AutotrophicRespiration/#ClimaLSM.Canopy.plant_respiration_growth","page":"Canopy Autotrophic Respiration","title":"ClimaLSM.Canopy.plant_respiration_growth","text":"plant_respiration_growth(\n    f::FT, # Factor of relative contribution\n    GPP::FT, # Gross primary productivity\n    Rpm::FT # Plant maintenance respiration\n    ) where {FT}\n\nComputes plant growth respiration as a function of gross primary productivity (GPP), plant maintenance respiration (Rpm), and a relative contribution factor, f.\n\n\n\n\n\n","category":"function"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Soil/richards_equation/#Hydrostatic-Equilibrium-test-for-Richards-Equation","page":"Richards Equation","title":"Hydrostatic Equilibrium test for Richards Equation","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"This tutorial shows how to use ClimaLSM code to solve Richards equation in a column of soil. We choose boundary conditions of zero flux at the top and bottom of the column, and then run the simulation long enough to see that the system is approaching hydrostatic equilibrium, where the gradient of the pressure head is equal and opposite the gradient of the gravitational head.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"The equations are:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"frac  ϑ_l t =   K (ϑ_l ν ) h( ϑ_l z ν )","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Here","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"t is the time (s),","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"z is the location in the vertical (m),","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"K is the hydraulic conductivity (m/s),","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"h is the hydraulic head (m),","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"ϑ_l is the augmented volumetric liquid water fraction,","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"ν  denotes parameters relating to soil type, such as porosity.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We will solve this equation in a 1-d domain with z  -50, and with the following boundary and initial conditions:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"- K h(t z = 0) = 0 ẑ","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"-K h(t z = -5) = 0 ẑ","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"ϑ(t = 0 z) = ν-0001","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"θ_i(t = 0 z) = 00","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"where nu is the porosity.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"When solving Richards equation (not a fully integrated energy and hydrology model), the hydraulic conductivity is only a function of liquid moisture content.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Lastly, our formulation of this equation allows for a continuous solution in both saturated and unsaturated areas, following Woodward and Dawson (2000).","category":"page"},{"location":"generated/Soil/richards_equation/#Preliminary-setup","page":"Richards Equation","title":"Preliminary setup","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Load external packages","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"import SciMLBase\nusing Plots","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Load CliMA packages and ClimaLSM modules","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"using ClimaCore\nimport CLIMAParameters as CP\nimport ClimaTimeSteppers as CTS\n\nusing ClimaLSM\nusing ClimaLSM.Domains: Column\nusing ClimaLSM.Soil\n\nimport ClimaLSM\nimport ClimaLSM.Parameters as LSMP\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Define the float type desired (Float64 or Float32), and get the parameter set, which holds constants used across CliMA models:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"const FT = Float64;\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Soil/richards_equation/#Set-up-the-soil-model","page":"Richards Equation","title":"Set up the soil model","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We want to solve Richards equation alone, without simultaneously solving the heat equation. Because of that, we choose a RichardsModel. Taking a look at the documentation (linked), we see that we need to supply parameters, a domain, boundary conditions, and sources.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"First, we define the parameters: porosity \\nu, Ksat, the van Genuchten parameters `vgα,vgm,vgn,θ_r`, and the specific storage value for the soil. Note that all values must be given in mks units.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"K_sat = FT(0.0443 / (3600 * 100))\nS_s = FT(1e-3)\nν = FT(0.495)\nvg_α = FT(2.6)\nvg_n = FT(2)\nhcm = vanGenuchten(; α = vg_α, n = vg_n);\nθ_r = FT(0)\nparams = Soil.RichardsParameters(;\n    ν = ν,\n    hydrology_cm = hcm,\n    K_sat = K_sat,\n    S_s = S_s,\n    θ_r = θ_r,\n);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Next, we define the domain. Here, we are considering a 1D domain, discretized using finite difference, with coordinates z:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"zmax = FT(0)\nzmin = FT(-5)\nnelems = 10\nsoil_domain = Column(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We also need to specify the boundary conditions. The user can specify two conditions, either at the top or at the bottom, and they can either be either on the state ϑ_l or on the flux  -K∇h. Flux boundary conditions are passed as the (scalar) z-component of the flux f, i.e. F⃗ = f ẑ. In either case, the user must pass a function of the auxiliary variables p and time t:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"surface_flux = Soil.FluxBC((p, t) -> eltype(t)(0.0))\nbottom_flux = Soil.FluxBC((p, t) -> eltype(t)(0.0))\nboundary_conditions =\n    (; top = (water = surface_flux,), bottom = (water = bottom_flux,));","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Lastly, in this case we don't have any sources, so we pass an empty tuple:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"sources = ();","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Now we can make the model itself. This contains every piece of information needed to turn the continuous form of Richards equation into a set of ODEs, ready to be passed off to a timestepper.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"soil = Soil.RichardsModel{FT}(;\n    parameters = params,\n    domain = soil_domain,\n    boundary_conditions = boundary_conditions,\n    sources = sources,\n);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Here we create the explicit and implicit tendencies, which update prognostic variable components that are stepped explicitly and implicitly, respectively. We also create the function which is used to update our Jacobian.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"exp_tendency! = make_exp_tendency(soil);\nimp_tendency! = ClimaLSM.make_imp_tendency(soil);\nupdate_jacobian! = ClimaLSM.make_update_jacobian(soil);","category":"page"},{"location":"generated/Soil/richards_equation/#Set-up-the-simulation","page":"Richards Equation","title":"Set up the simulation","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We can now initialize the prognostic and auxiliary variable vectors, and take a peek at what those variables are:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Y, p, coords = initialize(soil);\nY.soil |> propertynames\n\np.soil |> propertynames\n\ncoords |> propertynames","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"(:surface, :subsurface)","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Note that the variables are nested into Y and p in a hierarchical way. Since we have the vectors (composed of ClimaCore Fields handy, we can now set them to the desired initial conditions.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Y.soil.ϑ_l .= FT(0.494);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We choose the initial and final simulation times:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"t0 = FT(0)\ntf = FT(60 * 60 * 24 * 36);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We set the aux state corresponding to the initial conditions of the state Y:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"set_initial_aux_state! = make_set_initial_aux_state(soil);\nset_initial_aux_state!(p, Y, t0);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Next, we turn to timestepping. As usual, your timestep depends on the problem you are solving, the accuracy of the solution required, and the timestepping algorithm you are using.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"dt = FT(1e3);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Now, we choose the timestepping algorithm we want to use. We'll use the ARS111 algorithm with 1 Newton iteration per timestep; you can also specify a convergence criterion and a maximum number of Newton iterations.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"stepper = CTS.ARS111();\node_algo = CTS.IMEXAlgorithm(\n    stepper,\n    CTS.NewtonsMethod(\n        max_iters = 1,\n        update_j = CTS.UpdateEvery(CTS.NewNewtonIteration),\n    ),\n);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Here we set up the information used for our Jacobian.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"jac_kwargs =\n    (; jac_prototype = RichardsTridiagonalW(Y), Wfact = update_jacobian!);","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"And then we can solve the system of equations, using SciMLBase.jl and ClimaTimeSteppers.jl.","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"prob = SciMLBase.ODEProblem(\n    CTS.ClimaODEFunction(\n        T_exp! = exp_tendency!,\n        T_imp! = SciMLBase.ODEFunction(imp_tendency!; jac_kwargs...),\n        dss! = ClimaLSM.dss!,\n    ),\n    Y,\n    (t0, tf),\n    p,\n);\nsol = SciMLBase.solve(prob, ode_algo; dt = dt, adaptive = false);","category":"page"},{"location":"generated/Soil/richards_equation/#Create-some-plots","page":"Richards Equation","title":"Create some plots","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"We'll plot the moisture content vs depth in the soil, as well as the expected profile of ϑ_l in hydrostatic equilibrium. For ϑ_l values above porosity, the soil is saturated, and the pressure head changes from being equal to the matric potential to the pressure generated by compression of water and the soil matrix. The profile can be solved for analytically by (1) solving for the form that ϑ_l(z) must take in both the saturated and unsaturated zones to satisfy the steady-state requirement with zero flux boundary conditions, (2) requiring that at the interface between saturated and unsaturated zones, the water content equals porosity, and (3) solving for the location of the interface by requiring that the integrated water content at the end matches that at the beginning (yielding an interface location of z≈-0.56m).","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"t = sol.t ./ (60 * 60 * 24);\nϑ_l = [parent(sol.u[k].soil.ϑ_l) for k in 1:length(t)]\nz = parent(coords.subsurface.z)\nplot(\n    ϑ_l[1],\n    z,\n    label = string(\"t = \", string(t[1]), \"days\"),\n    xlim = [0.47, 0.501],\n    ylabel = \"z\",\n    xlabel = \"ϑ_l\",\n    legend = :bottomleft,\n    title = \"Equilibrium test\",\n);\nplot!(ϑ_l[end], z, label = string(\"t = \", string(t[end]), \"days\"));\nfunction hydrostatic_equilibrium(z, z_interface)\n    ν = 0.495\n    S_s = 1e-3\n    α = 2.6\n    n = 2.0\n    m = 0.5\n    if z < z_interface\n        return -S_s * (z - z_interface) + ν\n    else\n        return ν * (1 + (α * (z - z_interface))^n)^(-m)\n    end\nend\nplot!(hydrostatic_equilibrium.(z, -0.56), z, label = \"equilibrium solution\");\n\nplot!(1e-3 .+ ϑ_l[1], z, label = \"porosity\");","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Save the output:","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"savefig(\"equilibrium_test_ϑ_l.png\");","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"(Image: )","category":"page"},{"location":"generated/Soil/richards_equation/#References","page":"Richards Equation","title":"References","text":"","category":"section"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"Woodward and Dawson, (2000) SIAM J. Numer. Anal., 37, 701–724","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"","category":"page"},{"location":"generated/Soil/richards_equation/","page":"Richards Equation","title":"Richards Equation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"APIs/canopy/Photosynthesis/#Photosynthesis","page":"Canopy Photosynthesis","title":"Photosynthesis","text":"","category":"section"},{"location":"APIs/canopy/Photosynthesis/","page":"Canopy Photosynthesis","title":"Canopy Photosynthesis","text":"CurrentModule = ClimaLSM.Canopy","category":"page"},{"location":"APIs/canopy/Photosynthesis/#Parameters","page":"Canopy Photosynthesis","title":"Parameters","text":"","category":"section"},{"location":"APIs/canopy/Photosynthesis/","page":"Canopy Photosynthesis","title":"Canopy Photosynthesis","text":"ClimaLSM.Canopy.FarquharParameters","category":"page"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.FarquharParameters","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.FarquharParameters","text":"FarquharParameters{FT<:AbstractFloat}\n\nThe required parameters for the Farquhar photosynthesis model.\n\nmechanism: Photosynthesis mechanism: C3 or C4\nVcmax25: Vcmax at 25 °C (mol CO2/m^2/s)\nΓstar25: Γstar at 25 °C (mol/mol)\nKc25: Michaelis-Menten parameter for CO2 at 25 °C (mol/mol)\nKo25: Michaelis-Menten parameter for O2 at 25 °C (mol/mol)\nΔHkc: Energy of activation for CO2 (J/mol)\nΔHko: Energy of activation for oxygen (J/mol)\nΔHVcmax: Energy of activation for Vcmax (J/mol)\nΔHΓstar: Energy of activation for Γstar (J/mol)\nΔHJmax: Energy of activation for Jmax (J/mol)\nΔHRd: Energy of activation for Rd (J/mol)\nTo: Reference temperature equal to 25 degrees Celsius (K)\noi: Intercelluar O2 concentration (mol/mol); taken to be constant\nϕ: Quantum yield of photosystem II (Bernacchi, 2003; unitless)\nθj: Curvature parameter, a fitting constant to compute J, unitless\nf: Constant factor appearing the dark respiration term, equal to 0.015.\nsc: Sensitivity to low water pressure, in the moisture stress factor, (Pa^{-1}) [Tuzet et al. (2003)]\npc: Reference water pressure for the moisture stress factor (Pa) [Tuzet et al. (2003)]\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/Photosynthesis/#Methods","page":"Canopy Photosynthesis","title":"Methods","text":"","category":"section"},{"location":"APIs/canopy/Photosynthesis/","page":"Canopy Photosynthesis","title":"Canopy Photosynthesis","text":"ClimaLSM.Canopy.arrhenius_function\nClimaLSM.Canopy.intercellular_co2\nClimaLSM.Canopy.co2_compensation\nClimaLSM.Canopy.rubisco_assimilation\nClimaLSM.Canopy.light_assimilation\nClimaLSM.Canopy.C3\nClimaLSM.Canopy.C4\nClimaLSM.Canopy.max_electron_transport\nClimaLSM.Canopy.electron_transport\nClimaLSM.Canopy.net_photosynthesis\nClimaLSM.Canopy.moisture_stress\nClimaLSM.Canopy.dark_respiration\nClimaLSM.Canopy.compute_GPP\nClimaLSM.Canopy.MM_Kc\nClimaLSM.Canopy.MM_Ko\nClimaLSM.Canopy.compute_Vcmax","category":"page"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.arrhenius_function","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.arrhenius_function","text":"arrhenius_function(T::FT, To::FT, R::FT, ΔH::FT)\n\nComputes the Arrhenius function at temperature T given the reference temperature To=298.15K, the universal  gas constant R, and the energy activation ΔH.\n\nSee Table 11.5 of G. Bonan's textbook,  Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.intercellular_co2","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.intercellular_co2","text":"intercellular_co2(ca::FT, Γstar::FT, medlyn_factor::FT) where{FT}\n\nComputes the intercellular CO2 concentration (mol/mol) given the atmospheric concentration (ca, mol/mol), the CO2 compensation (Γstar,   mol/mol), and the Medlyn factor (unitless).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.co2_compensation","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.co2_compensation","text":"co2_compensation(Γstar25::FT,\n                 ΔHΓstar::FT,\n                 T::FT,\n                 To::FT,\n                 R::FT) where {FT}\n\nComputes the CO2 compensation point (Γstar), in units of mol/mol, as a function of its value at 25 °C (Γstar25), a constant energy of activation (ΔHΓstar), a standard temperature (To), the unversal gas constant (R), and the temperature (T).\n\nSee Table 11.5 of G. Bonan's textbook, Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.rubisco_assimilation","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.rubisco_assimilation","text":"rubisco_assimilation(::C3,\n                     Vcmax::FT,\n                     ci::FT,\n                     Γstar::FT,\n                     Kc::FT,\n                     Ko::FT,\n                     oi::FT) where {FT}\n\nComputes the Rubisco limiting rate of photosynthesis for C3 plants (Ac), in units of moles CO2/m^2/s, as a function of the maximum rate of carboxylation of Rubisco (Vcmax),  the leaf internal carbon dioxide partial pressure (ci),  the CO2 compensation point (Γstar), and Michaelis-Menten parameters for CO2 and O2, respectively, (Kc) and (Ko).\n\nThe empirical parameter oi is equal to 0.209 (mol/mol). See Table 11.5 of G. Bonan's textbook, Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\nrubisco_assimilation(::C4, Vcmax::FT,_...) where {FT}\n\nComputes the Rubisco limiting rate of photosynthesis for C4 plants (Ac) in units of moles CO2/m^2/s, as equal to the maximum rate of carboxylation of Rubisco (Vcmax).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.light_assimilation","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.light_assimilation","text":"light_assimilation(::C3,\n                   J::FT,\n                   ci::FT,\n                   Γstar::FT) where {FT}\n\nComputes the electron transport limiting rate (Aj), in units of moles CO2/m^2/s, for C3 plants as a function of the rate of electron transport (J), the leaf internal carbon dioxide partial pressure (ci), and the CO2 compensation point (Γstar).\n\nSee Table 11.5 of G. Bonan's textbook, Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\nlight_assimilation(::C4, J::FT, _...) where {FT}\n\nComputes the electron transport limiting rate (Aj), in units of moles CO2/m^2/s, for C4 plants, as equal to the rate of electron transport (J).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.C3","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.C3","text":"C3 <: AbstractPhotosynthesisMechanism\n\nHelper struct for dispatching between C3 and C4 photosynthesis.\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.C4","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.C4","text":"C4 <: AbstractPhotosynthesisMechanism\n\nHelper struct for dispatching between C3 and C4 photosynthesis.\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.max_electron_transport","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.max_electron_transport","text":"max_electron_transport(Vcmax::FT) where {FT}\n\nComputes the maximum potential rate of electron transport (Jmax), in units of mol/m^2/s,  as a function of Vcmax at 25 °C (Vcmax25), a constant (ΔHJmax), a standard temperature (To), the unversal gas constant (R), and the temperature (T).\n\nSee Table 11.5 of G. Bonan's textbook,  Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.electron_transport","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.electron_transport","text":"electron_transport(APAR::FT,\n                   Jmax::FT,\n                   θj::FT,\n                   ϕ::FT) where {FT}\n\nComputes the rate of electron transport (J), in units of mol/m^2/s, as a function of the maximum potential rate of electron transport (Jmax), absorbed photosynthetically active radiation (APAR), an empirical \"curvature parameter\" (θj; Bonan Eqn 11.21) and the quantum yield of photosystem II (ϕ). \n\nSee Ch 11, G. Bonan's textbook, Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.net_photosynthesis","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.net_photosynthesis","text":"net_photosynthesis(Ac::FT,\n                   Aj::FT,\n                   Rd::FT,\n                   β::FT) where {FT}\n\nComputes the total net carbon assimilation (An), in units of mol CO2/m^2/s, as a function of  the Rubisco limiting factor (Ac), the electron transport limiting rate (Aj), dark respiration (Rd), and the moisture stress factor (β). \n\nSee Table 11.5 of G. Bonan's textbook, Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.moisture_stress","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.moisture_stress","text":"moisture_stress(pl::FT,\n                sc::FT,\n                pc::FT) where {FT}\n\nComputes the moisture stress factor (β), which is unitless,  as a function of a constant (sc, 1/Pa), a reference pressure (pc, Pa), and  the leaf water pressure (pl, Pa) . \n\nSee Eqn 12.57 of G. Bonan's textbook,  Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.dark_respiration","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.dark_respiration","text":"dark_respiration(Vcmax25::FT,\n                 β::FT,\n                 f::FT,\n                 ΔHkc::FT,\n                 T::FT,\n                 To::FT,\n                 R::FT) where {FT}\n\nComputes dark respiration (Rd), in units of mol CO2/m^2/s, as a function of the maximum rate of carboxylation of Rubisco (Vcmax25), and the moisture stress factor (β), an empirical factor f is equal to 0.015, a constant (ΔHRd), a standard temperature (To), the unversal gas constant (R), and the temperature (T).\n\nSee Table 11.5 of G. Bonan's textbook,  Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.compute_GPP","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.compute_GPP","text":"compute_GPP(An::FT,\n         K::FT,\n         LAI::FT,\n         Ω::FT) where {FT}\n\nComputes the total canopy photosynthesis (GPP) as a function of  the total net carbon assimilation (An), the extinction coefficient (K), leaf area index (LAI) and the clumping index (Ω).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.MM_Kc","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.MM_Kc","text":"MM_Kc(Kc25::FT,\n      ΔHkc::FT,\n      T::FT,\n      To::FT,\n      R::FT) where {FT}\n\nComputes the Michaelis-Menten coefficient for CO2 (Kc), in units of mol/mol, as a function of its value at 25 °C (Kc25), a constant (ΔHkc), a standard temperature (To), the unversal gas constant (R), and the temperature (T).\n\nSee Table 11.5 of G. Bonan's textbook,  Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.MM_Ko","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.MM_Ko","text":"MM_Ko(Ko25::FT,\n      ΔHko::FT,\n      T::FT,\n      To::FT,\n      R::FT) where {FT}\n\nComputes the Michaelis-Menten coefficient for O2 (Ko), in units of mol/mol, as a function of its value at 25 °C (Ko25), a constant (ΔHko), a standard temperature (To), the universal gas constant (R), and the temperature (T).\n\nSee Table 11.5 of G. Bonan's textbook,  Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/Photosynthesis/#ClimaLSM.Canopy.compute_Vcmax","page":"Canopy Photosynthesis","title":"ClimaLSM.Canopy.compute_Vcmax","text":"compute_Vcmax(Vcmax25::FT,\n       T::FT,\n       To::FT,\n       R::FT,\n       ep5::FT) where {FT}\n\nComputes the maximum rate of carboxylation of Rubisco (Vcmax), in units of mol/m^2/s,  as a function of temperature (T), Vcmax at the reference temperature 25 °C (Vcmax25), the universal gas constant (R), and the reference temperature (To).\n\nSee Table 11.5 of G. Bonan's textbook,  Climate Change and Terrestrial Ecosystem Modeling (2019).\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/PlantHydraulics/#PlantHydraulics","page":"Plant Hydraulics","title":"PlantHydraulics","text":"","category":"section"},{"location":"APIs/canopy/PlantHydraulics/","page":"Plant Hydraulics","title":"Plant Hydraulics","text":"CurrentModule = ClimaLSM.PlantHydraulics","category":"page"},{"location":"APIs/canopy/PlantHydraulics/#Models","page":"Plant Hydraulics","title":"Models","text":"","category":"section"},{"location":"APIs/canopy/PlantHydraulics/","page":"Plant Hydraulics","title":"Plant Hydraulics","text":"ClimaLSM.PlantHydraulics.PlantHydraulicsModel","category":"page"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.PlantHydraulicsModel","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.PlantHydraulicsModel","text":"PlantHydraulicsModel{FT, PS, T} <: AbstractPlantHydraulicsModel{FT}\n\nDefines, and constructs instances of, the PlantHydraulicsModel type, which is used for simulation flux of water to/from soil, along roots of different depths, along a stem, to a leaf, and ultimately being lost from the system by transpiration. Note that the canopy height is specified as part of the PlantHydraulicsModel, along with the area indices of the leaves, roots, and stems.\n\nThis model can also be combined with the soil model using ClimaLSM, in which case the prognostic soil water content is used to determine root extraction, and the transpiration is also computed diagnostically. In  global run with patches of bare soil, you can \"turn off\" the canopy model (to get zero root extraction, zero absorption and emission, zero transpiration and sensible heat flux from the canopy), by setting:\n\nn_leaf = 1\nn_stem = 0\nLAI = SAI = RAI = 0.\n\nA plant model can have leaves but no stem, but not vice versa. If n_stem = 0, SAI must be zero.\n\nFinally, the model can be used in Canopy standalone mode by prescribing the soil matric potential at the root tips or flux in the roots. There is also the option (intendend only for debugging) to use a prescribed transpiration rate.\n\nn_stem: The number of stem compartments for the plant; can be zero\nn_leaf: The number of leaf compartments for the plant; must be >=1\ncompartment_midpoints: The height of the center of each leaf compartment/stem compartment, in meters\ncompartment_surfaces: The height of the compartments' top faces, in meters. The canopy height is the last element of the vector.\ncompartment_labels: The label (:stem or :leaf) of each compartment\nparameters: Parameters required by the Plant Hydraulics model\ntranspiration: The transpiration model, of type AbstractTranspiration\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/PlantHydraulics/#Plant-Hydraulics-Diagnostic-Variables","page":"Plant Hydraulics","title":"Plant Hydraulics Diagnostic Variables","text":"","category":"section"},{"location":"APIs/canopy/PlantHydraulics/","page":"Plant Hydraulics","title":"Plant Hydraulics","text":"ClimaLSM.PlantHydraulics.effective_saturation\nClimaLSM.PlantHydraulics.augmented_liquid_fraction\nClimaLSM.PlantHydraulics.water_retention_curve\nClimaLSM.PlantHydraulics.inverse_water_retention_curve\nClimaLSM.PlantHydraulics.root_flux_per_ground_area!\nClimaLSM.PlantHydraulics.flux\nClimaLSM.PlantHydraulics.hydraulic_conductivity","category":"page"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.effective_saturation","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.effective_saturation","text":"effective_saturation(\n    ν::FT,\n    ϑ_l::FT) where {FT}\n\nComputes the effective saturation given the augmented liquid fraction.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.augmented_liquid_fraction","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.augmented_liquid_fraction","text":"augmented_liquid_fraction(\n    ν::FT,\n    S_l::FT) where {FT}\n\nComputes the augmented liquid fraction from porosity and effective saturation.\n\nAugmented liquid fraction allows for oversaturation: an expansion of the volume of space available for storage in a plant compartment.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.water_retention_curve","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.water_retention_curve","text":"water_retention_curve(\n    S_l::FT,\n    b::FT,\n    ν::FT,\n    S_s::FT) where {FT}\n\nReturns the potential ψ given the effective saturation S at a point, according to a linear model for the retention curve with parameters specified by retention_params.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.inverse_water_retention_curve","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.inverse_water_retention_curve","text":"inverse_water_retention_curve(\n    ψ::FT,\n    b::FT,\n    ν::FT,\n    S_s::FT) where {FT}\n\nReturns the effective saturation given the potential at a point, according to the linear retention curve model.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.root_flux_per_ground_area!","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.root_flux_per_ground_area!","text":"PlantHydraulics.root_flux_per_ground_area!(\n    fa::ClimaCore.Fields.Field,\n    s::PrognosticSoil,\n    model::Canopy.PlantHydraulics.PlantHydraulicsModel{FT},\n    Y::ClimaCore.Fields.FieldVector,\n    p::NamedTuple,\n    t::FT,\n) where {FT}\n\nAn extension of the PlantHydraulics.root_flux_per_ground_area! function,  which returns the net flux of water between the roots and the soil, per unit ground area,  when both soil and plant hydraulics are modeled prognostically. This is for use in an LSM.\n\nIt is computed by summing the flux of water per ground area between roots and soil at each soil layer.\n\n\n\n\n\nroot_flux_per_ground_area!(\n    fa::ClimaCore.Fields.Field,\n    s::PrescribedSoil{FT},\n    model::PlantHydraulicsModel{FT},\n    Y::ClimaCore.Fields.FieldVector,\n    p::NamedTuple,\n    t::FT,\n)::FT where {FT}\n\nA method which computes the flux between the soil and the stem, via the roots, and multiplied by the RAI, in the case of a model running without an integrated soil model.\n\nThe returned flux is per unit ground area. This assumes that the stem compartment is the first element of Y.canopy.hydraulics.ϑ_l.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.flux","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.flux","text":"flux(\n    z1,\n    z2,\n    ψ1,\n    ψ2,\n    K1,\n    K2,\n) where {FT}\n\nComputes the water flux given the absolute potential (pressure/(ρg))  at the center of the two compartments z1 and z2, and the conductivity along the flow path between these two points.\n\nWe currently assuming an arithmetic mean for mean Ksat between the two points (Bonan, 2019; Zhu, 2008) to take into account the change in Ksat halfway between z1 and z2; this is incorrect for compartments of differing sizes.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.hydraulic_conductivity","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.hydraulic_conductivity","text":"hydraulic_conductivity(conductivity_params::Weibull{FT}, ψ::FT) where {FT}\n\nComputes the hydraulic conductivity at a point, using the Weibull formulation, given the potential ψ.\n\n\n\n\n\n","category":"function"},{"location":"APIs/canopy/PlantHydraulics/#Plant-Hydraulics-Parameters","page":"Plant Hydraulics","title":"Plant Hydraulics Parameters","text":"","category":"section"},{"location":"APIs/canopy/PlantHydraulics/","page":"Plant Hydraulics","title":"Plant Hydraulics","text":"ClimaLSM.PlantHydraulics.PlantHydraulicsParameters\nClimaLSM.PlantHydraulics.Weibull\nClimaLSM.PlantHydraulics.LinearRetentionCurve","category":"page"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.PlantHydraulicsParameters","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.PlantHydraulicsParameters","text":"PlantHydraulicsParameters{FT <: AbstractFloat}\n\nA struct for holding parameters of the PlantHydraulics Model.\n\nai_parameterization: The area index model for LAI, SAI, RAI\nν: porosity (m3/m3)\nS_s: storativity (m3/m3)\nroot_distribution: Root distribution function P(z)\nconductivity_model: Conductivity model and parameters\nretention_model: Water retention model and parameters\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.Weibull","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.Weibull","text":"Weibull{FT} <: AbstractConductivityModel{FT}\n\nA concrete type specifying that a Weibull conductivity model is to be used; the struct contains the require parameters for this model.\n\nFields\n\nK_sat: Maximum Water conductivity in the above-ground plant compartments (m/s) at saturation\nψ63: The absolute water potential in xylem (or xylem water potential) at which ∼63%     of maximum xylem conductance is lost (Liu, 2020).\nc: Weibull parameter c, which controls shape the shape of the conductance curve (Sperry, 2016).\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.LinearRetentionCurve","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.LinearRetentionCurve","text":"LinearRetentionCurve{FT} <: AbstractRetentionModel{FT}\n\nA concrete type specifying that a linear water retention  model is to be used; the struct contains the require parameters for this model.\n\nWhen ψ = 0, the effective saturation is one, so the intercept is not a free parameter, and only the slope must be specified.\n\nFields\n\na: Bulk modulus of elasticity and slope of potential to volume curve. See also Corcuera, 2002, and Christoffersen, 2016.\n\n\n\n\n\n","category":"type"},{"location":"APIs/canopy/PlantHydraulics/#Plant-Hydraulics-Methods-and-Types","page":"Plant Hydraulics","title":"Plant Hydraulics Methods and Types","text":"","category":"section"},{"location":"APIs/canopy/PlantHydraulics/","page":"Plant Hydraulics","title":"Plant Hydraulics","text":"ClimaLSM.PlantHydraulics.PrescribedSoilPressure\nClimaLSM.PlantHydraulics.PrescribedTranspiration\nClimaLSM.PlantHydraulics.AbstractRootExtraction","category":"page"},{"location":"APIs/canopy/PlantHydraulics/#ClimaLSM.Canopy.PlantHydraulics.PrescribedTranspiration","page":"Plant Hydraulics","title":"ClimaLSM.Canopy.PlantHydraulics.PrescribedTranspiration","text":"PrescribedTranspiration{FT} <: AbstractTranspiration{FT}\n\nA concrete type used for dispatch when computing the transpiration from the leaves, in the case where transpiration is prescribed.\n\n\n\n\n\n","category":"type"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Coupled-heat-and-water-equations-tending-towards-equilibrium","page":"Energy and Hydrology","title":"Coupled heat and water equations tending towards equilibrium","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The Richards equation tutorial demonstrates how to solve for water flow in soil, without considering heat transfer, phase changes, or the effect of temperature and the effect of ice on the hydraulic properties of the soil.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Here we show how to solve the interacting heat and water equations, in sand, but without phase changes. This allows us to capture behavior that is not present in Richards equation alone.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The equations are:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"frac ρe_int t =    κ(θ_l θ_i ν ) T +   ρe_int_liq K (Tθ_l θ_i ν ) nabla h( ϑ_l z ν )","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"frac  ϑ_l t =   K (Tθ_l θ_i ν ) h( ϑ_l z ν )","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Here","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"t is the time (s),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"z is the location in the vertical (m),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ρe_int is the volumetric internal energy of the soil (J/m^3),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"T is the temperature of the soil (K),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"κ is the thermal conductivity (W/m/K),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ρe_int_liq is the volumetric internal energy of liquid water (J/m^3),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"K is the hydraulic conductivity (m/s),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"h is the hydraulic head (m),","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ϑ_l is the augmented volumetric liquid water fraction,","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"θ_i is the volumetric ice fraction, and","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ν  denotes parameters relating to soil type, such as porosity.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We will solve this equation in an effectively 1-d domain with z  -10, and with the following boundary and initial conditions:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"- κ T(t z = 0) = 0 ẑ","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"-κ T(t z = -1) = 0 ẑ","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"T(t = 0 z) = T_min + (T_max-T_min) e^Cz","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"- K h(t z = 0) = 0 ẑ","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"-K h(t z = -1) = 0 ẑ","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ϑ(t = 0 z) = ϑ_min + (ϑ_max-ϑ_min) e^Cz","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"where C T_min T_max ϑ_min and ϑ_max are constants.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"If we evolve this system for times long compared to the dynamical timescales of the system, we expect it to reach an equilibrium where the LHS of these equations tends to zero. Assuming zero fluxes at the boundaries, the resulting equilibrium state should satisfy hz = 0 and Tz = 0. Physically, this means that the water settles into a vertical profile in which the resulting pressure balances gravity and that the temperature is constant across the domain.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We verify that the system is approaching this equilibrium, and we also sketch out an analytic calculation for the final temperature in equilibrium.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Import-necessary-modules","page":"Energy and Hydrology","title":"Import necessary modules","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"External (non - CliMA) modules","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"import SciMLBase\nusing Statistics\nusing Plots","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"CliMA packages and ClimaLSM modules","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"using ClimaCore\nimport CLIMAParameters as CP\nimport ClimaTimeSteppers as CTS\nusing ClimaLSM\nusing ClimaLSM.Domains: Column\nusing ClimaLSM.Soil\n\nimport ClimaLSM\nimport ClimaLSM.Parameters as LSMP\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Choose a floating point precision, and get the parameter set, which holds constants used across CliMA models:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"FT = Float64\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Create-the-model","page":"Energy and Hydrology","title":"Create the model","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Set the values of other parameters required by the model:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ν = FT(0.395);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Soil solids are the components of soil besides water, ice, gases, and air. We specify the soil component fractions, relative to all soil solids. These do not sum to unity; the remainder is νssminerals (=0.08, in this case).","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ν_ss_quartz = FT(0.92)\nν_ss_om = FT(0.0)\nν_ss_gravel = FT(0.0);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Other parameters include the hydraulic conductivity at saturation, the specific storage, and the van Genuchten parameters for sand. We recommend Chapter 8 of Bonan (2019) for finding parameters for other soil types.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Ksat = FT(4.42 / 3600 / 100) # m/s\nS_s = FT(1e-3) #inverse meters\nvg_n = FT(1.89)\nvg_α = FT(7.5) # inverse meters\nhcm = vanGenuchten(; α = vg_α, n = vg_n);\nθ_r = FT(0.0);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Other constants needed:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"κ_quartz = FT(7.7) # W/m/K\nκ_minerals = FT(2.5) # W/m/K\nκ_om = FT(0.25) # W/m/K\nκ_liq = FT(0.57) # W/m/K\nκ_ice = FT(2.29) # W/m/K\nκ_air = FT(0.025); #W/m/K","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The particle density of organic material-free soil is equal to the particle density of quartz and other minerals (Balland and Arp (2005)).","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ρp = FT(2700); # kg/m^3","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We calculate the thermal conductivities for the solid material and for saturated soil. These functions are taken from (Balland and Arp (2005)).","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"κ_solid = Soil.κ_solid(ν_ss_om, ν_ss_quartz, κ_om, κ_quartz, κ_minerals)\nκ_dry = Soil.κ_dry(ρp, ν, κ_solid, κ_air)\nκ_sat_frozen = Soil.κ_sat_frozen(κ_solid, ν, κ_ice)\nκ_sat_unfrozen = Soil.κ_sat_unfrozen(κ_solid, ν, κ_liq);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Next, we calculate the volumetric heat capacity of dry soil. Dry soil refers to soil that has no water content.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"ρc_ds = FT((1 - ν) * 1.926e06); # J/m^3/K\nparams = Soil.EnergyHydrologyParameters{FT}(;\n    κ_dry = κ_dry,\n    κ_sat_frozen = κ_sat_frozen,\n    κ_sat_unfrozen = κ_sat_unfrozen,\n    ρc_ds = ρc_ds,\n    ν = ν,\n    ν_ss_om = ν_ss_om,\n    ν_ss_quartz = ν_ss_quartz,\n    ν_ss_gravel = ν_ss_gravel,\n    hydrology_cm = hcm,\n    K_sat = Ksat,\n    S_s = S_s,\n    θ_r = θ_r,\n    earth_param_set = earth_param_set,\n);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We also need to pick a domain on which to solve the equations:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"zmax = FT(0)\nzmin = FT(-1.0)\nnelems = 50\nsoil_domain = Column(; zlim = (zmin, zmax), nelements = nelems);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The boundary value problem in this case requires a boundary condition at the top and the bottom of the domain for each equation being solved. These conditions can be on the state (ϑ_l or T), or on the fluxes (-K∇h or -κ∇T). In the case of fluxes, we return the magnitude of the flux, assumed to point along ẑ. And, in each case, the boundary conditions are supplied in the form of a function of auxiliary variables p and time t.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Water boundary conditions:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"surface_water_flux = FluxBC((p, t) -> eltype(t)(0.0))\nbottom_water_flux = FluxBC((p, t) -> eltype(t)(0.0));","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"The boundary conditions for the heat equation:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"surface_heat_flux = FluxBC((p, t) -> eltype(t)(0.0))\nbottom_heat_flux = FluxBC((p, t) -> eltype(t)(0.0));","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We wrap up all of those in a NamedTuple:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"boundary_fluxes = (;\n    top = (water = surface_water_flux, heat = surface_heat_flux),\n    bottom = (water = bottom_water_flux, heat = bottom_water_flux),\n);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We aren't using any sources or sinks in the equations here, but this is where freeze/thaw terms, runoff, root extraction, etc. would go.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"sources = ();","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Lastly, we can create the EnergyHydrology model. As always, the model encodes and stores all of the information (parameters, continous equations, prognostic variables, etc) which are needed to turn the PDE system into a set of ODEs, properly spatially discretized for the domain of interest.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"soil = Soil.EnergyHydrology{FT}(;\n    parameters = params,\n    domain = soil_domain,\n    boundary_conditions = boundary_fluxes,\n    sources = sources,\n);\n\nexp_tendency! = make_exp_tendency(soil);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Set-up-the-simulation","page":"Energy and Hydrology","title":"Set up the simulation","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We can now initialize the prognostic and auxiliary variable vectors, and take a peek at what those variables are:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Y, p, coords = initialize(soil);\nY.soil |> propertynames\n\np.soil |> propertynames\n\ncoords |> propertynames","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"(:surface, :subsurface)","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Note that the variables are nested into Y and p in a hierarchical way. Since we have the vectors handy, we can now set them to the desired initial conditions.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"function init_soil!(Y, z, params)\n    ν = params.ν\n    θ_r = params.θ_r\n    FT = eltype(Y.soil.ϑ_l)\n    zmax = FT(0)\n    zmin = FT(-1)\n\n    theta_max = FT(ν * 0.5)\n    theta_min = FT(ν * 0.4)\n    T_max = FT(289.0)\n    T_min = FT(288.0)\n\n    c = FT(20.0)\n    @. Y.soil.ϑ_l =\n        theta_min +\n        (theta_max - theta_min) * exp(-(z - zmax) / (zmin - zmax) * c)\n    Y.soil.θ_i .= FT(0.0)\n\n    T = @.(T_min + (T_max - T_min) * exp(-(z - zmax) / (zmin - zmax) * c))\n\n    θ_l = Soil.volumetric_liquid_fraction.(Y.soil.ϑ_l, ν, θ_r)\n    ρc_s = Soil.volumetric_heat_capacity.(θ_l, Y.soil.θ_i, Ref(params))\n    Y.soil.ρe_int .=\n        Soil.volumetric_internal_energy.(Y.soil.θ_i, ρc_s, T, Ref(params))\nend\n\ninit_soil!(Y, coords.subsurface.z, soil.parameters);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We choose the initial and final simulation times:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"t0 = FT(0)\ntf = FT(60 * 60 * 72);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We set the aux state corresponding to the initial conditions of the state Y:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"set_initial_aux_state! = make_set_initial_aux_state(soil);\nset_initial_aux_state!(p, Y, t0);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We use ClimaTimesteppers.jl for carrying out the time integration.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Choose a timestepper and set up the ODE problem:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"dt = FT(30.0);\ntimestepper = CTS.RK4();\node_algo = CTS.ExplicitAlgorithm(timestepper)\nprob = SciMLBase.ODEProblem(\n    CTS.ClimaODEFunction(T_exp! = exp_tendency!, dss! = ClimaLSM.dss!),\n    Y,\n    (t0, tf),\n    p,\n);\n\n\n#By default, it","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"only returns Y and t at each time we request output (saveat, below). We use a callback in order to also get the auxiliary vector p back:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"saveat = collect(t0:FT(1000 * dt):tf)\nsaved_values = (;\n    t = Array{FT}(undef, length(saveat)),\n    saveval = Array{NamedTuple}(undef, length(saveat)),\n);\ncb = ClimaLSM.NonInterpSavingCallback(saved_values, saveat);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Now we can solve the problem.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"sol = SciMLBase.solve(prob, ode_algo; dt = dt, saveat = saveat, callback = cb);","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Extract output","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"z = parent(coords.subsurface.z)\nt = parent(sol.t)\nϑ_l = [parent(sol.u[k].soil.ϑ_l) for k in 1:length(t)]\nT = [parent(saved_values.saveval[k].soil.T) for k in 1:length(t)];","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Let's look at the initial and final times:","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"plot(ϑ_l[1], z, xlabel = \"ϑ_l\", ylabel = \"z (m)\", label = \"t = 0d\")\nplot!(ϑ_l[4], z, label = \"t = 1.5d\")\nplot!(ϑ_l[end], z, label = \"t = 3d\")\nsavefig(\"eq_moisture_plot.png\");","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"(Image: )","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"plot(T[1], z, xlabel = \"T (K)\", ylabel = \"z (m)\", label = \"t = 0d\")\nplot!(T[4], z, xlabel = \"T (K)\", ylabel = \"z (m)\", label = \"t = 1.5d\")\nplot!(T[end], z, xlabel = \"T (K)\", ylabel = \"z (m)\", label = \"t = 3d\")\nsavefig(\"eq_temperature_plot.png\");","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"(Image: )","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#Analytic-Expectations","page":"Energy and Hydrology","title":"Analytic Expectations","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"We can determine a priori what we expect the final temperature to be in equilibrium.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Regardless of the final water profile in equilibrium, we know that the final temperature T_f will be a constant across the domain. All water that began with a temperature above this point will cool to T_f, and water that began with a temperature below this point will warm to T_f. The initial function T(z) is equal to T_f at a value of z = z̃. This is the location in space which divides these two groups (water that warms over time and water that cools over time) spatially. We can solve for z̃(T_f) using T_f = T(z̃).","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Next, we can determine the change in energy required to cool the water above z̃ to T_f: it is the integral from z̃ to the surface at z = 0 of c θ(z) T(z), where c is the volumetric heat capacity - a constant here - and θ(z) is the initial water profile. Compute the energy required to warm the water below z̃ to T_f in a similar way, set equal, and solve for T_f. This results in T_f = 288.056, which is very close to the mean T we observe after 3 days, of 288.054.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"One could also solve the equation for ϑ_l specified by  h z = 0 to determine the functional form of the equilibrium profile of the liquid water.","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/#References","page":"Energy and Hydrology","title":"References","text":"","category":"section"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"Bonan, G.  Climate change and terrestrial ecosystem modeling. Cambridge University Press, 2019.\nBalland and Arp, J. Environ. Eng. Sci. 4: 549–558 (2005)","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"","category":"page"},{"location":"generated/Soil/soil_energy_hydrology/","page":"Energy and Hydrology","title":"Energy and Hydrology","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"EditURL = \"https://github.com/CliMA/ClimaLSM.jl/../../../..\"","category":"page"},{"location":"generated/Canopy/canopy_tutorial/#Introduction-to-the-Canopy-Model","page":"Standalone Canopy","title":"Introduction to the Canopy Model","text":"","category":"section"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"This tutorial shows how to instantiate and run a simulation of the canopy biophysics model in ClimaLSM. A CanopyModel including all component models is initialized, then an example simulation is run. The initial conditions, atmospheric and radiative flux conditions, and canopy properties are set up to match those observed at the US-MOz flux tower, a flux tower located within an oak-hickory forest in Ozark, Missouri, USA. See Wang et al. 2021 for details on the site and canopy parameters.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"The canopy biophysics model in ClimaLSM combines a photosynthesis model with a canopy radiative transfer scheme, plant hydraulics model, and stomatal conductance model, placing them under either prescribed or simulated (as in a full Earth System Model) atmospheric and radiative flux conditions.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"ClimaLSM supports either Beer-Lambert law or a Two-Stream model for radiative transfer. For this tutorial, we will use the Beer-Lambert law, in which the intensity of light absorbed is a negative exponential function of depth in the canopy and an exinction coefficient determined by optical depth.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"The model of photosynthesis in CliMA LSM is the Farquar Model in which GPP is calculated based on C3 and C4 photosynthesis, which determines potential leaf-level photosynthesis.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"The plant hydraulics model in ClimaLSM solves for the water content within bulk root-stem-canopy system using Richards equation discretized into an arbitrary number of layers. The water content is related to the water potential using a retention curve relationship, and the water potential is used to simulate the effect moisture stress has on transpiration and GPP.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/#Preliminary-Setup","page":"Standalone Canopy","title":"Preliminary Setup","text":"","category":"section"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Load External Packages:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"import SciMLBase\nusing Plots\nusing Statistics\nusing Dates\nusing Insolation","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Load CliMA Packages and ClimaLSM Modules:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"using ClimaCore\nimport CLIMAParameters as CP\nimport ClimaTimeSteppers as CTS\nusing ClimaLSM\nusing ClimaLSM.Domains: Point\nusing ClimaLSM.Canopy\nusing ClimaLSM.Canopy.PlantHydraulics\nimport ClimaLSM\nimport ClimaLSM.Parameters as LSMP\ninclude(joinpath(pkgdir(ClimaLSM), \"parameters\", \"create_parameters.jl\"));","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Define the floating point precision desired (64 or 32 bit), and get the parameter set holding constants used across CliMA Models:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"const FT = Float64;\nearth_param_set = create_lsm_parameters(FT);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/#Setup-the-Canopy-Model","page":"Standalone Canopy","title":"Setup the Canopy Model","text":"","category":"section"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"We want to simulate a vegetative canopy in standalone mode, without coupling the canopy to atmospheric or soil physics models, so we choose a CanopyModel. From the linked documentation, we can see that we need to provide shared parameters, a domain, a radiative transfer model, photosynthesis model, plant hydraulics model, stomatal conductance model, and atmospheric and radiative flux conditions which may be either prescribed or simulated.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"First, define the parameters of the model domain. These values are needed by some of the component models. Here we are performing a 1-dimensional simulation in a Point domain and will use single stem and leaf compartments, but for 2D simulations, the parameters of the domain would change.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"land_domain = Point(; z_sfc = FT(0.0))\n\nn_stem = Int64(1)\nn_leaf = Int64(1)\nh_stem = FT(9)\nh_leaf = FT(9.5)\ncompartment_midpoints = [h_stem / 2, h_stem + h_leaf / 2]\ncompartment_surfaces = [FT(0), h_stem, h_stem + h_leaf];","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"We will be using prescribed atmospheric and radiative flux drivers from the US-MOz tower observations, which we read in here. We are using prescribed atmospheric and radiative flux conditions, but it is also possible to couple the simulation with atmospheric and/or radiative flux models.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"include(\n    joinpath(\n        pkgdir(ClimaLSM),\n        \"experiments/integrated/ozark/ozark_met_drivers_FLUXNET.jl\",\n    ),\n);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Populate the SharedCanopyParameters struct, which holds the parameters shared between all different components of the canopy model.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"z0_m = FT(2)\nz0_b = FT(0.2)\n\nshared_params = SharedCanopyParameters{FT, typeof(earth_param_set)}(\n    z0_m,\n    z0_b,\n    earth_param_set,\n);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"For this canopy, we are running in standalone mode, which means we need to use a prescribed soil driver, defined as follows:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"ψ_soil0 = FT(0.0)\n\nsoil_driver = PrescribedSoil(\n    root_depths = FT.(-Array(10:-1:1.0) ./ 10.0 * 2.0 .+ 0.2 / 2.0),\n    ψ_soil = t -> eltype(t)(ψ_soil0),\n    soil_α_PAR = FT(0.2),\n    soil_α_NIR = FT(0.4),\n);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Now, setup the canopy model by component. Provide arguments to each component, beginning with radiative transfer:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"rt_params = TwoStreamParameters{FT}(;\n    ld = FT(0.5),\n    α_PAR_leaf = FT(0.1),\n    α_NIR_leaf = FT(0.45),\n    τ_PAR_leaf = FT(0.05),\n    τ_NIR_leaf = FT(0.25),\n    Ω = FT(0.69),\n    λ_γ_PAR = FT(5e-7),\n    λ_γ_NIR = FT(1.65e-6),\n    n_layers = UInt64(20),\n)\n\nrt_model = TwoStreamModel{FT}(rt_params);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Arguments for conductance model:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"cond_params = MedlynConductanceParameters{FT}(;\n    g1 = FT(141),\n    Drel = FT(1.6),\n    g0 = FT(1e-4),\n)\n\nstomatal_model = MedlynConductanceModel{FT}(cond_params);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Arguments for photosynthesis model:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"photo_params = FarquharParameters{FT}(\n    Canopy.C3();\n    oi = FT(0.209),\n    ϕ = FT(0.6),\n    θj = FT(0.9),\n    f = FT(0.015),\n    sc = FT(5e-6),\n    pc = FT(-2e5),\n    Vcmax25 = FT(5e-5),\n    Γstar25 = FT(4.275e-5),\n    Kc25 = FT(4.049e-4),\n    Ko25 = FT(0.2874),\n    To = FT(298.15),\n    ΔHkc = FT(79430),\n    ΔHko = FT(36380),\n    ΔHVcmax = FT(58520),\n    ΔHΓstar = FT(37830),\n    ΔHJmax = FT(43540),\n    ΔHRd = FT(46390),\n)\n\nphotosynthesis_model = FarquharModel{FT}(photo_params);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Arguments for autotrophic respiration model:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"AR_params = AutotrophicRespirationParameters{FT}()\nAR_model = AutotrophicRespirationModel{FT}(AR_params);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Arguments for plant hydraulics model are more complicated.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Begin by providing general plant parameters. For the area indices of the canopy, we choose a PrescribedSiteAreaIndex, which supports LAI as a function of time, with RAI and SAI as constant.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"LAI = 4.2\nLAIfunction = (t) -> eltype(t)(LAI)\nSAI = FT(0.00242)\nf_root_to_shoot = FT(3.5)\nRAI = (SAI + LAI) * f_root_to_shoot\nai_parameterization = PrescribedSiteAreaIndex{FT}(LAIfunction, SAI, RAI)\nrooting_depth = FT(1.0);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Define the root distribution function p(z):","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"function root_distribution(z::T; rooting_depth = rooting_depth) where {T}\n    return T(1.0 / rooting_depth) * exp(z / T(rooting_depth))\nend;","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Create the component conductivity and retention models of the hydraulics model. In ClimaLSM, a Weibull parameterization is used for the conductivity as a function of potential, and a linear retention curve is used.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"K_sat_plant = FT(1.8e-8)\nψ63 = FT(-4 / 0.0098)\nWeibull_param = FT(4)\na = FT(0.05 * 0.0098)\n\nconductivity_model =\n    PlantHydraulics.Weibull{FT}(K_sat_plant, ψ63, Weibull_param)\n\nretention_model = PlantHydraulics.LinearRetentionCurve{FT}(a);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Use these values to populate the parameters of the PlantHydraulics model:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"ν = FT(0.7)\nS_s = FT(1e-2 * 0.0098)\n\nplant_hydraulics_ps = PlantHydraulics.PlantHydraulicsParameters(;\n    ai_parameterization = ai_parameterization,\n    ν = ν,\n    S_s = S_s,\n    root_distribution = root_distribution,\n    conductivity_model = conductivity_model,\n    retention_model = retention_model,\n);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Define the remaining variables required for the plant hydraulics model.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"plant_hydraulics = PlantHydraulics.PlantHydraulicsModel{FT}(;\n    parameters = plant_hydraulics_ps,\n    n_stem = n_stem,\n    n_leaf = n_leaf,\n    compartment_surfaces = compartment_surfaces,\n    compartment_midpoints = compartment_midpoints,\n);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Now, instantiate the canopy model, using the atmospheric and radiative drivers included from the external file, as well as the soil driver we instantiated above. This contains every piece of information needed to generate the set of ODEs modeling the canopy biophysics, ready to be passed off to a timestepper.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"canopy = ClimaLSM.Canopy.CanopyModel{FT}(;\n    parameters = shared_params,\n    domain = land_domain,\n    autotrophic_respiration = AR_model,\n    radiative_transfer = rt_model,\n    photosynthesis = photosynthesis_model,\n    conductance = stomatal_model,\n    hydraulics = plant_hydraulics,\n    soil_driver = soil_driver,\n    atmos = atmos,\n    radiation = radiation,\n);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"[ Info: Using the PrescribedAtmosphere air temperature as the canopy temperature\n","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Initialize the state vectors and obtain the model coordinates, then get the explicit time stepping tendency that updates auxiliary and prognostic variables that are stepped explicitly.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Y, p, coords = ClimaLSM.initialize(canopy)\nexp_tendency! = make_exp_tendency(canopy);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Provide initial conditions for the canopy hydraulics model","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"ψ_stem_0 = FT(-1e5 / 9800)\nψ_leaf_0 = FT(-2e5 / 9800)\n\nS_l_ini =\n    inverse_water_retention_curve.(\n        retention_model,\n        [ψ_stem_0, ψ_leaf_0],\n        ν,\n        S_s,\n    )\n\nfor i in 1:2\n    Y.canopy.hydraulics.ϑ_l.:($i) .= augmented_liquid_fraction.(ν, S_l_ini[i])\nend;","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Select a time range to perform time stepping over, and a dt. Also create the saveat Array to contain the data from the model at each time step. As usual, the timestep depends on the problem you are solving, the accuracy of the solution required, and the timestepping algorithm you are using.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"t0 = FT(0)\nN_days = 365\ntf = t0 + FT(3600 * 24 * N_days)\ndt = FT(225);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Initialize the auxiliary variables for the canopy using the initial conditions and initial time.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"set_initial_aux_state! = make_set_initial_aux_state(canopy)\nset_initial_aux_state!(p, Y, t0);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Allocate the struct which stores the saved auxiliary state and create the callback which saves it at each element in saveat.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"n = 16\nsaveat = Array(t0:(n * dt):tf)\n\nsv = (;\n    t = Array{FT}(undef, length(saveat)),\n    saveval = Array{NamedTuple}(undef, length(saveat)),\n)\ncb = ClimaLSM.NonInterpSavingCallback(sv, saveat);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Select a timestepping algorithm and setup the ODE problem.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"timestepper = CTS.RK4();\node_algo = CTS.ExplicitAlgorithm(timestepper)\n\nprob = SciMLBase.ODEProblem(\n    CTS.ClimaODEFunction(T_exp! = exp_tendency!, dss! = ClimaLSM.dss!),\n    Y,\n    (t0, tf),\n    p,\n);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Now, we can solve the problem and store the model data in the saveat array, using SciMLBase.jl and ClimaTimeSteppers.jl.","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"sol = SciMLBase.solve(prob, ode_algo; dt = dt, callback = cb, saveat = saveat);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/#Create-some-plots","page":"Standalone Canopy","title":"Create some plots","text":"","category":"section"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"We can now plot the data produced in the simulation. For example, GPP:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"daily = sol.t ./ 3600 ./ 24\nmodel_GPP = [\n    parent(sv.saveval[k].canopy.photosynthesis.GPP)[1] for\n    k in 1:length(sv.saveval)\n]\n\nplt1 = Plots.plot(size = (600, 700));\nPlots.plot!(\n    plt1,\n    daily,\n    model_GPP .* 1e6,\n    label = \"Model\",\n    xlim = [minimum(daily), maximum(daily)],\n    xlabel = \"days\",\n    ylabel = \"GPP [μmol/mol]\",\n);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Transpiration plot:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"T = [\n    parent(sv.saveval[k].canopy.conductance.transpiration)[1] for\n    k in 1:length(sv.saveval)\n]\nT = T .* (1e3 * 24 * 3600)\n\nplt2 = Plots.plot(size = (500, 700));\nPlots.plot!(\n    plt2,\n    daily,\n    T,\n    label = \"Model\",\n    xlim = [minimum(daily), maximum(daily)],\n    xlabel = \"days\",\n    ylabel = \"Vapor Flux [mm/day]\",\n);","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Show the two plots together:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Plots.plot(plt1, plt2, layout = (2, 1));","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"Save the output:","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"savefig(\"ozark_standalone_canopy_test.png\");","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"(Image: )","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"","category":"page"},{"location":"generated/Canopy/canopy_tutorial/","page":"Standalone Canopy","title":"Standalone Canopy","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#ClimaLSM.jl","page":"Home","title":"ClimaLSM.jl","text":"","category":"section"}]
}
